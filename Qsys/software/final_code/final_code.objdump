
final_code.elf:     file format elf32-littlenios2
final_code.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x028001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x02800000 paddr 0x02800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02800020 paddr 0x02800020 align 2**12
         filesz 0x00006c00 memsz 0x00006c00 flags r-x
    LOAD off    0x00007c20 vaddr 0x02806c20 paddr 0x02808754 align 2**12
         filesz 0x00001b34 memsz 0x00001b34 flags rw-
    LOAD off    0x0000a288 vaddr 0x0280a288 paddr 0x0280a288 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02800000  02800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02800020  02800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006a18  028001b4  028001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  02806bcc  02806bcc  00007bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b34  02806c20  02808754  00007c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  0280a288  0280a288  0000a288  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00009754  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000998  00000000  00000000  00009780  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000f52  00000000  00000000  0000a118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001b6d1  00000000  00000000  0000b06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000054a5  00000000  00000000  0002673b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000de3a  00000000  00000000  0002bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000012bc  00000000  00000000  00039a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001835  00000000  00000000  0003acd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004347  00000000  00000000  0003c50d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00040854  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00040898  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000433f2  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  000433f5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000433fd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000433fe  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000433ff  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00043408  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00043411  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0004341a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002b  00000000  00000000  00043421  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000a5bab  00000000  00000000  0004344c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02800000 l    d  .entry	00000000 .entry
02800020 l    d  .exceptions	00000000 .exceptions
028001b4 l    d  .text	00000000 .text
02806bcc l    d  .rodata	00000000 .rodata
02806c20 l    d  .rwdata	00000000 .rwdata
0280a288 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
028001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
02806c20 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02802120 l     F .text	00000058 std
0280222c l     F .text	00000008 __fp_lock
02802234 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
02803264 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
028032c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
028033c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
028034ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
028035cc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0280372c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0280395c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
02808734 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
02803c44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
028075d0 l     O .rwdata	000000a4 dma_priv
02807674 l     O .rwdata	0000001c dma_tx
02807690 l     O .rwdata	0000001c dma_rx
028076ac l     O .rwdata	00001060 jtag_uart
02803d68 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
02803ec0 l     F .text	000000a8 alt_avalon_dma_launch_txonly
02803f68 l     F .text	000000a8 alt_avalon_dma_launch_rxonly
02804010 l     F .text	000003a4 alt_avalon_dma_ioctl
02804764 l     F .text	000001c8 alt_avalon_dma_irq
028049dc l     F .text	00000038 alt_dma_txchan_reg
02804a14 l     F .text	00000038 alt_dma_rxchan_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02804c54 l     F .text	00000228 altera_avalon_jtag_uart_irq
02804e7c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02805878 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
02805930 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
028059e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02805e8c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02805fdc l     F .text	000000f8 alt_file_locked
02806260 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02806868 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
02806a1c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
02806b68 l     F .text	00000040 alt_sim_halt
02802fcc g     F .text	00000070 _isatty_r
0280378c g     F .text	0000006c alt_main
028007e8 g     F .text	000000a0 _puts_r
0280a2e0 g     O .bss	00000100 alt_irq
0280303c g     F .text	00000078 _lseek_r
02808754 g       *ABS*	00000000 __flash_rwdata_start
0280a570 g       *ABS*	00000000 __alt_heap_start
02802c08 g     F .text	00000068 __sseek
02802188 g     F .text	000000a4 __sinit
0280492c g     F .text	000000b0 alt_avalon_dma_init
02802288 g     F .text	0000009c __sfmoreglue
02803818 g     F .text	00000020 __malloc_unlock
0280a2a8 g     O .bss	00000004 altera_avalon_timer_ts_freq
02801670 g     F .text	000000e0 memmove
02802278 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
02800000 g     F .entry	0000000c __reset
02800020 g       *ABS*	00000000 __flash_exceptions_start
02802f58 g     F .text	00000074 _fstat_r
0280a294 g     O .bss	00000004 errno
0280a29c g     O .bss	00000004 alt_argv
0281070c g       *ABS*	00000000 _gp
02803af0 g     F .text	00000030 usleep
02805990 g     F .text	00000058 alt_dma_txchan_open
02807450 g     O .rwdata	00000180 alt_fd_list
02805b10 g     F .text	00000094 alt_find_dev
028015d0 g     F .text	000000a0 memcpy
0280226c g     F .text	0000000c _cleanup_r
02805f64 g     F .text	00000078 alt_io_redirect
02806bcc g       *ABS*	00000000 __DTOR_END__
02800888 g     F .text	00000014 puts
02805094 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02806b58 g     F .text	00000008 __udivsi3
02803428 g     F .text	000000c4 isatty
0280a288 g     O .bss	00000004 __malloc_top_pad
02800910 g     F .text	0000049c __sfvwrite_r
02801d44 g     F .text	00000070 _sbrk_r
028030b4 g     F .text	00000078 _read_r
0280872c g     O .rwdata	00000004 alt_max_fd
02802e34 g     F .text	00000110 _fclose_r
028020ec g     F .text	00000034 fflush
0280a28c g     O .bss	00000004 __malloc_max_sbrked_mem
02803da0 g     F .text	00000120 alt_avalon_dma_launch_bidir
028058d8 g     F .text	00000058 alt_dma_rxchan_open
02803638 g     F .text	000000f4 lseek
02808710 g     O .rwdata	00000004 _global_impure_ptr
02801750 g     F .text	000005f4 _realloc_r
0280a570 g       *ABS*	00000000 __bss_end
02805d94 g     F .text	000000f8 alt_iic_isr_register
02806358 g     F .text	0000010c alt_tick
02802254 g     F .text	00000018 __fp_lock_all
02805d4c g     F .text	00000048 alt_ic_irq_enabled
028062c0 g     F .text	00000098 alt_alarm_stop
0280a2ac g     O .bss	00000004 alt_irq_active
028000ec g     F .exceptions	000000c8 alt_irq_handler
02807428 g     O .rwdata	00000028 alt_dev_null
028057a8 g     F .text	0000001c alt_dcache_flush_all
02808754 g       *ABS*	00000000 __ram_rwdata_end
02808724 g     O .rwdata	00000008 alt_dev_list
02804590 g     F .text	00000080 alt_avalon_dma_space
02803b20 g     F .text	00000124 write
02806c20 g       *ABS*	00000000 __ram_rodata_end
028032f0 g     F .text	000000d8 fstat
02806b60 g     F .text	00000008 __umodsi3
0280a570 g       *ABS*	00000000 end
02804b94 g     F .text	000000c0 altera_avalon_jtag_uart_init
02806bc8 g       *ABS*	00000000 __CTOR_LIST__
03000000 g       *ABS*	00000000 __alt_stack_pointer
028052b8 g     F .text	00000240 altera_avalon_jtag_uart_write
02802178 g     F .text	00000004 __sfp_lock_acquire
028014ec g     F .text	000000e4 memchr
02802540 g     F .text	00000314 _free_r
02804610 g     F .text	00000154 alt_avalon_dma_send
0280686c g     F .text	000001b0 __call_exitprocs
02808740 g     O .rwdata	00000008 alt_dma_txchan_list
02808718 g     O .rwdata	00000004 __malloc_sbrk_base
028001b4 g     F .text	0000003c _start
0280a2b0 g     O .bss	00000004 _alt_tick_rate
0280a2b4 g     O .bss	00000004 _alt_nticks
02803838 g     F .text	00000124 read
02803cd8 g     F .text	00000090 alt_sys_init
02806734 g     F .text	00000134 __register_exitproc
02804f2c g     F .text	00000074 altera_avalon_jtag_uart_close
0280312c g     F .text	00000038 __mulsi3
02806c20 g       *ABS*	00000000 __ram_rwdata_start
02806bcc g       *ABS*	00000000 __ram_rodata_start
0280a2b8 g     O .bss	00000028 __malloc_current_mallinfo
02804a4c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
028065a4 g     F .text	000000d0 alt_get_fd
0280564c g     F .text	0000015c alt_busy_sleep
02800000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
02802dc4 g     F .text	00000070 _close_r
028066c0 g     F .text	00000074 memcmp
02804afc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0280a570 g       *ABS*	00000000 __alt_stack_base
02804b44 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02801db4 g     F .text	0000013c __swsetup_r
02802324 g     F .text	000000f0 __sfp
02807020 g     O .rwdata	00000408 __malloc_av_
02802184 g     F .text	00000004 __sinit_lock_release
02802cec g     F .text	00000060 __sread
02806484 g     F .text	00000120 alt_find_file
028057c4 g     F .text	000000b4 alt_dev_llist_insert
028037f8 g     F .text	00000020 __malloc_lock
02803a34 g     F .text	000000bc sbrk
02801ef0 g     F .text	000001fc _fflush_r
0280a288 g       *ABS*	00000000 __bss_start
02802b68 g     F .text	00000098 memset
02800304 g     F .text	000004e4 main
028043f8 g     F .text	00000044 alt_avalon_dma_rx_ioctl
0280a2a0 g     O .bss	00000004 alt_envp
0280a290 g     O .bss	00000004 __malloc_max_total_mem
02804aa4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02802c00 g     F .text	00000008 __sclose
03000000 g       *ABS*	00000000 __alt_heap_limit
02802f44 g     F .text	00000014 fclose
0280a3e0 g     O .bss	00000190 _atexit0
02800dac g     F .text	00000740 _malloc_r
02808730 g     O .rwdata	00000004 alt_errno
0280291c g     F .text	000000b8 _fwalk
02806a98 g     F .text	00000060 __divsi3
02802414 g     F .text	0000012c _malloc_trim_r
02806bcc g       *ABS*	00000000 __CTOR_END__
02806bcc g       *ABS*	00000000 __flash_rodata_start
02806bcc g       *ABS*	00000000 __DTOR_LIST__
02803ca4 g     F .text	00000034 alt_irq_init
028039bc g     F .text	00000078 alt_release_fd
02806674 g     F .text	00000014 atexit
02802d4c g     F .text	00000078 _write_r
0280870c g     O .rwdata	00000004 _impure_ptr
0280a298 g     O .bss	00000004 alt_argc
0280a2a4 g     O .bss	00000004 altera_avalon_timer_ts_base
02805aac g     F .text	00000064 _do_dtors
02800020 g       .exceptions	00000000 alt_irq_entry
0280223c g     F .text	00000018 __fp_unlock_all
0280871c g     O .rwdata	00000008 alt_fs_list
02800020 g       *ABS*	00000000 __ram_exceptions_start
028001f0 g     F .text	00000114 motor
02805bc0 g     F .text	00000050 alt_ic_isr_register
02808754 g       *ABS*	00000000 _edata
0280a570 g       *ABS*	00000000 _end
028001b4 g       *ABS*	00000000 __ram_exceptions_end
02804fa0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02805cac g     F .text	000000a0 alt_ic_irq_disable
02802c70 g     F .text	0000007c __swrite
02808714 g     O .rwdata	00000004 __malloc_trim_threshold
02806464 g     F .text	00000020 altera_nios2_qsys_irq_init
02806688 g     F .text	00000038 exit
02802854 g     F .text	000000c8 _fwalk_reent
02806af8 g     F .text	00000060 __modsi3
03000000 g       *ABS*	00000000 __alt_data_end
02800020 g     F .exceptions	00000000 alt_exception
0280217c g     F .text	00000004 __sfp_lock_release
02806ba8 g     F .text	00000020 _exit
028054f8 g     F .text	00000154 alt_alarm_start
028029d4 g     F .text	00000194 __smakebuf_r
0280089c g     F .text	00000074 strlen
028060d4 g     F .text	0000018c open
02805ba4 g     F .text	0000001c alt_icache_flush_all
02808748 g     O .rwdata	00000004 alt_priority_mask
02805c10 g     F .text	0000009c alt_ic_irq_enable
0280443c g     F .text	00000154 alt_avalon_dma_prepare
02808738 g     O .rwdata	00000008 alt_dma_rxchan_list
0280874c g     O .rwdata	00000008 alt_alarm_list
02805a48 g     F .text	00000064 _do_ctors
02803164 g     F .text	00000100 close
0280354c g     F .text	00000080 alt_load
028043b4 g     F .text	00000044 alt_avalon_dma_tx_ioctl
00000000  w      *UND*	00000000 free
02802180 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

02800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2800000:	0040a034 	movhi	at,640
    ori r1, r1, %lo(_start)
 2800004:	08406d14 	ori	at,at,436
    jmp r1
 2800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 280002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 280003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 280004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 280005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 280006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 280007c:	10000326 	beq	r2,zero,280008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2800080:	20000226 	beq	r4,zero,280008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2800084:	28000ec0 	call	28000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2800088:	00000306 	br	2800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 280008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 280009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 28000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 28000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 28000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 28000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 28000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 28000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 28000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 28000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 28000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 28000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 28000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 28000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 28000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 28000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 28000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 28000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 28000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 28000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 28000e8:	ef80083a 	eret

028000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 28000ec:	defff904 	addi	sp,sp,-28
 28000f0:	dfc00615 	stw	ra,24(sp)
 28000f4:	df000515 	stw	fp,20(sp)
 28000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 28000fc:	0005313a 	rdctl	r2,ipending
 2800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 280010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2800110:	00800044 	movi	r2,1
 2800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2800118:	e0ffff17 	ldw	r3,-4(fp)
 280011c:	e0bffe17 	ldw	r2,-8(fp)
 2800120:	1884703a 	and	r2,r3,r2
 2800124:	1005003a 	cmpeq	r2,r2,zero
 2800128:	1000161e 	bne	r2,zero,2800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 280012c:	e0bffd17 	ldw	r2,-12(fp)
 2800130:	00c0a074 	movhi	r3,641
 2800134:	18e8b804 	addi	r3,r3,-23840
 2800138:	100490fa 	slli	r2,r2,3
 280013c:	10c5883a 	add	r2,r2,r3
 2800140:	11400017 	ldw	r5,0(r2)
 2800144:	e0bffd17 	ldw	r2,-12(fp)
 2800148:	00c0a074 	movhi	r3,641
 280014c:	18e8b804 	addi	r3,r3,-23840
 2800150:	100490fa 	slli	r2,r2,3
 2800154:	10c5883a 	add	r2,r2,r3
 2800158:	10800104 	addi	r2,r2,4
 280015c:	11000017 	ldw	r4,0(r2)
 2800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2800164:	0005313a 	rdctl	r2,ipending
 2800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 280016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2800174:	e0bfff17 	ldw	r2,-4(fp)
 2800178:	1004c03a 	cmpne	r2,r2,zero
 280017c:	103fe31e 	bne	r2,zero,280010c <alt_irq_handler+0x20>
 2800180:	00000706 	br	28001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2800184:	e0bffe17 	ldw	r2,-8(fp)
 2800188:	1085883a 	add	r2,r2,r2
 280018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2800190:	e0bffd17 	ldw	r2,-12(fp)
 2800194:	10800044 	addi	r2,r2,1
 2800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 280019c:	003fde06 	br	2800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 28001a0:	e037883a 	mov	sp,fp
 28001a4:	dfc00117 	ldw	ra,4(sp)
 28001a8:	df000017 	ldw	fp,0(sp)
 28001ac:	dec00204 	addi	sp,sp,8
 28001b0:	f800283a 	ret

Disassembly of section .text:

028001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 28001b4:	06c0c034 	movhi	sp,768
    ori sp, sp, %lo(__alt_stack_pointer)
 28001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 28001bc:	0680a074 	movhi	gp,641
    ori gp, gp, %lo(_gp)
 28001c0:	d681c314 	ori	gp,gp,1804
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 28001c4:	0080a034 	movhi	r2,640
    ori r2, r2, %lo(__bss_start)
 28001c8:	10a8a214 	ori	r2,r2,41608

    movhi r3, %hi(__bss_end)
 28001cc:	00c0a034 	movhi	r3,640
    ori r3, r3, %lo(__bss_end)
 28001d0:	18e95c14 	ori	r3,r3,42352

    beq r2, r3, 1f
 28001d4:	10c00326 	beq	r2,r3,28001e4 <_start+0x30>

0:
    stw zero, (r2)
 28001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 28001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 28001e0:	10fffd36 	bltu	r2,r3,28001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 28001e4:	280354c0 	call	280354c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 28001e8:	280378c0 	call	280378c <alt_main>

028001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 28001ec:	003fff06 	br	28001ec <alt_after_alt_main>

028001f0 <motor>:
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

void motor(int duty_num1, int duty_num2)
{
 28001f0:	defff904 	addi	sp,sp,-28
 28001f4:	df000615 	stw	fp,24(sp)
 28001f8:	df000604 	addi	fp,sp,24
 28001fc:	e13ffc15 	stw	r4,-16(fp)
 2800200:	e17ffd15 	stw	r5,-12(fp)
	int dir1, dir2;
	if(duty_num1<0) dir1 = 1; //01 反轉
 2800204:	e0bffc17 	ldw	r2,-16(fp)
 2800208:	1004403a 	cmpge	r2,r2,zero
 280020c:	1000031e 	bne	r2,zero,280021c <motor+0x2c>
 2800210:	00800044 	movi	r2,1
 2800214:	e0bffb15 	stw	r2,-20(fp)
 2800218:	00000806 	br	280023c <motor+0x4c>
	else if(duty_num1==0) dir1 = 3;
 280021c:	e0bffc17 	ldw	r2,-16(fp)
 2800220:	1004c03a 	cmpne	r2,r2,zero
 2800224:	1000031e 	bne	r2,zero,2800234 <motor+0x44>
 2800228:	008000c4 	movi	r2,3
 280022c:	e0bffb15 	stw	r2,-20(fp)
 2800230:	00000206 	br	280023c <motor+0x4c>
	else dir1 = 2; //10 正轉
 2800234:	00800084 	movi	r2,2
 2800238:	e0bffb15 	stw	r2,-20(fp)

	if(duty_num2<0) dir2 = 1; //01 反轉
 280023c:	e0bffd17 	ldw	r2,-12(fp)
 2800240:	1004403a 	cmpge	r2,r2,zero
 2800244:	1000031e 	bne	r2,zero,2800254 <motor+0x64>
 2800248:	00800044 	movi	r2,1
 280024c:	e0bffa15 	stw	r2,-24(fp)
 2800250:	00000806 	br	2800274 <motor+0x84>
	else if(duty_num2==0) dir2 = 3;
 2800254:	e0bffd17 	ldw	r2,-12(fp)
 2800258:	1004c03a 	cmpne	r2,r2,zero
 280025c:	1000031e 	bne	r2,zero,280026c <motor+0x7c>
 2800260:	008000c4 	movi	r2,3
 2800264:	e0bffa15 	stw	r2,-24(fp)
 2800268:	00000206 	br	2800274 <motor+0x84>
	else dir2= 2; //10 正轉
 280026c:	00800084 	movi	r2,2
 2800270:	e0bffa15 	stw	r2,-24(fp)

	IOWR(MOTORA_DUTY_BASE, 0, abs(duty_num1));
 2800274:	e0bffc17 	ldw	r2,-16(fp)
 2800278:	e0bfff15 	stw	r2,-4(fp)
 280027c:	e0ffff17 	ldw	r3,-4(fp)
 2800280:	1804403a 	cmpge	r2,r3,zero
 2800284:	1000031e 	bne	r2,zero,2800294 <motor+0xa4>
 2800288:	e0bfff17 	ldw	r2,-4(fp)
 280028c:	0085c83a 	sub	r2,zero,r2
 2800290:	e0bfff15 	stw	r2,-4(fp)
 2800294:	00804034 	movhi	r2,256
 2800298:	10802c04 	addi	r2,r2,176
 280029c:	e0ffff17 	ldw	r3,-4(fp)
 28002a0:	10c00035 	stwio	r3,0(r2)
	IOWR(MOTORB_DUTY_BASE, 0, abs(duty_num2));
 28002a4:	e0bffd17 	ldw	r2,-12(fp)
 28002a8:	e0bffe15 	stw	r2,-8(fp)
 28002ac:	e0fffe17 	ldw	r3,-8(fp)
 28002b0:	1804403a 	cmpge	r2,r3,zero
 28002b4:	1000031e 	bne	r2,zero,28002c4 <motor+0xd4>
 28002b8:	e0bffe17 	ldw	r2,-8(fp)
 28002bc:	0085c83a 	sub	r2,zero,r2
 28002c0:	e0bffe15 	stw	r2,-8(fp)
 28002c4:	00804034 	movhi	r2,256
 28002c8:	10802804 	addi	r2,r2,160
 28002cc:	e0fffe17 	ldw	r3,-8(fp)
 28002d0:	10c00035 	stwio	r3,0(r2)
	IOWR(MOTORA_DIR_BASE, 0, dir1);
 28002d4:	00c04034 	movhi	r3,256
 28002d8:	18c02404 	addi	r3,r3,144
 28002dc:	e0bffb17 	ldw	r2,-20(fp)
 28002e0:	18800035 	stwio	r2,0(r3)
	IOWR(MOTORB_DIR_BASE, 0, dir2);
 28002e4:	00c04034 	movhi	r3,256
 28002e8:	18c02004 	addi	r3,r3,128
 28002ec:	e0bffa17 	ldw	r2,-24(fp)
 28002f0:	18800035 	stwio	r2,0(r3)

}
 28002f4:	e037883a 	mov	sp,fp
 28002f8:	df000017 	ldw	fp,0(sp)
 28002fc:	dec00104 	addi	sp,sp,4
 2800300:	f800283a 	ret

02800304 <main>:

int main()
{
 2800304:	deffeb04 	addi	sp,sp,-84
 2800308:	dfc01415 	stw	ra,80(sp)
 280030c:	df001315 	stw	fp,76(sp)
 2800310:	df001304 	addi	fp,sp,76
  int go_speed = 180;
 2800314:	00802d04 	movi	r2,180
 2800318:	e0bffa15 	stw	r2,-24(fp)
  int right_speed_p = 200;
 280031c:	00803204 	movi	r2,200
 2800320:	e0bff915 	stw	r2,-28(fp)
  int right_speed_n = -170;
 2800324:	00bfd584 	movi	r2,-170
 2800328:	e0bff815 	stw	r2,-32(fp)
  int left_speed_p = 180;
 280032c:	00802d04 	movi	r2,180
 2800330:	e0bff715 	stw	r2,-36(fp)
  int left_speed_n = -180;
 2800334:	00bfd304 	movi	r2,-180
 2800338:	e0bff615 	stw	r2,-40(fp)
  int min_speed_left = 170;
 280033c:	00802a84 	movi	r2,170
 2800340:	e0bff515 	stw	r2,-44(fp)
  int min_speed_right = 170;
 2800344:	00802a84 	movi	r2,170
 2800348:	e0bff415 	stw	r2,-48(fp)

  printf("Hello from Nios II!\n");
 280034c:	0100a034 	movhi	r4,640
 2800350:	211af304 	addi	r4,r4,27596
 2800354:	28008880 	call	2800888 <puts>

  int sensor[5] = {IORD(INFRA_SENSOR_0_BASE, 0), IORD(INFRA_SENSOR_1_BASE, 0), IORD(INFRA_SENSOR_2_BASE, 0), IORD(INFRA_SENSOR_3_BASE, 0), IORD(INFRA_SENSOR_4_BASE, 0)};
 2800358:	00804034 	movhi	r2,256
 280035c:	10801804 	addi	r2,r2,96
 2800360:	10c00037 	ldwio	r3,0(r2)
 2800364:	00804034 	movhi	r2,256
 2800368:	10801404 	addi	r2,r2,80
 280036c:	11000037 	ldwio	r4,0(r2)
 2800370:	00804034 	movhi	r2,256
 2800374:	10801004 	addi	r2,r2,64
 2800378:	11400037 	ldwio	r5,0(r2)
 280037c:	00804034 	movhi	r2,256
 2800380:	10800c04 	addi	r2,r2,48
 2800384:	11800037 	ldwio	r6,0(r2)
 2800388:	00804034 	movhi	r2,256
 280038c:	10800804 	addi	r2,r2,32
 2800390:	10800037 	ldwio	r2,0(r2)
 2800394:	e0fffb15 	stw	r3,-20(fp)
 2800398:	e13ffc15 	stw	r4,-16(fp)
 280039c:	e17ffd15 	stw	r5,-12(fp)
 28003a0:	e1bffe15 	stw	r6,-8(fp)
 28003a4:	e0bfff15 	stw	r2,-4(fp)
  int U_Turn_Left = 0, U_Turn_Right = 0, Left = 0, Right = 0, Min_Right = 0, Min_Left = 0, Go = 1;
 28003a8:	e03ff315 	stw	zero,-52(fp)
 28003ac:	e03ff215 	stw	zero,-56(fp)
 28003b0:	e03ff115 	stw	zero,-60(fp)
 28003b4:	e03ff015 	stw	zero,-64(fp)
 28003b8:	e03fef15 	stw	zero,-68(fp)
 28003bc:	e03fee15 	stw	zero,-72(fp)
 28003c0:	00800044 	movi	r2,1
 28003c4:	e0bfed15 	stw	r2,-76(fp)
  while(1){
	  //紅外線感測器讀值
	  sensor[0] = IORD(INFRA_SENSOR_0_BASE, 0);
 28003c8:	00804034 	movhi	r2,256
 28003cc:	10801804 	addi	r2,r2,96
 28003d0:	10800037 	ldwio	r2,0(r2)
 28003d4:	e0bffb15 	stw	r2,-20(fp)
	  sensor[1] = IORD(INFRA_SENSOR_1_BASE, 0);
 28003d8:	00804034 	movhi	r2,256
 28003dc:	10801404 	addi	r2,r2,80
 28003e0:	10800037 	ldwio	r2,0(r2)
 28003e4:	e0bffc15 	stw	r2,-16(fp)
	  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 28003e8:	00804034 	movhi	r2,256
 28003ec:	10801004 	addi	r2,r2,64
 28003f0:	10800037 	ldwio	r2,0(r2)
 28003f4:	e0bffd15 	stw	r2,-12(fp)
	  sensor[3] = IORD(INFRA_SENSOR_3_BASE, 0);
 28003f8:	00804034 	movhi	r2,256
 28003fc:	10800c04 	addi	r2,r2,48
 2800400:	10800037 	ldwio	r2,0(r2)
 2800404:	e0bffe15 	stw	r2,-8(fp)
	  sensor[4] = IORD(INFRA_SENSOR_4_BASE, 0);
 2800408:	00804034 	movhi	r2,256
 280040c:	10800804 	addi	r2,r2,32
 2800410:	10800037 	ldwio	r2,0(r2)
 2800414:	e0bfff15 	stw	r2,-4(fp)

	  if(Go){
 2800418:	e0bfed17 	ldw	r2,-76(fp)
 280041c:	1005003a 	cmpeq	r2,r2,zero
 2800420:	1000751e 	bne	r2,zero,28005f8 <main+0x2f4>
		  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 2800424:	00804034 	movhi	r2,256
 2800428:	10801004 	addi	r2,r2,64
 280042c:	10800037 	ldwio	r2,0(r2)
 2800430:	e0bffd15 	stw	r2,-12(fp)
		  motor(go_speed, go_speed);
 2800434:	e13ffa17 	ldw	r4,-24(fp)
 2800438:	e17ffa17 	ldw	r5,-24(fp)
 280043c:	28001f00 	call	28001f0 <motor>
		  if((sensor[0] && sensor[1])||(sensor[3] && sensor[4])){ 				//中間感測器在白色區域
 2800440:	e0bffb17 	ldw	r2,-20(fp)
 2800444:	1005003a 	cmpeq	r2,r2,zero
 2800448:	1000031e 	bne	r2,zero,2800458 <main+0x154>
 280044c:	e0bffc17 	ldw	r2,-16(fp)
 2800450:	1004c03a 	cmpne	r2,r2,zero
 2800454:	1000061e 	bne	r2,zero,2800470 <main+0x16c>
 2800458:	e0bffe17 	ldw	r2,-8(fp)
 280045c:	1005003a 	cmpeq	r2,r2,zero
 2800460:	1000111e 	bne	r2,zero,28004a8 <main+0x1a4>
 2800464:	e0bfff17 	ldw	r2,-4(fp)
 2800468:	1005003a 	cmpeq	r2,r2,zero
 280046c:	10000e1e 	bne	r2,zero,28004a8 <main+0x1a4>
			  if(sensor[1]){			//左轉
 2800470:	e0bffc17 	ldw	r2,-16(fp)
 2800474:	1005003a 	cmpeq	r2,r2,zero
 2800478:	1000041e 	bne	r2,zero,280048c <main+0x188>
				  Go = 0;
 280047c:	e03fed15 	stw	zero,-76(fp)
				  Left = 1;
 2800480:	00800044 	movi	r2,1
 2800484:	e0bff115 	stw	r2,-60(fp)
 2800488:	0000d406 	br	28007dc <main+0x4d8>
			  } else if(sensor[3]){		//右轉
 280048c:	e0bffe17 	ldw	r2,-8(fp)
 2800490:	1005003a 	cmpeq	r2,r2,zero
 2800494:	1000d11e 	bne	r2,zero,28007dc <main+0x4d8>
				  Go = 0;
 2800498:	e03fed15 	stw	zero,-76(fp)
				  Right = 1;
 280049c:	00800044 	movi	r2,1
 28004a0:	e0bff015 	stw	r2,-64(fp)
	  sensor[4] = IORD(INFRA_SENSOR_4_BASE, 0);

	  if(Go){
		  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
		  motor(go_speed, go_speed);
		  if((sensor[0] && sensor[1])||(sensor[3] && sensor[4])){ 				//中間感測器在白色區域
 28004a4:	0000cd06 	br	28007dc <main+0x4d8>
			  } else if(sensor[3]){		//右轉
				  Go = 0;
				  Right = 1;
			  }
		  } else{						//中間感測器在黑色區域
			  if(sensor[0]){			//向左大轉彎
 28004a8:	e0bffb17 	ldw	r2,-20(fp)
 28004ac:	1005003a 	cmpeq	r2,r2,zero
 28004b0:	1000041e 	bne	r2,zero,28004c4 <main+0x1c0>
				  U_Turn_Left = 1;
 28004b4:	00800044 	movi	r2,1
 28004b8:	e0bff315 	stw	r2,-52(fp)
				  Go = 0;
 28004bc:	e03fed15 	stw	zero,-76(fp)
 28004c0:	00002606 	br	280055c <main+0x258>
			  } else if(sensor[4]){	 	//向右大轉彎
 28004c4:	e0bfff17 	ldw	r2,-4(fp)
 28004c8:	1005003a 	cmpeq	r2,r2,zero
 28004cc:	1000231e 	bne	r2,zero,280055c <main+0x258>
				  U_Turn_Right = 1;
 28004d0:	00800044 	movi	r2,1
 28004d4:	e0bff215 	stw	r2,-56(fp)
				  Go = 0;
 28004d8:	e03fed15 	stw	zero,-76(fp)
			  }

			  while(sensor[1]){			//向左微調
 28004dc:	00001f06 	br	280055c <main+0x258>
				  motor(-min_speed_left, min_speed_left);
 28004e0:	e0bff517 	ldw	r2,-44(fp)
 28004e4:	0089c83a 	sub	r4,zero,r2
 28004e8:	e17ff517 	ldw	r5,-44(fp)
 28004ec:	28001f00 	call	28001f0 <motor>

				  sensor[0] = IORD(INFRA_SENSOR_0_BASE, 0);
 28004f0:	00804034 	movhi	r2,256
 28004f4:	10801804 	addi	r2,r2,96
 28004f8:	10800037 	ldwio	r2,0(r2)
 28004fc:	e0bffb15 	stw	r2,-20(fp)
				  sensor[1] = IORD(INFRA_SENSOR_1_BASE, 0);
 2800500:	00804034 	movhi	r2,256
 2800504:	10801404 	addi	r2,r2,80
 2800508:	10800037 	ldwio	r2,0(r2)
 280050c:	e0bffc15 	stw	r2,-16(fp)
				  sensor[4] = IORD(INFRA_SENSOR_4_BASE, 0);
 2800510:	00804034 	movhi	r2,256
 2800514:	10800804 	addi	r2,r2,32
 2800518:	10800037 	ldwio	r2,0(r2)
 280051c:	e0bfff15 	stw	r2,-4(fp)

				  if(sensor[0]){			//向左大轉彎
 2800520:	e0bffb17 	ldw	r2,-20(fp)
 2800524:	1005003a 	cmpeq	r2,r2,zero
 2800528:	1000041e 	bne	r2,zero,280053c <main+0x238>
					  U_Turn_Left = 1;
 280052c:	00800044 	movi	r2,1
 2800530:	e0bff315 	stw	r2,-52(fp)
					  Go = 0;
 2800534:	e03fed15 	stw	zero,-76(fp)
 2800538:	00000606 	br	2800554 <main+0x250>
				  } else if(sensor[4]){	 	//向右大轉彎
 280053c:	e0bfff17 	ldw	r2,-4(fp)
 2800540:	1005003a 	cmpeq	r2,r2,zero
 2800544:	1000031e 	bne	r2,zero,2800554 <main+0x250>
					  U_Turn_Right = 1;
 2800548:	00800044 	movi	r2,1
 280054c:	e0bff215 	stw	r2,-56(fp)
					  Go = 0;
 2800550:	e03fed15 	stw	zero,-76(fp)
				  }
				  usleep(1000);
 2800554:	0100fa04 	movi	r4,1000
 2800558:	2803af00 	call	2803af0 <usleep>
			  } else if(sensor[4]){	 	//向右大轉彎
				  U_Turn_Right = 1;
				  Go = 0;
			  }

			  while(sensor[1]){			//向左微調
 280055c:	e0bffc17 	ldw	r2,-16(fp)
 2800560:	1004c03a 	cmpne	r2,r2,zero
 2800564:	103fde1e 	bne	r2,zero,28004e0 <main+0x1dc>
					  U_Turn_Right = 1;
					  Go = 0;
				  }
				  usleep(1000);
			  }
			  while(sensor[3]){			//向右微調
 2800568:	00001f06 	br	28005e8 <main+0x2e4>
				  motor(min_speed_right, -min_speed_right);
 280056c:	e0bff417 	ldw	r2,-48(fp)
 2800570:	008bc83a 	sub	r5,zero,r2
 2800574:	e13ff417 	ldw	r4,-48(fp)
 2800578:	28001f00 	call	28001f0 <motor>

				  sensor[0] = IORD(INFRA_SENSOR_0_BASE, 0);
 280057c:	00804034 	movhi	r2,256
 2800580:	10801804 	addi	r2,r2,96
 2800584:	10800037 	ldwio	r2,0(r2)
 2800588:	e0bffb15 	stw	r2,-20(fp)
				  sensor[3] = IORD(INFRA_SENSOR_3_BASE, 0);
 280058c:	00804034 	movhi	r2,256
 2800590:	10800c04 	addi	r2,r2,48
 2800594:	10800037 	ldwio	r2,0(r2)
 2800598:	e0bffe15 	stw	r2,-8(fp)
				  sensor[4] = IORD(INFRA_SENSOR_4_BASE, 0);
 280059c:	00804034 	movhi	r2,256
 28005a0:	10800804 	addi	r2,r2,32
 28005a4:	10800037 	ldwio	r2,0(r2)
 28005a8:	e0bfff15 	stw	r2,-4(fp)

				  if(sensor[0]){			//向左大轉彎
 28005ac:	e0bffb17 	ldw	r2,-20(fp)
 28005b0:	1005003a 	cmpeq	r2,r2,zero
 28005b4:	1000041e 	bne	r2,zero,28005c8 <main+0x2c4>
					  U_Turn_Left = 1;
 28005b8:	00800044 	movi	r2,1
 28005bc:	e0bff315 	stw	r2,-52(fp)
					  Go = 0;
 28005c0:	e03fed15 	stw	zero,-76(fp)
 28005c4:	00000606 	br	28005e0 <main+0x2dc>
				  } else if(sensor[4]){	 	//向右大轉彎
 28005c8:	e0bfff17 	ldw	r2,-4(fp)
 28005cc:	1005003a 	cmpeq	r2,r2,zero
 28005d0:	1000031e 	bne	r2,zero,28005e0 <main+0x2dc>
					  U_Turn_Right = 1;
 28005d4:	00800044 	movi	r2,1
 28005d8:	e0bff215 	stw	r2,-56(fp)
					  Go = 0;
 28005dc:	e03fed15 	stw	zero,-76(fp)
				  }
				  usleep(1000);
 28005e0:	0100fa04 	movi	r4,1000
 28005e4:	2803af00 	call	2803af0 <usleep>
					  U_Turn_Right = 1;
					  Go = 0;
				  }
				  usleep(1000);
			  }
			  while(sensor[3]){			//向右微調
 28005e8:	e0bffe17 	ldw	r2,-8(fp)
 28005ec:	1004c03a 	cmpne	r2,r2,zero
 28005f0:	103fde1e 	bne	r2,zero,280056c <main+0x268>
 28005f4:	00007906 	br	28007dc <main+0x4d8>
					  Go = 0;
				  }
				  usleep(1000);
			  }
		  }
	  }else if(U_Turn_Left){			//向左大轉彎
 28005f8:	e0bff317 	ldw	r2,-52(fp)
 28005fc:	1005003a 	cmpeq	r2,r2,zero
 2800600:	1000221e 	bne	r2,zero,280068c <main+0x388>
		  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 2800604:	00804034 	movhi	r2,256
 2800608:	10801004 	addi	r2,r2,64
 280060c:	10800037 	ldwio	r2,0(r2)
 2800610:	e0bffd15 	stw	r2,-12(fp)
		  while(sensor[2]){				//先直走直到中間感測器偵測到白色區域
 2800614:	00000906 	br	280063c <main+0x338>
			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 2800618:	00804034 	movhi	r2,256
 280061c:	10801004 	addi	r2,r2,64
 2800620:	10800037 	ldwio	r2,0(r2)
 2800624:	e0bffd15 	stw	r2,-12(fp)
			  motor(go_speed, go_speed);
 2800628:	e13ffa17 	ldw	r4,-24(fp)
 280062c:	e17ffa17 	ldw	r5,-24(fp)
 2800630:	28001f00 	call	28001f0 <motor>
			  usleep(1000);
 2800634:	0100fa04 	movi	r4,1000
 2800638:	2803af00 	call	2803af0 <usleep>
				  usleep(1000);
			  }
		  }
	  }else if(U_Turn_Left){			//向左大轉彎
		  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
		  while(sensor[2]){				//先直走直到中間感測器偵測到白色區域
 280063c:	e0bffd17 	ldw	r2,-12(fp)
 2800640:	1004c03a 	cmpne	r2,r2,zero
 2800644:	103ff41e 	bne	r2,zero,2800618 <main+0x314>
			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
			  motor(go_speed, go_speed);
			  usleep(1000);
		  }

		  while(!sensor[2]){			//往左轉
 2800648:	00000906 	br	2800670 <main+0x36c>
			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 280064c:	00804034 	movhi	r2,256
 2800650:	10801004 	addi	r2,r2,64
 2800654:	10800037 	ldwio	r2,0(r2)
 2800658:	e0bffd15 	stw	r2,-12(fp)
			  motor(left_speed_n, left_speed_p);
 280065c:	e13ff617 	ldw	r4,-40(fp)
 2800660:	e17ff717 	ldw	r5,-36(fp)
 2800664:	28001f00 	call	28001f0 <motor>
			  usleep(1000);
 2800668:	0100fa04 	movi	r4,1000
 280066c:	2803af00 	call	2803af0 <usleep>
			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
			  motor(go_speed, go_speed);
			  usleep(1000);
		  }

		  while(!sensor[2]){			//往左轉
 2800670:	e0bffd17 	ldw	r2,-12(fp)
 2800674:	1005003a 	cmpeq	r2,r2,zero
 2800678:	103ff41e 	bne	r2,zero,280064c <main+0x348>
			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
			  motor(left_speed_n, left_speed_p);
			  usleep(1000);
		  }
		  Go = 1;
 280067c:	00800044 	movi	r2,1
 2800680:	e0bfed15 	stw	r2,-76(fp)
		  U_Turn_Left = 0;
 2800684:	e03ff315 	stw	zero,-52(fp)
 2800688:	00005406 	br	28007dc <main+0x4d8>
	  } else if(U_Turn_Right){			//向右大轉彎
 280068c:	e0bff217 	ldw	r2,-56(fp)
 2800690:	1005003a 	cmpeq	r2,r2,zero
 2800694:	1000221e 	bne	r2,zero,2800720 <main+0x41c>
  		  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 2800698:	00804034 	movhi	r2,256
 280069c:	10801004 	addi	r2,r2,64
 28006a0:	10800037 	ldwio	r2,0(r2)
 28006a4:	e0bffd15 	stw	r2,-12(fp)
  		  while(sensor[2]){				//先直走直到中間感測器偵測到白色區域
 28006a8:	00000906 	br	28006d0 <main+0x3cc>
  			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 28006ac:	00804034 	movhi	r2,256
 28006b0:	10801004 	addi	r2,r2,64
 28006b4:	10800037 	ldwio	r2,0(r2)
 28006b8:	e0bffd15 	stw	r2,-12(fp)
  			  motor(go_speed, go_speed);
 28006bc:	e13ffa17 	ldw	r4,-24(fp)
 28006c0:	e17ffa17 	ldw	r5,-24(fp)
 28006c4:	28001f00 	call	28001f0 <motor>
  			  usleep(1000);
 28006c8:	0100fa04 	movi	r4,1000
 28006cc:	2803af00 	call	2803af0 <usleep>
		  }
		  Go = 1;
		  U_Turn_Left = 0;
	  } else if(U_Turn_Right){			//向右大轉彎
  		  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
  		  while(sensor[2]){				//先直走直到中間感測器偵測到白色區域
 28006d0:	e0bffd17 	ldw	r2,-12(fp)
 28006d4:	1004c03a 	cmpne	r2,r2,zero
 28006d8:	103ff41e 	bne	r2,zero,28006ac <main+0x3a8>
  			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
  			  motor(go_speed, go_speed);
  			  usleep(1000);
  		  }
  		  while(!sensor[2]){			//往右轉
 28006dc:	00000906 	br	2800704 <main+0x400>
  			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 28006e0:	00804034 	movhi	r2,256
 28006e4:	10801004 	addi	r2,r2,64
 28006e8:	10800037 	ldwio	r2,0(r2)
 28006ec:	e0bffd15 	stw	r2,-12(fp)
  			  motor(right_speed_p, right_speed_n);
 28006f0:	e13ff917 	ldw	r4,-28(fp)
 28006f4:	e17ff817 	ldw	r5,-32(fp)
 28006f8:	28001f00 	call	28001f0 <motor>
  			  usleep(1000);
 28006fc:	0100fa04 	movi	r4,1000
 2800700:	2803af00 	call	2803af0 <usleep>
  		  while(sensor[2]){				//先直走直到中間感測器偵測到白色區域
  			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
  			  motor(go_speed, go_speed);
  			  usleep(1000);
  		  }
  		  while(!sensor[2]){			//往右轉
 2800704:	e0bffd17 	ldw	r2,-12(fp)
 2800708:	1005003a 	cmpeq	r2,r2,zero
 280070c:	103ff41e 	bne	r2,zero,28006e0 <main+0x3dc>
  			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
  			  motor(right_speed_p, right_speed_n);
  			  usleep(1000);
  		  }
  		  Go = 1;
 2800710:	00800044 	movi	r2,1
 2800714:	e0bfed15 	stw	r2,-76(fp)
  		  U_Turn_Right = 0;
 2800718:	e03ff215 	stw	zero,-56(fp)
 280071c:	00002f06 	br	28007dc <main+0x4d8>
  	  }else if(Right){					//往右轉
 2800720:	e0bff017 	ldw	r2,-64(fp)
 2800724:	1005003a 	cmpeq	r2,r2,zero
 2800728:	1000151e 	bne	r2,zero,2800780 <main+0x47c>
		  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 280072c:	00804034 	movhi	r2,256
 2800730:	10801004 	addi	r2,r2,64
 2800734:	10800037 	ldwio	r2,0(r2)
 2800738:	e0bffd15 	stw	r2,-12(fp)
		  while(!sensor[2]){
 280073c:	00000906 	br	2800764 <main+0x460>
			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 2800740:	00804034 	movhi	r2,256
 2800744:	10801004 	addi	r2,r2,64
 2800748:	10800037 	ldwio	r2,0(r2)
 280074c:	e0bffd15 	stw	r2,-12(fp)
			  motor(right_speed_p, right_speed_n);
 2800750:	e13ff917 	ldw	r4,-28(fp)
 2800754:	e17ff817 	ldw	r5,-32(fp)
 2800758:	28001f00 	call	28001f0 <motor>
			  usleep(1000);
 280075c:	0100fa04 	movi	r4,1000
 2800760:	2803af00 	call	2803af0 <usleep>
  		  }
  		  Go = 1;
  		  U_Turn_Right = 0;
  	  }else if(Right){					//往右轉
		  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
		  while(!sensor[2]){
 2800764:	e0bffd17 	ldw	r2,-12(fp)
 2800768:	1005003a 	cmpeq	r2,r2,zero
 280076c:	103ff41e 	bne	r2,zero,2800740 <main+0x43c>
			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
			  motor(right_speed_p, right_speed_n);
			  usleep(1000);
		  }
		  Go = 1;
 2800770:	00800044 	movi	r2,1
 2800774:	e0bfed15 	stw	r2,-76(fp)
		  Right = 0;
 2800778:	e03ff015 	stw	zero,-64(fp)
 280077c:	00001706 	br	28007dc <main+0x4d8>
  	  }else if(Left){					//往左轉
 2800780:	e0bff117 	ldw	r2,-60(fp)
 2800784:	1005003a 	cmpeq	r2,r2,zero
 2800788:	1000141e 	bne	r2,zero,28007dc <main+0x4d8>
		  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 280078c:	00804034 	movhi	r2,256
 2800790:	10801004 	addi	r2,r2,64
 2800794:	10800037 	ldwio	r2,0(r2)
 2800798:	e0bffd15 	stw	r2,-12(fp)
		  while(!sensor[2]){
 280079c:	00000906 	br	28007c4 <main+0x4c0>
			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
 28007a0:	00804034 	movhi	r2,256
 28007a4:	10801004 	addi	r2,r2,64
 28007a8:	10800037 	ldwio	r2,0(r2)
 28007ac:	e0bffd15 	stw	r2,-12(fp)
			  motor(left_speed_n, left_speed_p);
 28007b0:	e13ff617 	ldw	r4,-40(fp)
 28007b4:	e17ff717 	ldw	r5,-36(fp)
 28007b8:	28001f00 	call	28001f0 <motor>
			  usleep(1000);
 28007bc:	0100fa04 	movi	r4,1000
 28007c0:	2803af00 	call	2803af0 <usleep>
		  }
		  Go = 1;
		  Right = 0;
  	  }else if(Left){					//往左轉
		  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
		  while(!sensor[2]){
 28007c4:	e0bffd17 	ldw	r2,-12(fp)
 28007c8:	1005003a 	cmpeq	r2,r2,zero
 28007cc:	103ff41e 	bne	r2,zero,28007a0 <main+0x49c>
			  sensor[2] = IORD(INFRA_SENSOR_2_BASE, 0);
			  motor(left_speed_n, left_speed_p);
			  usleep(1000);
		  }
		  Go = 1;
 28007d0:	00800044 	movi	r2,1
 28007d4:	e0bfed15 	stw	r2,-76(fp)
		  Left = 0;
 28007d8:	e03ff115 	stw	zero,-60(fp)
	  }

	  usleep(1000);
 28007dc:	0100fa04 	movi	r4,1000
 28007e0:	2803af00 	call	2803af0 <usleep>
  }
 28007e4:	003ef806 	br	28003c8 <main+0xc4>

028007e8 <_puts_r>:
 28007e8:	defff604 	addi	sp,sp,-40
 28007ec:	dc400715 	stw	r17,28(sp)
 28007f0:	2023883a 	mov	r17,r4
 28007f4:	2809883a 	mov	r4,r5
 28007f8:	dfc00915 	stw	ra,36(sp)
 28007fc:	dcc00815 	stw	r19,32(sp)
 2800800:	2827883a 	mov	r19,r5
 2800804:	280089c0 	call	280089c <strlen>
 2800808:	89400217 	ldw	r5,8(r17)
 280080c:	00c0a034 	movhi	r3,640
 2800810:	18daf804 	addi	r3,r3,27616
 2800814:	01c00044 	movi	r7,1
 2800818:	12000044 	addi	r8,r2,1
 280081c:	d8c00515 	stw	r3,20(sp)
 2800820:	d9c00615 	stw	r7,24(sp)
 2800824:	d8c00304 	addi	r3,sp,12
 2800828:	01c00084 	movi	r7,2
 280082c:	8809883a 	mov	r4,r17
 2800830:	d80d883a 	mov	r6,sp
 2800834:	d8c00015 	stw	r3,0(sp)
 2800838:	dcc00315 	stw	r19,12(sp)
 280083c:	da000215 	stw	r8,8(sp)
 2800840:	d9c00115 	stw	r7,4(sp)
 2800844:	d8800415 	stw	r2,16(sp)
 2800848:	28009100 	call	2800910 <__sfvwrite_r>
 280084c:	00ffffc4 	movi	r3,-1
 2800850:	10000626 	beq	r2,zero,280086c <_puts_r+0x84>
 2800854:	1805883a 	mov	r2,r3
 2800858:	dfc00917 	ldw	ra,36(sp)
 280085c:	dcc00817 	ldw	r19,32(sp)
 2800860:	dc400717 	ldw	r17,28(sp)
 2800864:	dec00a04 	addi	sp,sp,40
 2800868:	f800283a 	ret
 280086c:	00c00284 	movi	r3,10
 2800870:	1805883a 	mov	r2,r3
 2800874:	dfc00917 	ldw	ra,36(sp)
 2800878:	dcc00817 	ldw	r19,32(sp)
 280087c:	dc400717 	ldw	r17,28(sp)
 2800880:	dec00a04 	addi	sp,sp,40
 2800884:	f800283a 	ret

02800888 <puts>:
 2800888:	0080a074 	movhi	r2,641
 280088c:	10a1c304 	addi	r2,r2,-30964
 2800890:	200b883a 	mov	r5,r4
 2800894:	11000017 	ldw	r4,0(r2)
 2800898:	28007e81 	jmpi	28007e8 <_puts_r>

0280089c <strlen>:
 280089c:	208000cc 	andi	r2,r4,3
 28008a0:	2011883a 	mov	r8,r4
 28008a4:	1000161e 	bne	r2,zero,2800900 <strlen+0x64>
 28008a8:	20c00017 	ldw	r3,0(r4)
 28008ac:	017fbff4 	movhi	r5,65279
 28008b0:	297fbfc4 	addi	r5,r5,-257
 28008b4:	01e02074 	movhi	r7,32897
 28008b8:	39e02004 	addi	r7,r7,-32640
 28008bc:	1945883a 	add	r2,r3,r5
 28008c0:	11c4703a 	and	r2,r2,r7
 28008c4:	00c6303a 	nor	r3,zero,r3
 28008c8:	1886703a 	and	r3,r3,r2
 28008cc:	18000c1e 	bne	r3,zero,2800900 <strlen+0x64>
 28008d0:	280d883a 	mov	r6,r5
 28008d4:	380b883a 	mov	r5,r7
 28008d8:	21000104 	addi	r4,r4,4
 28008dc:	20800017 	ldw	r2,0(r4)
 28008e0:	1187883a 	add	r3,r2,r6
 28008e4:	1946703a 	and	r3,r3,r5
 28008e8:	0084303a 	nor	r2,zero,r2
 28008ec:	10c4703a 	and	r2,r2,r3
 28008f0:	103ff926 	beq	r2,zero,28008d8 <strlen+0x3c>
 28008f4:	20800007 	ldb	r2,0(r4)
 28008f8:	10000326 	beq	r2,zero,2800908 <strlen+0x6c>
 28008fc:	21000044 	addi	r4,r4,1
 2800900:	20800007 	ldb	r2,0(r4)
 2800904:	103ffd1e 	bne	r2,zero,28008fc <strlen+0x60>
 2800908:	2205c83a 	sub	r2,r4,r8
 280090c:	f800283a 	ret

02800910 <__sfvwrite_r>:
 2800910:	30800217 	ldw	r2,8(r6)
 2800914:	defff504 	addi	sp,sp,-44
 2800918:	df000915 	stw	fp,36(sp)
 280091c:	dd800715 	stw	r22,28(sp)
 2800920:	dc800315 	stw	r18,12(sp)
 2800924:	dfc00a15 	stw	ra,40(sp)
 2800928:	ddc00815 	stw	r23,32(sp)
 280092c:	dd400615 	stw	r21,24(sp)
 2800930:	dd000515 	stw	r20,20(sp)
 2800934:	dcc00415 	stw	r19,16(sp)
 2800938:	dc400215 	stw	r17,8(sp)
 280093c:	dc000115 	stw	r16,4(sp)
 2800940:	302d883a 	mov	r22,r6
 2800944:	2039883a 	mov	fp,r4
 2800948:	2825883a 	mov	r18,r5
 280094c:	10001c26 	beq	r2,zero,28009c0 <__sfvwrite_r+0xb0>
 2800950:	29c0030b 	ldhu	r7,12(r5)
 2800954:	3880020c 	andi	r2,r7,8
 2800958:	10002726 	beq	r2,zero,28009f8 <__sfvwrite_r+0xe8>
 280095c:	28800417 	ldw	r2,16(r5)
 2800960:	10002526 	beq	r2,zero,28009f8 <__sfvwrite_r+0xe8>
 2800964:	3880008c 	andi	r2,r7,2
 2800968:	b5400017 	ldw	r21,0(r22)
 280096c:	10002826 	beq	r2,zero,2800a10 <__sfvwrite_r+0x100>
 2800970:	0021883a 	mov	r16,zero
 2800974:	0023883a 	mov	r17,zero
 2800978:	880d883a 	mov	r6,r17
 280097c:	e009883a 	mov	r4,fp
 2800980:	00810004 	movi	r2,1024
 2800984:	80006e26 	beq	r16,zero,2800b40 <__sfvwrite_r+0x230>
 2800988:	800f883a 	mov	r7,r16
 280098c:	91400717 	ldw	r5,28(r18)
 2800990:	1400012e 	bgeu	r2,r16,2800998 <__sfvwrite_r+0x88>
 2800994:	100f883a 	mov	r7,r2
 2800998:	90c00917 	ldw	r3,36(r18)
 280099c:	183ee83a 	callr	r3
 28009a0:	1007883a 	mov	r3,r2
 28009a4:	80a1c83a 	sub	r16,r16,r2
 28009a8:	88a3883a 	add	r17,r17,r2
 28009ac:	00806d0e 	bge	zero,r2,2800b64 <__sfvwrite_r+0x254>
 28009b0:	b0800217 	ldw	r2,8(r22)
 28009b4:	10c5c83a 	sub	r2,r2,r3
 28009b8:	b0800215 	stw	r2,8(r22)
 28009bc:	103fee1e 	bne	r2,zero,2800978 <__sfvwrite_r+0x68>
 28009c0:	0009883a 	mov	r4,zero
 28009c4:	2005883a 	mov	r2,r4
 28009c8:	dfc00a17 	ldw	ra,40(sp)
 28009cc:	df000917 	ldw	fp,36(sp)
 28009d0:	ddc00817 	ldw	r23,32(sp)
 28009d4:	dd800717 	ldw	r22,28(sp)
 28009d8:	dd400617 	ldw	r21,24(sp)
 28009dc:	dd000517 	ldw	r20,20(sp)
 28009e0:	dcc00417 	ldw	r19,16(sp)
 28009e4:	dc800317 	ldw	r18,12(sp)
 28009e8:	dc400217 	ldw	r17,8(sp)
 28009ec:	dc000117 	ldw	r16,4(sp)
 28009f0:	dec00b04 	addi	sp,sp,44
 28009f4:	f800283a 	ret
 28009f8:	2801db40 	call	2801db4 <__swsetup_r>
 28009fc:	1000e41e 	bne	r2,zero,2800d90 <__sfvwrite_r+0x480>
 2800a00:	91c0030b 	ldhu	r7,12(r18)
 2800a04:	b5400017 	ldw	r21,0(r22)
 2800a08:	3880008c 	andi	r2,r7,2
 2800a0c:	103fd81e 	bne	r2,zero,2800970 <__sfvwrite_r+0x60>
 2800a10:	3880004c 	andi	r2,r7,1
 2800a14:	1005003a 	cmpeq	r2,r2,zero
 2800a18:	10005726 	beq	r2,zero,2800b78 <__sfvwrite_r+0x268>
 2800a1c:	0029883a 	mov	r20,zero
 2800a20:	002f883a 	mov	r23,zero
 2800a24:	a0004226 	beq	r20,zero,2800b30 <__sfvwrite_r+0x220>
 2800a28:	3880800c 	andi	r2,r7,512
 2800a2c:	94000217 	ldw	r16,8(r18)
 2800a30:	10008b26 	beq	r2,zero,2800c60 <__sfvwrite_r+0x350>
 2800a34:	800d883a 	mov	r6,r16
 2800a38:	a400a536 	bltu	r20,r16,2800cd0 <__sfvwrite_r+0x3c0>
 2800a3c:	3881200c 	andi	r2,r7,1152
 2800a40:	10002726 	beq	r2,zero,2800ae0 <__sfvwrite_r+0x1d0>
 2800a44:	90800517 	ldw	r2,20(r18)
 2800a48:	92000417 	ldw	r8,16(r18)
 2800a4c:	91400017 	ldw	r5,0(r18)
 2800a50:	1087883a 	add	r3,r2,r2
 2800a54:	1887883a 	add	r3,r3,r2
 2800a58:	1808d7fa 	srli	r4,r3,31
 2800a5c:	2a21c83a 	sub	r16,r5,r8
 2800a60:	80800044 	addi	r2,r16,1
 2800a64:	20c9883a 	add	r4,r4,r3
 2800a68:	2027d07a 	srai	r19,r4,1
 2800a6c:	a085883a 	add	r2,r20,r2
 2800a70:	980d883a 	mov	r6,r19
 2800a74:	9880022e 	bgeu	r19,r2,2800a80 <__sfvwrite_r+0x170>
 2800a78:	1027883a 	mov	r19,r2
 2800a7c:	100d883a 	mov	r6,r2
 2800a80:	3881000c 	andi	r2,r7,1024
 2800a84:	1000b826 	beq	r2,zero,2800d68 <__sfvwrite_r+0x458>
 2800a88:	300b883a 	mov	r5,r6
 2800a8c:	e009883a 	mov	r4,fp
 2800a90:	2800dac0 	call	2800dac <_malloc_r>
 2800a94:	10003126 	beq	r2,zero,2800b5c <__sfvwrite_r+0x24c>
 2800a98:	91400417 	ldw	r5,16(r18)
 2800a9c:	1009883a 	mov	r4,r2
 2800aa0:	800d883a 	mov	r6,r16
 2800aa4:	1023883a 	mov	r17,r2
 2800aa8:	28015d00 	call	28015d0 <memcpy>
 2800aac:	90c0030b 	ldhu	r3,12(r18)
 2800ab0:	00beffc4 	movi	r2,-1025
 2800ab4:	1886703a 	and	r3,r3,r2
 2800ab8:	18c02014 	ori	r3,r3,128
 2800abc:	90c0030d 	sth	r3,12(r18)
 2800ac0:	9c07c83a 	sub	r3,r19,r16
 2800ac4:	8c05883a 	add	r2,r17,r16
 2800ac8:	a00d883a 	mov	r6,r20
 2800acc:	a021883a 	mov	r16,r20
 2800ad0:	90800015 	stw	r2,0(r18)
 2800ad4:	90c00215 	stw	r3,8(r18)
 2800ad8:	94400415 	stw	r17,16(r18)
 2800adc:	94c00515 	stw	r19,20(r18)
 2800ae0:	91000017 	ldw	r4,0(r18)
 2800ae4:	b80b883a 	mov	r5,r23
 2800ae8:	a023883a 	mov	r17,r20
 2800aec:	28016700 	call	2801670 <memmove>
 2800af0:	90c00217 	ldw	r3,8(r18)
 2800af4:	90800017 	ldw	r2,0(r18)
 2800af8:	a027883a 	mov	r19,r20
 2800afc:	1c07c83a 	sub	r3,r3,r16
 2800b00:	1405883a 	add	r2,r2,r16
 2800b04:	90c00215 	stw	r3,8(r18)
 2800b08:	a021883a 	mov	r16,r20
 2800b0c:	90800015 	stw	r2,0(r18)
 2800b10:	b0800217 	ldw	r2,8(r22)
 2800b14:	1405c83a 	sub	r2,r2,r16
 2800b18:	b0800215 	stw	r2,8(r22)
 2800b1c:	103fa826 	beq	r2,zero,28009c0 <__sfvwrite_r+0xb0>
 2800b20:	a469c83a 	sub	r20,r20,r17
 2800b24:	91c0030b 	ldhu	r7,12(r18)
 2800b28:	bcef883a 	add	r23,r23,r19
 2800b2c:	a03fbe1e 	bne	r20,zero,2800a28 <__sfvwrite_r+0x118>
 2800b30:	adc00017 	ldw	r23,0(r21)
 2800b34:	ad000117 	ldw	r20,4(r21)
 2800b38:	ad400204 	addi	r21,r21,8
 2800b3c:	003fb906 	br	2800a24 <__sfvwrite_r+0x114>
 2800b40:	ac400017 	ldw	r17,0(r21)
 2800b44:	ac000117 	ldw	r16,4(r21)
 2800b48:	ad400204 	addi	r21,r21,8
 2800b4c:	003f8a06 	br	2800978 <__sfvwrite_r+0x68>
 2800b50:	91400417 	ldw	r5,16(r18)
 2800b54:	e009883a 	mov	r4,fp
 2800b58:	28025400 	call	2802540 <_free_r>
 2800b5c:	00800304 	movi	r2,12
 2800b60:	e0800015 	stw	r2,0(fp)
 2800b64:	9080030b 	ldhu	r2,12(r18)
 2800b68:	013fffc4 	movi	r4,-1
 2800b6c:	10801014 	ori	r2,r2,64
 2800b70:	9080030d 	sth	r2,12(r18)
 2800b74:	003f9306 	br	28009c4 <__sfvwrite_r+0xb4>
 2800b78:	0027883a 	mov	r19,zero
 2800b7c:	002f883a 	mov	r23,zero
 2800b80:	d8000015 	stw	zero,0(sp)
 2800b84:	0029883a 	mov	r20,zero
 2800b88:	98001e26 	beq	r19,zero,2800c04 <__sfvwrite_r+0x2f4>
 2800b8c:	d8c00017 	ldw	r3,0(sp)
 2800b90:	1804c03a 	cmpne	r2,r3,zero
 2800b94:	10005e26 	beq	r2,zero,2800d10 <__sfvwrite_r+0x400>
 2800b98:	9821883a 	mov	r16,r19
 2800b9c:	a4c0012e 	bgeu	r20,r19,2800ba4 <__sfvwrite_r+0x294>
 2800ba0:	a021883a 	mov	r16,r20
 2800ba4:	91000017 	ldw	r4,0(r18)
 2800ba8:	90800417 	ldw	r2,16(r18)
 2800bac:	91800217 	ldw	r6,8(r18)
 2800bb0:	91c00517 	ldw	r7,20(r18)
 2800bb4:	1100022e 	bgeu	r2,r4,2800bc0 <__sfvwrite_r+0x2b0>
 2800bb8:	31e3883a 	add	r17,r6,r7
 2800bbc:	8c001616 	blt	r17,r16,2800c18 <__sfvwrite_r+0x308>
 2800bc0:	81c03816 	blt	r16,r7,2800ca4 <__sfvwrite_r+0x394>
 2800bc4:	90c00917 	ldw	r3,36(r18)
 2800bc8:	91400717 	ldw	r5,28(r18)
 2800bcc:	e009883a 	mov	r4,fp
 2800bd0:	b80d883a 	mov	r6,r23
 2800bd4:	183ee83a 	callr	r3
 2800bd8:	1023883a 	mov	r17,r2
 2800bdc:	00bfe10e 	bge	zero,r2,2800b64 <__sfvwrite_r+0x254>
 2800be0:	a469c83a 	sub	r20,r20,r17
 2800be4:	a0001826 	beq	r20,zero,2800c48 <__sfvwrite_r+0x338>
 2800be8:	b0800217 	ldw	r2,8(r22)
 2800bec:	1445c83a 	sub	r2,r2,r17
 2800bf0:	b0800215 	stw	r2,8(r22)
 2800bf4:	103f7226 	beq	r2,zero,28009c0 <__sfvwrite_r+0xb0>
 2800bf8:	9c67c83a 	sub	r19,r19,r17
 2800bfc:	bc6f883a 	add	r23,r23,r17
 2800c00:	983fe21e 	bne	r19,zero,2800b8c <__sfvwrite_r+0x27c>
 2800c04:	adc00017 	ldw	r23,0(r21)
 2800c08:	acc00117 	ldw	r19,4(r21)
 2800c0c:	ad400204 	addi	r21,r21,8
 2800c10:	d8000015 	stw	zero,0(sp)
 2800c14:	003fdc06 	br	2800b88 <__sfvwrite_r+0x278>
 2800c18:	b80b883a 	mov	r5,r23
 2800c1c:	880d883a 	mov	r6,r17
 2800c20:	28016700 	call	2801670 <memmove>
 2800c24:	90c00017 	ldw	r3,0(r18)
 2800c28:	e009883a 	mov	r4,fp
 2800c2c:	900b883a 	mov	r5,r18
 2800c30:	1c47883a 	add	r3,r3,r17
 2800c34:	90c00015 	stw	r3,0(r18)
 2800c38:	2801ef00 	call	2801ef0 <_fflush_r>
 2800c3c:	103fc91e 	bne	r2,zero,2800b64 <__sfvwrite_r+0x254>
 2800c40:	a469c83a 	sub	r20,r20,r17
 2800c44:	a03fe81e 	bne	r20,zero,2800be8 <__sfvwrite_r+0x2d8>
 2800c48:	e009883a 	mov	r4,fp
 2800c4c:	900b883a 	mov	r5,r18
 2800c50:	2801ef00 	call	2801ef0 <_fflush_r>
 2800c54:	103fc31e 	bne	r2,zero,2800b64 <__sfvwrite_r+0x254>
 2800c58:	d8000015 	stw	zero,0(sp)
 2800c5c:	003fe206 	br	2800be8 <__sfvwrite_r+0x2d8>
 2800c60:	91000017 	ldw	r4,0(r18)
 2800c64:	90800417 	ldw	r2,16(r18)
 2800c68:	1100022e 	bgeu	r2,r4,2800c74 <__sfvwrite_r+0x364>
 2800c6c:	8023883a 	mov	r17,r16
 2800c70:	85003136 	bltu	r16,r20,2800d38 <__sfvwrite_r+0x428>
 2800c74:	91c00517 	ldw	r7,20(r18)
 2800c78:	a1c01836 	bltu	r20,r7,2800cdc <__sfvwrite_r+0x3cc>
 2800c7c:	90c00917 	ldw	r3,36(r18)
 2800c80:	91400717 	ldw	r5,28(r18)
 2800c84:	e009883a 	mov	r4,fp
 2800c88:	b80d883a 	mov	r6,r23
 2800c8c:	183ee83a 	callr	r3
 2800c90:	1021883a 	mov	r16,r2
 2800c94:	00bfb30e 	bge	zero,r2,2800b64 <__sfvwrite_r+0x254>
 2800c98:	1023883a 	mov	r17,r2
 2800c9c:	1027883a 	mov	r19,r2
 2800ca0:	003f9b06 	br	2800b10 <__sfvwrite_r+0x200>
 2800ca4:	b80b883a 	mov	r5,r23
 2800ca8:	800d883a 	mov	r6,r16
 2800cac:	28016700 	call	2801670 <memmove>
 2800cb0:	90c00217 	ldw	r3,8(r18)
 2800cb4:	90800017 	ldw	r2,0(r18)
 2800cb8:	8023883a 	mov	r17,r16
 2800cbc:	1c07c83a 	sub	r3,r3,r16
 2800cc0:	1405883a 	add	r2,r2,r16
 2800cc4:	90c00215 	stw	r3,8(r18)
 2800cc8:	90800015 	stw	r2,0(r18)
 2800ccc:	003fc406 	br	2800be0 <__sfvwrite_r+0x2d0>
 2800cd0:	a00d883a 	mov	r6,r20
 2800cd4:	a021883a 	mov	r16,r20
 2800cd8:	003f8106 	br	2800ae0 <__sfvwrite_r+0x1d0>
 2800cdc:	b80b883a 	mov	r5,r23
 2800ce0:	a00d883a 	mov	r6,r20
 2800ce4:	28016700 	call	2801670 <memmove>
 2800ce8:	90c00217 	ldw	r3,8(r18)
 2800cec:	90800017 	ldw	r2,0(r18)
 2800cf0:	a021883a 	mov	r16,r20
 2800cf4:	1d07c83a 	sub	r3,r3,r20
 2800cf8:	1505883a 	add	r2,r2,r20
 2800cfc:	a023883a 	mov	r17,r20
 2800d00:	a027883a 	mov	r19,r20
 2800d04:	90c00215 	stw	r3,8(r18)
 2800d08:	90800015 	stw	r2,0(r18)
 2800d0c:	003f8006 	br	2800b10 <__sfvwrite_r+0x200>
 2800d10:	b809883a 	mov	r4,r23
 2800d14:	01400284 	movi	r5,10
 2800d18:	980d883a 	mov	r6,r19
 2800d1c:	28014ec0 	call	28014ec <memchr>
 2800d20:	10001726 	beq	r2,zero,2800d80 <__sfvwrite_r+0x470>
 2800d24:	15c5c83a 	sub	r2,r2,r23
 2800d28:	15000044 	addi	r20,r2,1
 2800d2c:	00800044 	movi	r2,1
 2800d30:	d8800015 	stw	r2,0(sp)
 2800d34:	003f9806 	br	2800b98 <__sfvwrite_r+0x288>
 2800d38:	b80b883a 	mov	r5,r23
 2800d3c:	800d883a 	mov	r6,r16
 2800d40:	28016700 	call	2801670 <memmove>
 2800d44:	90c00017 	ldw	r3,0(r18)
 2800d48:	e009883a 	mov	r4,fp
 2800d4c:	900b883a 	mov	r5,r18
 2800d50:	1c07883a 	add	r3,r3,r16
 2800d54:	90c00015 	stw	r3,0(r18)
 2800d58:	8027883a 	mov	r19,r16
 2800d5c:	2801ef00 	call	2801ef0 <_fflush_r>
 2800d60:	103f6b26 	beq	r2,zero,2800b10 <__sfvwrite_r+0x200>
 2800d64:	003f7f06 	br	2800b64 <__sfvwrite_r+0x254>
 2800d68:	400b883a 	mov	r5,r8
 2800d6c:	e009883a 	mov	r4,fp
 2800d70:	28017500 	call	2801750 <_realloc_r>
 2800d74:	103f7626 	beq	r2,zero,2800b50 <__sfvwrite_r+0x240>
 2800d78:	1023883a 	mov	r17,r2
 2800d7c:	003f5006 	br	2800ac0 <__sfvwrite_r+0x1b0>
 2800d80:	00c00044 	movi	r3,1
 2800d84:	9d000044 	addi	r20,r19,1
 2800d88:	d8c00015 	stw	r3,0(sp)
 2800d8c:	003f8206 	br	2800b98 <__sfvwrite_r+0x288>
 2800d90:	9080030b 	ldhu	r2,12(r18)
 2800d94:	00c00244 	movi	r3,9
 2800d98:	013fffc4 	movi	r4,-1
 2800d9c:	10801014 	ori	r2,r2,64
 2800da0:	9080030d 	sth	r2,12(r18)
 2800da4:	e0c00015 	stw	r3,0(fp)
 2800da8:	003f0606 	br	28009c4 <__sfvwrite_r+0xb4>

02800dac <_malloc_r>:
 2800dac:	defff604 	addi	sp,sp,-40
 2800db0:	28c002c4 	addi	r3,r5,11
 2800db4:	00800584 	movi	r2,22
 2800db8:	dc800215 	stw	r18,8(sp)
 2800dbc:	dfc00915 	stw	ra,36(sp)
 2800dc0:	df000815 	stw	fp,32(sp)
 2800dc4:	ddc00715 	stw	r23,28(sp)
 2800dc8:	dd800615 	stw	r22,24(sp)
 2800dcc:	dd400515 	stw	r21,20(sp)
 2800dd0:	dd000415 	stw	r20,16(sp)
 2800dd4:	dcc00315 	stw	r19,12(sp)
 2800dd8:	dc400115 	stw	r17,4(sp)
 2800ddc:	dc000015 	stw	r16,0(sp)
 2800de0:	2025883a 	mov	r18,r4
 2800de4:	10c01236 	bltu	r2,r3,2800e30 <_malloc_r+0x84>
 2800de8:	04400404 	movi	r17,16
 2800dec:	8940142e 	bgeu	r17,r5,2800e40 <_malloc_r+0x94>
 2800df0:	00800304 	movi	r2,12
 2800df4:	0007883a 	mov	r3,zero
 2800df8:	90800015 	stw	r2,0(r18)
 2800dfc:	1805883a 	mov	r2,r3
 2800e00:	dfc00917 	ldw	ra,36(sp)
 2800e04:	df000817 	ldw	fp,32(sp)
 2800e08:	ddc00717 	ldw	r23,28(sp)
 2800e0c:	dd800617 	ldw	r22,24(sp)
 2800e10:	dd400517 	ldw	r21,20(sp)
 2800e14:	dd000417 	ldw	r20,16(sp)
 2800e18:	dcc00317 	ldw	r19,12(sp)
 2800e1c:	dc800217 	ldw	r18,8(sp)
 2800e20:	dc400117 	ldw	r17,4(sp)
 2800e24:	dc000017 	ldw	r16,0(sp)
 2800e28:	dec00a04 	addi	sp,sp,40
 2800e2c:	f800283a 	ret
 2800e30:	00bffe04 	movi	r2,-8
 2800e34:	18a2703a 	and	r17,r3,r2
 2800e38:	883fed16 	blt	r17,zero,2800df0 <_malloc_r+0x44>
 2800e3c:	897fec36 	bltu	r17,r5,2800df0 <_malloc_r+0x44>
 2800e40:	9009883a 	mov	r4,r18
 2800e44:	28037f80 	call	28037f8 <__malloc_lock>
 2800e48:	00807dc4 	movi	r2,503
 2800e4c:	14402b2e 	bgeu	r2,r17,2800efc <_malloc_r+0x150>
 2800e50:	8806d27a 	srli	r3,r17,9
 2800e54:	18003f1e 	bne	r3,zero,2800f54 <_malloc_r+0x1a8>
 2800e58:	880cd0fa 	srli	r6,r17,3
 2800e5c:	300490fa 	slli	r2,r6,3
 2800e60:	02c0a034 	movhi	r11,640
 2800e64:	5adc0804 	addi	r11,r11,28704
 2800e68:	12cb883a 	add	r5,r2,r11
 2800e6c:	2c000317 	ldw	r16,12(r5)
 2800e70:	580f883a 	mov	r7,r11
 2800e74:	2c00041e 	bne	r5,r16,2800e88 <_malloc_r+0xdc>
 2800e78:	00000a06 	br	2800ea4 <_malloc_r+0xf8>
 2800e7c:	1800860e 	bge	r3,zero,2801098 <_malloc_r+0x2ec>
 2800e80:	84000317 	ldw	r16,12(r16)
 2800e84:	2c000726 	beq	r5,r16,2800ea4 <_malloc_r+0xf8>
 2800e88:	80800117 	ldw	r2,4(r16)
 2800e8c:	00ffff04 	movi	r3,-4
 2800e90:	10c8703a 	and	r4,r2,r3
 2800e94:	2447c83a 	sub	r3,r4,r17
 2800e98:	008003c4 	movi	r2,15
 2800e9c:	10fff70e 	bge	r2,r3,2800e7c <_malloc_r+0xd0>
 2800ea0:	31bfffc4 	addi	r6,r6,-1
 2800ea4:	32400044 	addi	r9,r6,1
 2800ea8:	0280a034 	movhi	r10,640
 2800eac:	529c0a04 	addi	r10,r10,28712
 2800eb0:	54000217 	ldw	r16,8(r10)
 2800eb4:	8280a026 	beq	r16,r10,2801138 <_malloc_r+0x38c>
 2800eb8:	80800117 	ldw	r2,4(r16)
 2800ebc:	00ffff04 	movi	r3,-4
 2800ec0:	10ca703a 	and	r5,r2,r3
 2800ec4:	2c4dc83a 	sub	r6,r5,r17
 2800ec8:	008003c4 	movi	r2,15
 2800ecc:	11808316 	blt	r2,r6,28010dc <_malloc_r+0x330>
 2800ed0:	52800315 	stw	r10,12(r10)
 2800ed4:	52800215 	stw	r10,8(r10)
 2800ed8:	30002916 	blt	r6,zero,2800f80 <_malloc_r+0x1d4>
 2800edc:	8147883a 	add	r3,r16,r5
 2800ee0:	18800117 	ldw	r2,4(r3)
 2800ee4:	9009883a 	mov	r4,r18
 2800ee8:	10800054 	ori	r2,r2,1
 2800eec:	18800115 	stw	r2,4(r3)
 2800ef0:	28038180 	call	2803818 <__malloc_unlock>
 2800ef4:	80c00204 	addi	r3,r16,8
 2800ef8:	003fc006 	br	2800dfc <_malloc_r+0x50>
 2800efc:	02c0a034 	movhi	r11,640
 2800f00:	5adc0804 	addi	r11,r11,28704
 2800f04:	8ac5883a 	add	r2,r17,r11
 2800f08:	14000317 	ldw	r16,12(r2)
 2800f0c:	580f883a 	mov	r7,r11
 2800f10:	8806d0fa 	srli	r3,r17,3
 2800f14:	14006c26 	beq	r2,r16,28010c8 <_malloc_r+0x31c>
 2800f18:	80c00117 	ldw	r3,4(r16)
 2800f1c:	00bfff04 	movi	r2,-4
 2800f20:	81800317 	ldw	r6,12(r16)
 2800f24:	1886703a 	and	r3,r3,r2
 2800f28:	80c7883a 	add	r3,r16,r3
 2800f2c:	18800117 	ldw	r2,4(r3)
 2800f30:	81400217 	ldw	r5,8(r16)
 2800f34:	9009883a 	mov	r4,r18
 2800f38:	10800054 	ori	r2,r2,1
 2800f3c:	18800115 	stw	r2,4(r3)
 2800f40:	31400215 	stw	r5,8(r6)
 2800f44:	29800315 	stw	r6,12(r5)
 2800f48:	28038180 	call	2803818 <__malloc_unlock>
 2800f4c:	80c00204 	addi	r3,r16,8
 2800f50:	003faa06 	br	2800dfc <_malloc_r+0x50>
 2800f54:	00800104 	movi	r2,4
 2800f58:	10c0052e 	bgeu	r2,r3,2800f70 <_malloc_r+0x1c4>
 2800f5c:	00800504 	movi	r2,20
 2800f60:	10c07836 	bltu	r2,r3,2801144 <_malloc_r+0x398>
 2800f64:	198016c4 	addi	r6,r3,91
 2800f68:	300490fa 	slli	r2,r6,3
 2800f6c:	003fbc06 	br	2800e60 <_malloc_r+0xb4>
 2800f70:	8804d1ba 	srli	r2,r17,6
 2800f74:	11800e04 	addi	r6,r2,56
 2800f78:	300490fa 	slli	r2,r6,3
 2800f7c:	003fb806 	br	2800e60 <_malloc_r+0xb4>
 2800f80:	00807fc4 	movi	r2,511
 2800f84:	1140bb36 	bltu	r2,r5,2801274 <_malloc_r+0x4c8>
 2800f88:	2806d0fa 	srli	r3,r5,3
 2800f8c:	573ffe04 	addi	fp,r10,-8
 2800f90:	00800044 	movi	r2,1
 2800f94:	180890fa 	slli	r4,r3,3
 2800f98:	1807d0ba 	srai	r3,r3,2
 2800f9c:	e1c00117 	ldw	r7,4(fp)
 2800fa0:	5909883a 	add	r4,r11,r4
 2800fa4:	21400217 	ldw	r5,8(r4)
 2800fa8:	10c4983a 	sll	r2,r2,r3
 2800fac:	81000315 	stw	r4,12(r16)
 2800fb0:	81400215 	stw	r5,8(r16)
 2800fb4:	388eb03a 	or	r7,r7,r2
 2800fb8:	2c000315 	stw	r16,12(r5)
 2800fbc:	24000215 	stw	r16,8(r4)
 2800fc0:	e1c00115 	stw	r7,4(fp)
 2800fc4:	4807883a 	mov	r3,r9
 2800fc8:	4800cd16 	blt	r9,zero,2801300 <_malloc_r+0x554>
 2800fcc:	1807d0ba 	srai	r3,r3,2
 2800fd0:	00800044 	movi	r2,1
 2800fd4:	10c8983a 	sll	r4,r2,r3
 2800fd8:	39004436 	bltu	r7,r4,28010ec <_malloc_r+0x340>
 2800fdc:	21c4703a 	and	r2,r4,r7
 2800fe0:	10000a1e 	bne	r2,zero,280100c <_malloc_r+0x260>
 2800fe4:	2109883a 	add	r4,r4,r4
 2800fe8:	00bfff04 	movi	r2,-4
 2800fec:	4884703a 	and	r2,r9,r2
 2800ff0:	3906703a 	and	r3,r7,r4
 2800ff4:	12400104 	addi	r9,r2,4
 2800ff8:	1800041e 	bne	r3,zero,280100c <_malloc_r+0x260>
 2800ffc:	2109883a 	add	r4,r4,r4
 2801000:	3904703a 	and	r2,r7,r4
 2801004:	4a400104 	addi	r9,r9,4
 2801008:	103ffc26 	beq	r2,zero,2800ffc <_malloc_r+0x250>
 280100c:	480490fa 	slli	r2,r9,3
 2801010:	4819883a 	mov	r12,r9
 2801014:	023fff04 	movi	r8,-4
 2801018:	589b883a 	add	r13,r11,r2
 280101c:	6807883a 	mov	r3,r13
 2801020:	014003c4 	movi	r5,15
 2801024:	1c000317 	ldw	r16,12(r3)
 2801028:	1c00041e 	bne	r3,r16,280103c <_malloc_r+0x290>
 280102c:	0000a706 	br	28012cc <_malloc_r+0x520>
 2801030:	3000ab0e 	bge	r6,zero,28012e0 <_malloc_r+0x534>
 2801034:	84000317 	ldw	r16,12(r16)
 2801038:	1c00a426 	beq	r3,r16,28012cc <_malloc_r+0x520>
 280103c:	80800117 	ldw	r2,4(r16)
 2801040:	1204703a 	and	r2,r2,r8
 2801044:	144dc83a 	sub	r6,r2,r17
 2801048:	29bff90e 	bge	r5,r6,2801030 <_malloc_r+0x284>
 280104c:	81000317 	ldw	r4,12(r16)
 2801050:	80c00217 	ldw	r3,8(r16)
 2801054:	89400054 	ori	r5,r17,1
 2801058:	8445883a 	add	r2,r16,r17
 280105c:	20c00215 	stw	r3,8(r4)
 2801060:	19000315 	stw	r4,12(r3)
 2801064:	81400115 	stw	r5,4(r16)
 2801068:	1187883a 	add	r3,r2,r6
 280106c:	31000054 	ori	r4,r6,1
 2801070:	50800315 	stw	r2,12(r10)
 2801074:	50800215 	stw	r2,8(r10)
 2801078:	19800015 	stw	r6,0(r3)
 280107c:	11000115 	stw	r4,4(r2)
 2801080:	12800215 	stw	r10,8(r2)
 2801084:	12800315 	stw	r10,12(r2)
 2801088:	9009883a 	mov	r4,r18
 280108c:	28038180 	call	2803818 <__malloc_unlock>
 2801090:	80c00204 	addi	r3,r16,8
 2801094:	003f5906 	br	2800dfc <_malloc_r+0x50>
 2801098:	8109883a 	add	r4,r16,r4
 280109c:	20800117 	ldw	r2,4(r4)
 28010a0:	80c00217 	ldw	r3,8(r16)
 28010a4:	81400317 	ldw	r5,12(r16)
 28010a8:	10800054 	ori	r2,r2,1
 28010ac:	20800115 	stw	r2,4(r4)
 28010b0:	28c00215 	stw	r3,8(r5)
 28010b4:	19400315 	stw	r5,12(r3)
 28010b8:	9009883a 	mov	r4,r18
 28010bc:	28038180 	call	2803818 <__malloc_unlock>
 28010c0:	80c00204 	addi	r3,r16,8
 28010c4:	003f4d06 	br	2800dfc <_malloc_r+0x50>
 28010c8:	80800204 	addi	r2,r16,8
 28010cc:	14000317 	ldw	r16,12(r2)
 28010d0:	143f911e 	bne	r2,r16,2800f18 <_malloc_r+0x16c>
 28010d4:	1a400084 	addi	r9,r3,2
 28010d8:	003f7306 	br	2800ea8 <_malloc_r+0xfc>
 28010dc:	88c00054 	ori	r3,r17,1
 28010e0:	8445883a 	add	r2,r16,r17
 28010e4:	80c00115 	stw	r3,4(r16)
 28010e8:	003fdf06 	br	2801068 <_malloc_r+0x2bc>
 28010ec:	e4000217 	ldw	r16,8(fp)
 28010f0:	00bfff04 	movi	r2,-4
 28010f4:	80c00117 	ldw	r3,4(r16)
 28010f8:	802d883a 	mov	r22,r16
 28010fc:	18aa703a 	and	r21,r3,r2
 2801100:	ac401636 	bltu	r21,r17,280115c <_malloc_r+0x3b0>
 2801104:	ac49c83a 	sub	r4,r21,r17
 2801108:	008003c4 	movi	r2,15
 280110c:	1100130e 	bge	r2,r4,280115c <_malloc_r+0x3b0>
 2801110:	88800054 	ori	r2,r17,1
 2801114:	8447883a 	add	r3,r16,r17
 2801118:	80800115 	stw	r2,4(r16)
 280111c:	20800054 	ori	r2,r4,1
 2801120:	18800115 	stw	r2,4(r3)
 2801124:	e0c00215 	stw	r3,8(fp)
 2801128:	9009883a 	mov	r4,r18
 280112c:	28038180 	call	2803818 <__malloc_unlock>
 2801130:	80c00204 	addi	r3,r16,8
 2801134:	003f3106 	br	2800dfc <_malloc_r+0x50>
 2801138:	39c00117 	ldw	r7,4(r7)
 280113c:	573ffe04 	addi	fp,r10,-8
 2801140:	003fa006 	br	2800fc4 <_malloc_r+0x218>
 2801144:	00801504 	movi	r2,84
 2801148:	10c06736 	bltu	r2,r3,28012e8 <_malloc_r+0x53c>
 280114c:	8804d33a 	srli	r2,r17,12
 2801150:	11801b84 	addi	r6,r2,110
 2801154:	300490fa 	slli	r2,r6,3
 2801158:	003f4106 	br	2800e60 <_malloc_r+0xb4>
 280115c:	d0a6df17 	ldw	r2,-25732(gp)
 2801160:	d0e00317 	ldw	r3,-32756(gp)
 2801164:	053fffc4 	movi	r20,-1
 2801168:	10800404 	addi	r2,r2,16
 280116c:	88a7883a 	add	r19,r17,r2
 2801170:	1d000326 	beq	r3,r20,2801180 <_malloc_r+0x3d4>
 2801174:	98c3ffc4 	addi	r3,r19,4095
 2801178:	00bc0004 	movi	r2,-4096
 280117c:	18a6703a 	and	r19,r3,r2
 2801180:	9009883a 	mov	r4,r18
 2801184:	980b883a 	mov	r5,r19
 2801188:	2801d440 	call	2801d44 <_sbrk_r>
 280118c:	1009883a 	mov	r4,r2
 2801190:	15000426 	beq	r2,r20,28011a4 <_malloc_r+0x3f8>
 2801194:	854b883a 	add	r5,r16,r21
 2801198:	1029883a 	mov	r20,r2
 280119c:	11405a2e 	bgeu	r2,r5,2801308 <_malloc_r+0x55c>
 28011a0:	87000c26 	beq	r16,fp,28011d4 <_malloc_r+0x428>
 28011a4:	e4000217 	ldw	r16,8(fp)
 28011a8:	80c00117 	ldw	r3,4(r16)
 28011ac:	00bfff04 	movi	r2,-4
 28011b0:	1884703a 	and	r2,r3,r2
 28011b4:	14400336 	bltu	r2,r17,28011c4 <_malloc_r+0x418>
 28011b8:	1449c83a 	sub	r4,r2,r17
 28011bc:	008003c4 	movi	r2,15
 28011c0:	113fd316 	blt	r2,r4,2801110 <_malloc_r+0x364>
 28011c4:	9009883a 	mov	r4,r18
 28011c8:	28038180 	call	2803818 <__malloc_unlock>
 28011cc:	0007883a 	mov	r3,zero
 28011d0:	003f0a06 	br	2800dfc <_malloc_r+0x50>
 28011d4:	05c0a074 	movhi	r23,641
 28011d8:	bde8ae04 	addi	r23,r23,-23880
 28011dc:	b8800017 	ldw	r2,0(r23)
 28011e0:	988d883a 	add	r6,r19,r2
 28011e4:	b9800015 	stw	r6,0(r23)
 28011e8:	d0e00317 	ldw	r3,-32756(gp)
 28011ec:	00bfffc4 	movi	r2,-1
 28011f0:	18808e26 	beq	r3,r2,280142c <_malloc_r+0x680>
 28011f4:	2145c83a 	sub	r2,r4,r5
 28011f8:	3085883a 	add	r2,r6,r2
 28011fc:	b8800015 	stw	r2,0(r23)
 2801200:	20c001cc 	andi	r3,r4,7
 2801204:	18005f1e 	bne	r3,zero,2801384 <_malloc_r+0x5d8>
 2801208:	000b883a 	mov	r5,zero
 280120c:	a4c5883a 	add	r2,r20,r19
 2801210:	1083ffcc 	andi	r2,r2,4095
 2801214:	00c40004 	movi	r3,4096
 2801218:	1887c83a 	sub	r3,r3,r2
 280121c:	28e7883a 	add	r19,r5,r3
 2801220:	9009883a 	mov	r4,r18
 2801224:	980b883a 	mov	r5,r19
 2801228:	2801d440 	call	2801d44 <_sbrk_r>
 280122c:	1007883a 	mov	r3,r2
 2801230:	00bfffc4 	movi	r2,-1
 2801234:	18807a26 	beq	r3,r2,2801420 <_malloc_r+0x674>
 2801238:	1d05c83a 	sub	r2,r3,r20
 280123c:	9885883a 	add	r2,r19,r2
 2801240:	10c00054 	ori	r3,r2,1
 2801244:	b8800017 	ldw	r2,0(r23)
 2801248:	a021883a 	mov	r16,r20
 280124c:	a0c00115 	stw	r3,4(r20)
 2801250:	9885883a 	add	r2,r19,r2
 2801254:	b8800015 	stw	r2,0(r23)
 2801258:	e5000215 	stw	r20,8(fp)
 280125c:	b7003626 	beq	r22,fp,2801338 <_malloc_r+0x58c>
 2801260:	018003c4 	movi	r6,15
 2801264:	35404b36 	bltu	r6,r21,2801394 <_malloc_r+0x5e8>
 2801268:	00800044 	movi	r2,1
 280126c:	a0800115 	stw	r2,4(r20)
 2801270:	003fcd06 	br	28011a8 <_malloc_r+0x3fc>
 2801274:	2808d27a 	srli	r4,r5,9
 2801278:	2000371e 	bne	r4,zero,2801358 <_malloc_r+0x5ac>
 280127c:	2808d0fa 	srli	r4,r5,3
 2801280:	200690fa 	slli	r3,r4,3
 2801284:	1ad1883a 	add	r8,r3,r11
 2801288:	41800217 	ldw	r6,8(r8)
 280128c:	41805b26 	beq	r8,r6,28013fc <_malloc_r+0x650>
 2801290:	30800117 	ldw	r2,4(r6)
 2801294:	00ffff04 	movi	r3,-4
 2801298:	10c4703a 	and	r2,r2,r3
 280129c:	2880022e 	bgeu	r5,r2,28012a8 <_malloc_r+0x4fc>
 28012a0:	31800217 	ldw	r6,8(r6)
 28012a4:	41bffa1e 	bne	r8,r6,2801290 <_malloc_r+0x4e4>
 28012a8:	32000317 	ldw	r8,12(r6)
 28012ac:	39c00117 	ldw	r7,4(r7)
 28012b0:	82000315 	stw	r8,12(r16)
 28012b4:	81800215 	stw	r6,8(r16)
 28012b8:	0700a034 	movhi	fp,640
 28012bc:	e71c0804 	addi	fp,fp,28704
 28012c0:	34000315 	stw	r16,12(r6)
 28012c4:	44000215 	stw	r16,8(r8)
 28012c8:	003f3e06 	br	2800fc4 <_malloc_r+0x218>
 28012cc:	63000044 	addi	r12,r12,1
 28012d0:	608000cc 	andi	r2,r12,3
 28012d4:	10005d26 	beq	r2,zero,280144c <_malloc_r+0x6a0>
 28012d8:	18c00204 	addi	r3,r3,8
 28012dc:	003f5106 	br	2801024 <_malloc_r+0x278>
 28012e0:	8089883a 	add	r4,r16,r2
 28012e4:	003f6d06 	br	280109c <_malloc_r+0x2f0>
 28012e8:	00805504 	movi	r2,340
 28012ec:	10c02036 	bltu	r2,r3,2801370 <_malloc_r+0x5c4>
 28012f0:	8804d3fa 	srli	r2,r17,15
 28012f4:	11801dc4 	addi	r6,r2,119
 28012f8:	300490fa 	slli	r2,r6,3
 28012fc:	003ed806 	br	2800e60 <_malloc_r+0xb4>
 2801300:	48c000c4 	addi	r3,r9,3
 2801304:	003f3106 	br	2800fcc <_malloc_r+0x220>
 2801308:	05c0a074 	movhi	r23,641
 280130c:	bde8ae04 	addi	r23,r23,-23880
 2801310:	b8800017 	ldw	r2,0(r23)
 2801314:	988d883a 	add	r6,r19,r2
 2801318:	b9800015 	stw	r6,0(r23)
 280131c:	293fb21e 	bne	r5,r4,28011e8 <_malloc_r+0x43c>
 2801320:	2083ffcc 	andi	r2,r4,4095
 2801324:	103fb01e 	bne	r2,zero,28011e8 <_malloc_r+0x43c>
 2801328:	e4000217 	ldw	r16,8(fp)
 280132c:	9d45883a 	add	r2,r19,r21
 2801330:	10800054 	ori	r2,r2,1
 2801334:	80800115 	stw	r2,4(r16)
 2801338:	b8c00017 	ldw	r3,0(r23)
 280133c:	d0a6e017 	ldw	r2,-25728(gp)
 2801340:	10c0012e 	bgeu	r2,r3,2801348 <_malloc_r+0x59c>
 2801344:	d0e6e015 	stw	r3,-25728(gp)
 2801348:	d0a6e117 	ldw	r2,-25724(gp)
 280134c:	10ff962e 	bgeu	r2,r3,28011a8 <_malloc_r+0x3fc>
 2801350:	d0e6e115 	stw	r3,-25724(gp)
 2801354:	003f9406 	br	28011a8 <_malloc_r+0x3fc>
 2801358:	00800104 	movi	r2,4
 280135c:	11001e36 	bltu	r2,r4,28013d8 <_malloc_r+0x62c>
 2801360:	2804d1ba 	srli	r2,r5,6
 2801364:	11000e04 	addi	r4,r2,56
 2801368:	200690fa 	slli	r3,r4,3
 280136c:	003fc506 	br	2801284 <_malloc_r+0x4d8>
 2801370:	00815504 	movi	r2,1364
 2801374:	10c01d2e 	bgeu	r2,r3,28013ec <_malloc_r+0x640>
 2801378:	01801f84 	movi	r6,126
 280137c:	0080fc04 	movi	r2,1008
 2801380:	003eb706 	br	2800e60 <_malloc_r+0xb4>
 2801384:	00800204 	movi	r2,8
 2801388:	10cbc83a 	sub	r5,r2,r3
 280138c:	2169883a 	add	r20,r4,r5
 2801390:	003f9e06 	br	280120c <_malloc_r+0x460>
 2801394:	00bffe04 	movi	r2,-8
 2801398:	a93ffd04 	addi	r4,r21,-12
 280139c:	2088703a 	and	r4,r4,r2
 28013a0:	b10b883a 	add	r5,r22,r4
 28013a4:	00c00144 	movi	r3,5
 28013a8:	28c00215 	stw	r3,8(r5)
 28013ac:	28c00115 	stw	r3,4(r5)
 28013b0:	b0800117 	ldw	r2,4(r22)
 28013b4:	1080004c 	andi	r2,r2,1
 28013b8:	2084b03a 	or	r2,r4,r2
 28013bc:	b0800115 	stw	r2,4(r22)
 28013c0:	313fdd2e 	bgeu	r6,r4,2801338 <_malloc_r+0x58c>
 28013c4:	b1400204 	addi	r5,r22,8
 28013c8:	9009883a 	mov	r4,r18
 28013cc:	28025400 	call	2802540 <_free_r>
 28013d0:	e4000217 	ldw	r16,8(fp)
 28013d4:	003fd806 	br	2801338 <_malloc_r+0x58c>
 28013d8:	00800504 	movi	r2,20
 28013dc:	11001536 	bltu	r2,r4,2801434 <_malloc_r+0x688>
 28013e0:	210016c4 	addi	r4,r4,91
 28013e4:	200690fa 	slli	r3,r4,3
 28013e8:	003fa606 	br	2801284 <_malloc_r+0x4d8>
 28013ec:	8804d4ba 	srli	r2,r17,18
 28013f0:	11801f04 	addi	r6,r2,124
 28013f4:	300490fa 	slli	r2,r6,3
 28013f8:	003e9906 	br	2800e60 <_malloc_r+0xb4>
 28013fc:	2009d0ba 	srai	r4,r4,2
 2801400:	0140a034 	movhi	r5,640
 2801404:	295c0804 	addi	r5,r5,28704
 2801408:	00c00044 	movi	r3,1
 280140c:	28800117 	ldw	r2,4(r5)
 2801410:	1906983a 	sll	r3,r3,r4
 2801414:	10c4b03a 	or	r2,r2,r3
 2801418:	28800115 	stw	r2,4(r5)
 280141c:	003fa306 	br	28012ac <_malloc_r+0x500>
 2801420:	0027883a 	mov	r19,zero
 2801424:	00c00044 	movi	r3,1
 2801428:	003f8606 	br	2801244 <_malloc_r+0x498>
 280142c:	d1200315 	stw	r4,-32756(gp)
 2801430:	003f7306 	br	2801200 <_malloc_r+0x454>
 2801434:	00801504 	movi	r2,84
 2801438:	11001936 	bltu	r2,r4,28014a0 <_malloc_r+0x6f4>
 280143c:	2804d33a 	srli	r2,r5,12
 2801440:	11001b84 	addi	r4,r2,110
 2801444:	200690fa 	slli	r3,r4,3
 2801448:	003f8e06 	br	2801284 <_malloc_r+0x4d8>
 280144c:	480b883a 	mov	r5,r9
 2801450:	6807883a 	mov	r3,r13
 2801454:	288000cc 	andi	r2,r5,3
 2801458:	18fffe04 	addi	r3,r3,-8
 280145c:	297fffc4 	addi	r5,r5,-1
 2801460:	10001526 	beq	r2,zero,28014b8 <_malloc_r+0x70c>
 2801464:	18800217 	ldw	r2,8(r3)
 2801468:	10fffa26 	beq	r2,r3,2801454 <_malloc_r+0x6a8>
 280146c:	2109883a 	add	r4,r4,r4
 2801470:	393f1e36 	bltu	r7,r4,28010ec <_malloc_r+0x340>
 2801474:	203f1d26 	beq	r4,zero,28010ec <_malloc_r+0x340>
 2801478:	21c4703a 	and	r2,r4,r7
 280147c:	10000226 	beq	r2,zero,2801488 <_malloc_r+0x6dc>
 2801480:	6013883a 	mov	r9,r12
 2801484:	003ee106 	br	280100c <_malloc_r+0x260>
 2801488:	2109883a 	add	r4,r4,r4
 280148c:	3904703a 	and	r2,r7,r4
 2801490:	63000104 	addi	r12,r12,4
 2801494:	103ffc26 	beq	r2,zero,2801488 <_malloc_r+0x6dc>
 2801498:	6013883a 	mov	r9,r12
 280149c:	003edb06 	br	280100c <_malloc_r+0x260>
 28014a0:	00805504 	movi	r2,340
 28014a4:	11000836 	bltu	r2,r4,28014c8 <_malloc_r+0x71c>
 28014a8:	2804d3fa 	srli	r2,r5,15
 28014ac:	11001dc4 	addi	r4,r2,119
 28014b0:	200690fa 	slli	r3,r4,3
 28014b4:	003f7306 	br	2801284 <_malloc_r+0x4d8>
 28014b8:	0104303a 	nor	r2,zero,r4
 28014bc:	388e703a 	and	r7,r7,r2
 28014c0:	e1c00115 	stw	r7,4(fp)
 28014c4:	003fe906 	br	280146c <_malloc_r+0x6c0>
 28014c8:	00815504 	movi	r2,1364
 28014cc:	1100032e 	bgeu	r2,r4,28014dc <_malloc_r+0x730>
 28014d0:	01001f84 	movi	r4,126
 28014d4:	00c0fc04 	movi	r3,1008
 28014d8:	003f6a06 	br	2801284 <_malloc_r+0x4d8>
 28014dc:	2804d4ba 	srli	r2,r5,18
 28014e0:	11001f04 	addi	r4,r2,124
 28014e4:	200690fa 	slli	r3,r4,3
 28014e8:	003f6606 	br	2801284 <_malloc_r+0x4d8>

028014ec <memchr>:
 28014ec:	008000c4 	movi	r2,3
 28014f0:	29403fcc 	andi	r5,r5,255
 28014f4:	2007883a 	mov	r3,r4
 28014f8:	1180022e 	bgeu	r2,r6,2801504 <memchr+0x18>
 28014fc:	2084703a 	and	r2,r4,r2
 2801500:	10000b26 	beq	r2,zero,2801530 <memchr+0x44>
 2801504:	313fffc4 	addi	r4,r6,-1
 2801508:	3000051e 	bne	r6,zero,2801520 <memchr+0x34>
 280150c:	00002c06 	br	28015c0 <memchr+0xd4>
 2801510:	213fffc4 	addi	r4,r4,-1
 2801514:	00bfffc4 	movi	r2,-1
 2801518:	18c00044 	addi	r3,r3,1
 280151c:	20802826 	beq	r4,r2,28015c0 <memchr+0xd4>
 2801520:	18800003 	ldbu	r2,0(r3)
 2801524:	28bffa1e 	bne	r5,r2,2801510 <memchr+0x24>
 2801528:	1805883a 	mov	r2,r3
 280152c:	f800283a 	ret
 2801530:	0011883a 	mov	r8,zero
 2801534:	0007883a 	mov	r3,zero
 2801538:	01c00104 	movi	r7,4
 280153c:	4004923a 	slli	r2,r8,8
 2801540:	18c00044 	addi	r3,r3,1
 2801544:	1151883a 	add	r8,r2,r5
 2801548:	19fffc1e 	bne	r3,r7,280153c <memchr+0x50>
 280154c:	02bfbff4 	movhi	r10,65279
 2801550:	52bfbfc4 	addi	r10,r10,-257
 2801554:	02602074 	movhi	r9,32897
 2801558:	4a602004 	addi	r9,r9,-32640
 280155c:	02c000c4 	movi	r11,3
 2801560:	20800017 	ldw	r2,0(r4)
 2801564:	31bfff04 	addi	r6,r6,-4
 2801568:	200f883a 	mov	r7,r4
 280156c:	1204f03a 	xor	r2,r2,r8
 2801570:	1287883a 	add	r3,r2,r10
 2801574:	1a46703a 	and	r3,r3,r9
 2801578:	0084303a 	nor	r2,zero,r2
 280157c:	10c4703a 	and	r2,r2,r3
 2801580:	10000b26 	beq	r2,zero,28015b0 <memchr+0xc4>
 2801584:	20800003 	ldbu	r2,0(r4)
 2801588:	28800f26 	beq	r5,r2,28015c8 <memchr+0xdc>
 280158c:	20800043 	ldbu	r2,1(r4)
 2801590:	21c00044 	addi	r7,r4,1
 2801594:	28800c26 	beq	r5,r2,28015c8 <memchr+0xdc>
 2801598:	20800083 	ldbu	r2,2(r4)
 280159c:	21c00084 	addi	r7,r4,2
 28015a0:	28800926 	beq	r5,r2,28015c8 <memchr+0xdc>
 28015a4:	208000c3 	ldbu	r2,3(r4)
 28015a8:	21c000c4 	addi	r7,r4,3
 28015ac:	28800626 	beq	r5,r2,28015c8 <memchr+0xdc>
 28015b0:	21000104 	addi	r4,r4,4
 28015b4:	59bfea36 	bltu	r11,r6,2801560 <memchr+0x74>
 28015b8:	2007883a 	mov	r3,r4
 28015bc:	003fd106 	br	2801504 <memchr+0x18>
 28015c0:	0005883a 	mov	r2,zero
 28015c4:	f800283a 	ret
 28015c8:	3805883a 	mov	r2,r7
 28015cc:	f800283a 	ret

028015d0 <memcpy>:
 28015d0:	01c003c4 	movi	r7,15
 28015d4:	2007883a 	mov	r3,r4
 28015d8:	3980032e 	bgeu	r7,r6,28015e8 <memcpy+0x18>
 28015dc:	2904b03a 	or	r2,r5,r4
 28015e0:	108000cc 	andi	r2,r2,3
 28015e4:	10000926 	beq	r2,zero,280160c <memcpy+0x3c>
 28015e8:	30000626 	beq	r6,zero,2801604 <memcpy+0x34>
 28015ec:	30cd883a 	add	r6,r6,r3
 28015f0:	28800003 	ldbu	r2,0(r5)
 28015f4:	29400044 	addi	r5,r5,1
 28015f8:	18800005 	stb	r2,0(r3)
 28015fc:	18c00044 	addi	r3,r3,1
 2801600:	30fffb1e 	bne	r6,r3,28015f0 <memcpy+0x20>
 2801604:	2005883a 	mov	r2,r4
 2801608:	f800283a 	ret
 280160c:	3811883a 	mov	r8,r7
 2801610:	200f883a 	mov	r7,r4
 2801614:	28c00017 	ldw	r3,0(r5)
 2801618:	31bffc04 	addi	r6,r6,-16
 280161c:	38c00015 	stw	r3,0(r7)
 2801620:	28800117 	ldw	r2,4(r5)
 2801624:	38800115 	stw	r2,4(r7)
 2801628:	28c00217 	ldw	r3,8(r5)
 280162c:	38c00215 	stw	r3,8(r7)
 2801630:	28800317 	ldw	r2,12(r5)
 2801634:	29400404 	addi	r5,r5,16
 2801638:	38800315 	stw	r2,12(r7)
 280163c:	39c00404 	addi	r7,r7,16
 2801640:	41bff436 	bltu	r8,r6,2801614 <memcpy+0x44>
 2801644:	008000c4 	movi	r2,3
 2801648:	1180072e 	bgeu	r2,r6,2801668 <memcpy+0x98>
 280164c:	1007883a 	mov	r3,r2
 2801650:	28800017 	ldw	r2,0(r5)
 2801654:	31bfff04 	addi	r6,r6,-4
 2801658:	29400104 	addi	r5,r5,4
 280165c:	38800015 	stw	r2,0(r7)
 2801660:	39c00104 	addi	r7,r7,4
 2801664:	19bffa36 	bltu	r3,r6,2801650 <memcpy+0x80>
 2801668:	3807883a 	mov	r3,r7
 280166c:	003fde06 	br	28015e8 <memcpy+0x18>

02801670 <memmove>:
 2801670:	2807883a 	mov	r3,r5
 2801674:	2011883a 	mov	r8,r4
 2801678:	29000c2e 	bgeu	r5,r4,28016ac <memmove+0x3c>
 280167c:	298f883a 	add	r7,r5,r6
 2801680:	21c00a2e 	bgeu	r4,r7,28016ac <memmove+0x3c>
 2801684:	30000726 	beq	r6,zero,28016a4 <memmove+0x34>
 2801688:	2187883a 	add	r3,r4,r6
 280168c:	198dc83a 	sub	r6,r3,r6
 2801690:	39ffffc4 	addi	r7,r7,-1
 2801694:	38800003 	ldbu	r2,0(r7)
 2801698:	18ffffc4 	addi	r3,r3,-1
 280169c:	18800005 	stb	r2,0(r3)
 28016a0:	19bffb1e 	bne	r3,r6,2801690 <memmove+0x20>
 28016a4:	2005883a 	mov	r2,r4
 28016a8:	f800283a 	ret
 28016ac:	01c003c4 	movi	r7,15
 28016b0:	39800a36 	bltu	r7,r6,28016dc <memmove+0x6c>
 28016b4:	303ffb26 	beq	r6,zero,28016a4 <memmove+0x34>
 28016b8:	400f883a 	mov	r7,r8
 28016bc:	320d883a 	add	r6,r6,r8
 28016c0:	28800003 	ldbu	r2,0(r5)
 28016c4:	29400044 	addi	r5,r5,1
 28016c8:	38800005 	stb	r2,0(r7)
 28016cc:	39c00044 	addi	r7,r7,1
 28016d0:	39bffb1e 	bne	r7,r6,28016c0 <memmove+0x50>
 28016d4:	2005883a 	mov	r2,r4
 28016d8:	f800283a 	ret
 28016dc:	1904b03a 	or	r2,r3,r4
 28016e0:	108000cc 	andi	r2,r2,3
 28016e4:	103ff31e 	bne	r2,zero,28016b4 <memmove+0x44>
 28016e8:	3811883a 	mov	r8,r7
 28016ec:	180b883a 	mov	r5,r3
 28016f0:	200f883a 	mov	r7,r4
 28016f4:	28c00017 	ldw	r3,0(r5)
 28016f8:	31bffc04 	addi	r6,r6,-16
 28016fc:	38c00015 	stw	r3,0(r7)
 2801700:	28800117 	ldw	r2,4(r5)
 2801704:	38800115 	stw	r2,4(r7)
 2801708:	28c00217 	ldw	r3,8(r5)
 280170c:	38c00215 	stw	r3,8(r7)
 2801710:	28800317 	ldw	r2,12(r5)
 2801714:	29400404 	addi	r5,r5,16
 2801718:	38800315 	stw	r2,12(r7)
 280171c:	39c00404 	addi	r7,r7,16
 2801720:	41bff436 	bltu	r8,r6,28016f4 <memmove+0x84>
 2801724:	008000c4 	movi	r2,3
 2801728:	1180072e 	bgeu	r2,r6,2801748 <memmove+0xd8>
 280172c:	1007883a 	mov	r3,r2
 2801730:	28800017 	ldw	r2,0(r5)
 2801734:	31bfff04 	addi	r6,r6,-4
 2801738:	29400104 	addi	r5,r5,4
 280173c:	38800015 	stw	r2,0(r7)
 2801740:	39c00104 	addi	r7,r7,4
 2801744:	19bffa36 	bltu	r3,r6,2801730 <memmove+0xc0>
 2801748:	3811883a 	mov	r8,r7
 280174c:	003fd906 	br	28016b4 <memmove+0x44>

02801750 <_realloc_r>:
 2801750:	defff404 	addi	sp,sp,-48
 2801754:	dd800815 	stw	r22,32(sp)
 2801758:	dc800415 	stw	r18,16(sp)
 280175c:	dc400315 	stw	r17,12(sp)
 2801760:	dfc00b15 	stw	ra,44(sp)
 2801764:	df000a15 	stw	fp,40(sp)
 2801768:	ddc00915 	stw	r23,36(sp)
 280176c:	dd400715 	stw	r21,28(sp)
 2801770:	dd000615 	stw	r20,24(sp)
 2801774:	dcc00515 	stw	r19,20(sp)
 2801778:	dc000215 	stw	r16,8(sp)
 280177c:	2825883a 	mov	r18,r5
 2801780:	3023883a 	mov	r17,r6
 2801784:	202d883a 	mov	r22,r4
 2801788:	2800c926 	beq	r5,zero,2801ab0 <_realloc_r+0x360>
 280178c:	28037f80 	call	28037f8 <__malloc_lock>
 2801790:	943ffe04 	addi	r16,r18,-8
 2801794:	88c002c4 	addi	r3,r17,11
 2801798:	00800584 	movi	r2,22
 280179c:	82000117 	ldw	r8,4(r16)
 28017a0:	10c01b2e 	bgeu	r2,r3,2801810 <_realloc_r+0xc0>
 28017a4:	00bffe04 	movi	r2,-8
 28017a8:	188e703a 	and	r7,r3,r2
 28017ac:	3839883a 	mov	fp,r7
 28017b0:	38001a16 	blt	r7,zero,280181c <_realloc_r+0xcc>
 28017b4:	e4401936 	bltu	fp,r17,280181c <_realloc_r+0xcc>
 28017b8:	013fff04 	movi	r4,-4
 28017bc:	4126703a 	and	r19,r8,r4
 28017c0:	99c02616 	blt	r19,r7,280185c <_realloc_r+0x10c>
 28017c4:	802b883a 	mov	r21,r16
 28017c8:	9829883a 	mov	r20,r19
 28017cc:	84000204 	addi	r16,r16,8
 28017d0:	a80f883a 	mov	r7,r21
 28017d4:	a70dc83a 	sub	r6,r20,fp
 28017d8:	008003c4 	movi	r2,15
 28017dc:	1180c136 	bltu	r2,r6,2801ae4 <_realloc_r+0x394>
 28017e0:	38800117 	ldw	r2,4(r7)
 28017e4:	a549883a 	add	r4,r20,r21
 28017e8:	1080004c 	andi	r2,r2,1
 28017ec:	a084b03a 	or	r2,r20,r2
 28017f0:	38800115 	stw	r2,4(r7)
 28017f4:	20c00117 	ldw	r3,4(r4)
 28017f8:	18c00054 	ori	r3,r3,1
 28017fc:	20c00115 	stw	r3,4(r4)
 2801800:	b009883a 	mov	r4,r22
 2801804:	28038180 	call	2803818 <__malloc_unlock>
 2801808:	8023883a 	mov	r17,r16
 280180c:	00000606 	br	2801828 <_realloc_r+0xd8>
 2801810:	01c00404 	movi	r7,16
 2801814:	3839883a 	mov	fp,r7
 2801818:	e47fe72e 	bgeu	fp,r17,28017b8 <_realloc_r+0x68>
 280181c:	00800304 	movi	r2,12
 2801820:	0023883a 	mov	r17,zero
 2801824:	b0800015 	stw	r2,0(r22)
 2801828:	8805883a 	mov	r2,r17
 280182c:	dfc00b17 	ldw	ra,44(sp)
 2801830:	df000a17 	ldw	fp,40(sp)
 2801834:	ddc00917 	ldw	r23,36(sp)
 2801838:	dd800817 	ldw	r22,32(sp)
 280183c:	dd400717 	ldw	r21,28(sp)
 2801840:	dd000617 	ldw	r20,24(sp)
 2801844:	dcc00517 	ldw	r19,20(sp)
 2801848:	dc800417 	ldw	r18,16(sp)
 280184c:	dc400317 	ldw	r17,12(sp)
 2801850:	dc000217 	ldw	r16,8(sp)
 2801854:	dec00c04 	addi	sp,sp,48
 2801858:	f800283a 	ret
 280185c:	0080a034 	movhi	r2,640
 2801860:	109c0804 	addi	r2,r2,28704
 2801864:	12400217 	ldw	r9,8(r2)
 2801868:	84cd883a 	add	r6,r16,r19
 280186c:	802b883a 	mov	r21,r16
 2801870:	3240b926 	beq	r6,r9,2801b58 <_realloc_r+0x408>
 2801874:	31400117 	ldw	r5,4(r6)
 2801878:	00bfff84 	movi	r2,-2
 280187c:	2884703a 	and	r2,r5,r2
 2801880:	1185883a 	add	r2,r2,r6
 2801884:	10c00117 	ldw	r3,4(r2)
 2801888:	18c0004c 	andi	r3,r3,1
 280188c:	1807003a 	cmpeq	r3,r3,zero
 2801890:	1800a326 	beq	r3,zero,2801b20 <_realloc_r+0x3d0>
 2801894:	2908703a 	and	r4,r5,r4
 2801898:	9929883a 	add	r20,r19,r4
 280189c:	a1c0a30e 	bge	r20,r7,2801b2c <_realloc_r+0x3dc>
 28018a0:	4080004c 	andi	r2,r8,1
 28018a4:	1000551e 	bne	r2,zero,28019fc <_realloc_r+0x2ac>
 28018a8:	80800017 	ldw	r2,0(r16)
 28018ac:	80afc83a 	sub	r23,r16,r2
 28018b0:	b8c00117 	ldw	r3,4(r23)
 28018b4:	00bfff04 	movi	r2,-4
 28018b8:	1884703a 	and	r2,r3,r2
 28018bc:	30002e26 	beq	r6,zero,2801978 <_realloc_r+0x228>
 28018c0:	3240b926 	beq	r6,r9,2801ba8 <_realloc_r+0x458>
 28018c4:	98a9883a 	add	r20,r19,r2
 28018c8:	2509883a 	add	r4,r4,r20
 28018cc:	d9000015 	stw	r4,0(sp)
 28018d0:	21c02a16 	blt	r4,r7,280197c <_realloc_r+0x22c>
 28018d4:	30800317 	ldw	r2,12(r6)
 28018d8:	30c00217 	ldw	r3,8(r6)
 28018dc:	01400904 	movi	r5,36
 28018e0:	99bfff04 	addi	r6,r19,-4
 28018e4:	18800315 	stw	r2,12(r3)
 28018e8:	10c00215 	stw	r3,8(r2)
 28018ec:	b9000317 	ldw	r4,12(r23)
 28018f0:	b8800217 	ldw	r2,8(r23)
 28018f4:	b82b883a 	mov	r21,r23
 28018f8:	bc000204 	addi	r16,r23,8
 28018fc:	20800215 	stw	r2,8(r4)
 2801900:	11000315 	stw	r4,12(r2)
 2801904:	2980e436 	bltu	r5,r6,2801c98 <_realloc_r+0x548>
 2801908:	008004c4 	movi	r2,19
 280190c:	9009883a 	mov	r4,r18
 2801910:	8011883a 	mov	r8,r16
 2801914:	11800f2e 	bgeu	r2,r6,2801954 <_realloc_r+0x204>
 2801918:	90800017 	ldw	r2,0(r18)
 280191c:	ba000404 	addi	r8,r23,16
 2801920:	91000204 	addi	r4,r18,8
 2801924:	b8800215 	stw	r2,8(r23)
 2801928:	90c00117 	ldw	r3,4(r18)
 280192c:	008006c4 	movi	r2,27
 2801930:	b8c00315 	stw	r3,12(r23)
 2801934:	1180072e 	bgeu	r2,r6,2801954 <_realloc_r+0x204>
 2801938:	90c00217 	ldw	r3,8(r18)
 280193c:	ba000604 	addi	r8,r23,24
 2801940:	91000404 	addi	r4,r18,16
 2801944:	b8c00415 	stw	r3,16(r23)
 2801948:	90800317 	ldw	r2,12(r18)
 280194c:	b8800515 	stw	r2,20(r23)
 2801950:	3140e726 	beq	r6,r5,2801cf0 <_realloc_r+0x5a0>
 2801954:	20800017 	ldw	r2,0(r4)
 2801958:	dd000017 	ldw	r20,0(sp)
 280195c:	b80f883a 	mov	r7,r23
 2801960:	40800015 	stw	r2,0(r8)
 2801964:	20c00117 	ldw	r3,4(r4)
 2801968:	40c00115 	stw	r3,4(r8)
 280196c:	20800217 	ldw	r2,8(r4)
 2801970:	40800215 	stw	r2,8(r8)
 2801974:	003f9706 	br	28017d4 <_realloc_r+0x84>
 2801978:	98a9883a 	add	r20,r19,r2
 280197c:	a1c01f16 	blt	r20,r7,28019fc <_realloc_r+0x2ac>
 2801980:	b8c00317 	ldw	r3,12(r23)
 2801984:	b8800217 	ldw	r2,8(r23)
 2801988:	99bfff04 	addi	r6,r19,-4
 280198c:	01400904 	movi	r5,36
 2801990:	b82b883a 	mov	r21,r23
 2801994:	18800215 	stw	r2,8(r3)
 2801998:	10c00315 	stw	r3,12(r2)
 280199c:	bc000204 	addi	r16,r23,8
 28019a0:	2980c336 	bltu	r5,r6,2801cb0 <_realloc_r+0x560>
 28019a4:	008004c4 	movi	r2,19
 28019a8:	9009883a 	mov	r4,r18
 28019ac:	8011883a 	mov	r8,r16
 28019b0:	11800f2e 	bgeu	r2,r6,28019f0 <_realloc_r+0x2a0>
 28019b4:	90800017 	ldw	r2,0(r18)
 28019b8:	ba000404 	addi	r8,r23,16
 28019bc:	91000204 	addi	r4,r18,8
 28019c0:	b8800215 	stw	r2,8(r23)
 28019c4:	90c00117 	ldw	r3,4(r18)
 28019c8:	008006c4 	movi	r2,27
 28019cc:	b8c00315 	stw	r3,12(r23)
 28019d0:	1180072e 	bgeu	r2,r6,28019f0 <_realloc_r+0x2a0>
 28019d4:	90c00217 	ldw	r3,8(r18)
 28019d8:	ba000604 	addi	r8,r23,24
 28019dc:	91000404 	addi	r4,r18,16
 28019e0:	b8c00415 	stw	r3,16(r23)
 28019e4:	90800317 	ldw	r2,12(r18)
 28019e8:	b8800515 	stw	r2,20(r23)
 28019ec:	3140c726 	beq	r6,r5,2801d0c <_realloc_r+0x5bc>
 28019f0:	20800017 	ldw	r2,0(r4)
 28019f4:	b80f883a 	mov	r7,r23
 28019f8:	003fd906 	br	2801960 <_realloc_r+0x210>
 28019fc:	880b883a 	mov	r5,r17
 2801a00:	b009883a 	mov	r4,r22
 2801a04:	2800dac0 	call	2800dac <_malloc_r>
 2801a08:	1023883a 	mov	r17,r2
 2801a0c:	10002526 	beq	r2,zero,2801aa4 <_realloc_r+0x354>
 2801a10:	80800117 	ldw	r2,4(r16)
 2801a14:	00ffff84 	movi	r3,-2
 2801a18:	893ffe04 	addi	r4,r17,-8
 2801a1c:	10c4703a 	and	r2,r2,r3
 2801a20:	8085883a 	add	r2,r16,r2
 2801a24:	20809526 	beq	r4,r2,2801c7c <_realloc_r+0x52c>
 2801a28:	99bfff04 	addi	r6,r19,-4
 2801a2c:	01c00904 	movi	r7,36
 2801a30:	39804536 	bltu	r7,r6,2801b48 <_realloc_r+0x3f8>
 2801a34:	008004c4 	movi	r2,19
 2801a38:	9009883a 	mov	r4,r18
 2801a3c:	880b883a 	mov	r5,r17
 2801a40:	11800f2e 	bgeu	r2,r6,2801a80 <_realloc_r+0x330>
 2801a44:	90800017 	ldw	r2,0(r18)
 2801a48:	89400204 	addi	r5,r17,8
 2801a4c:	91000204 	addi	r4,r18,8
 2801a50:	88800015 	stw	r2,0(r17)
 2801a54:	90c00117 	ldw	r3,4(r18)
 2801a58:	008006c4 	movi	r2,27
 2801a5c:	88c00115 	stw	r3,4(r17)
 2801a60:	1180072e 	bgeu	r2,r6,2801a80 <_realloc_r+0x330>
 2801a64:	90c00217 	ldw	r3,8(r18)
 2801a68:	89400404 	addi	r5,r17,16
 2801a6c:	91000404 	addi	r4,r18,16
 2801a70:	88c00215 	stw	r3,8(r17)
 2801a74:	90800317 	ldw	r2,12(r18)
 2801a78:	88800315 	stw	r2,12(r17)
 2801a7c:	31c09126 	beq	r6,r7,2801cc4 <_realloc_r+0x574>
 2801a80:	20800017 	ldw	r2,0(r4)
 2801a84:	28800015 	stw	r2,0(r5)
 2801a88:	20c00117 	ldw	r3,4(r4)
 2801a8c:	28c00115 	stw	r3,4(r5)
 2801a90:	20800217 	ldw	r2,8(r4)
 2801a94:	28800215 	stw	r2,8(r5)
 2801a98:	900b883a 	mov	r5,r18
 2801a9c:	b009883a 	mov	r4,r22
 2801aa0:	28025400 	call	2802540 <_free_r>
 2801aa4:	b009883a 	mov	r4,r22
 2801aa8:	28038180 	call	2803818 <__malloc_unlock>
 2801aac:	003f5e06 	br	2801828 <_realloc_r+0xd8>
 2801ab0:	300b883a 	mov	r5,r6
 2801ab4:	dfc00b17 	ldw	ra,44(sp)
 2801ab8:	df000a17 	ldw	fp,40(sp)
 2801abc:	ddc00917 	ldw	r23,36(sp)
 2801ac0:	dd800817 	ldw	r22,32(sp)
 2801ac4:	dd400717 	ldw	r21,28(sp)
 2801ac8:	dd000617 	ldw	r20,24(sp)
 2801acc:	dcc00517 	ldw	r19,20(sp)
 2801ad0:	dc800417 	ldw	r18,16(sp)
 2801ad4:	dc400317 	ldw	r17,12(sp)
 2801ad8:	dc000217 	ldw	r16,8(sp)
 2801adc:	dec00c04 	addi	sp,sp,48
 2801ae0:	2800dac1 	jmpi	2800dac <_malloc_r>
 2801ae4:	38800117 	ldw	r2,4(r7)
 2801ae8:	e54b883a 	add	r5,fp,r21
 2801aec:	31000054 	ori	r4,r6,1
 2801af0:	1080004c 	andi	r2,r2,1
 2801af4:	1704b03a 	or	r2,r2,fp
 2801af8:	38800115 	stw	r2,4(r7)
 2801afc:	29000115 	stw	r4,4(r5)
 2801b00:	2987883a 	add	r3,r5,r6
 2801b04:	18800117 	ldw	r2,4(r3)
 2801b08:	29400204 	addi	r5,r5,8
 2801b0c:	b009883a 	mov	r4,r22
 2801b10:	10800054 	ori	r2,r2,1
 2801b14:	18800115 	stw	r2,4(r3)
 2801b18:	28025400 	call	2802540 <_free_r>
 2801b1c:	003f3806 	br	2801800 <_realloc_r+0xb0>
 2801b20:	000d883a 	mov	r6,zero
 2801b24:	0009883a 	mov	r4,zero
 2801b28:	003f5d06 	br	28018a0 <_realloc_r+0x150>
 2801b2c:	30c00217 	ldw	r3,8(r6)
 2801b30:	30800317 	ldw	r2,12(r6)
 2801b34:	800f883a 	mov	r7,r16
 2801b38:	84000204 	addi	r16,r16,8
 2801b3c:	10c00215 	stw	r3,8(r2)
 2801b40:	18800315 	stw	r2,12(r3)
 2801b44:	003f2306 	br	28017d4 <_realloc_r+0x84>
 2801b48:	8809883a 	mov	r4,r17
 2801b4c:	900b883a 	mov	r5,r18
 2801b50:	28016700 	call	2801670 <memmove>
 2801b54:	003fd006 	br	2801a98 <_realloc_r+0x348>
 2801b58:	30800117 	ldw	r2,4(r6)
 2801b5c:	e0c00404 	addi	r3,fp,16
 2801b60:	1108703a 	and	r4,r2,r4
 2801b64:	9905883a 	add	r2,r19,r4
 2801b68:	10ff4d16 	blt	r2,r3,28018a0 <_realloc_r+0x150>
 2801b6c:	1705c83a 	sub	r2,r2,fp
 2801b70:	870b883a 	add	r5,r16,fp
 2801b74:	10800054 	ori	r2,r2,1
 2801b78:	28800115 	stw	r2,4(r5)
 2801b7c:	80c00117 	ldw	r3,4(r16)
 2801b80:	0080a034 	movhi	r2,640
 2801b84:	109c0804 	addi	r2,r2,28704
 2801b88:	b009883a 	mov	r4,r22
 2801b8c:	18c0004c 	andi	r3,r3,1
 2801b90:	e0c6b03a 	or	r3,fp,r3
 2801b94:	11400215 	stw	r5,8(r2)
 2801b98:	80c00115 	stw	r3,4(r16)
 2801b9c:	28038180 	call	2803818 <__malloc_unlock>
 2801ba0:	84400204 	addi	r17,r16,8
 2801ba4:	003f2006 	br	2801828 <_realloc_r+0xd8>
 2801ba8:	98a9883a 	add	r20,r19,r2
 2801bac:	2509883a 	add	r4,r4,r20
 2801bb0:	e0800404 	addi	r2,fp,16
 2801bb4:	d9000115 	stw	r4,4(sp)
 2801bb8:	20bf7016 	blt	r4,r2,280197c <_realloc_r+0x22c>
 2801bbc:	b8c00317 	ldw	r3,12(r23)
 2801bc0:	b8800217 	ldw	r2,8(r23)
 2801bc4:	99bfff04 	addi	r6,r19,-4
 2801bc8:	01400904 	movi	r5,36
 2801bcc:	18800215 	stw	r2,8(r3)
 2801bd0:	10c00315 	stw	r3,12(r2)
 2801bd4:	bc400204 	addi	r17,r23,8
 2801bd8:	29804136 	bltu	r5,r6,2801ce0 <_realloc_r+0x590>
 2801bdc:	008004c4 	movi	r2,19
 2801be0:	9009883a 	mov	r4,r18
 2801be4:	880f883a 	mov	r7,r17
 2801be8:	11800f2e 	bgeu	r2,r6,2801c28 <_realloc_r+0x4d8>
 2801bec:	90800017 	ldw	r2,0(r18)
 2801bf0:	b9c00404 	addi	r7,r23,16
 2801bf4:	91000204 	addi	r4,r18,8
 2801bf8:	b8800215 	stw	r2,8(r23)
 2801bfc:	90c00117 	ldw	r3,4(r18)
 2801c00:	008006c4 	movi	r2,27
 2801c04:	b8c00315 	stw	r3,12(r23)
 2801c08:	1180072e 	bgeu	r2,r6,2801c28 <_realloc_r+0x4d8>
 2801c0c:	90c00217 	ldw	r3,8(r18)
 2801c10:	b9c00604 	addi	r7,r23,24
 2801c14:	91000404 	addi	r4,r18,16
 2801c18:	b8c00415 	stw	r3,16(r23)
 2801c1c:	90800317 	ldw	r2,12(r18)
 2801c20:	b8800515 	stw	r2,20(r23)
 2801c24:	31404026 	beq	r6,r5,2801d28 <_realloc_r+0x5d8>
 2801c28:	20800017 	ldw	r2,0(r4)
 2801c2c:	38800015 	stw	r2,0(r7)
 2801c30:	20c00117 	ldw	r3,4(r4)
 2801c34:	38c00115 	stw	r3,4(r7)
 2801c38:	20800217 	ldw	r2,8(r4)
 2801c3c:	38800215 	stw	r2,8(r7)
 2801c40:	d8c00117 	ldw	r3,4(sp)
 2801c44:	bf0b883a 	add	r5,r23,fp
 2801c48:	b009883a 	mov	r4,r22
 2801c4c:	1f05c83a 	sub	r2,r3,fp
 2801c50:	10800054 	ori	r2,r2,1
 2801c54:	28800115 	stw	r2,4(r5)
 2801c58:	b8c00117 	ldw	r3,4(r23)
 2801c5c:	0080a034 	movhi	r2,640
 2801c60:	109c0804 	addi	r2,r2,28704
 2801c64:	11400215 	stw	r5,8(r2)
 2801c68:	18c0004c 	andi	r3,r3,1
 2801c6c:	e0c6b03a 	or	r3,fp,r3
 2801c70:	b8c00115 	stw	r3,4(r23)
 2801c74:	28038180 	call	2803818 <__malloc_unlock>
 2801c78:	003eeb06 	br	2801828 <_realloc_r+0xd8>
 2801c7c:	20800117 	ldw	r2,4(r4)
 2801c80:	00ffff04 	movi	r3,-4
 2801c84:	800f883a 	mov	r7,r16
 2801c88:	10c4703a 	and	r2,r2,r3
 2801c8c:	98a9883a 	add	r20,r19,r2
 2801c90:	84000204 	addi	r16,r16,8
 2801c94:	003ecf06 	br	28017d4 <_realloc_r+0x84>
 2801c98:	900b883a 	mov	r5,r18
 2801c9c:	8009883a 	mov	r4,r16
 2801ca0:	28016700 	call	2801670 <memmove>
 2801ca4:	dd000017 	ldw	r20,0(sp)
 2801ca8:	b80f883a 	mov	r7,r23
 2801cac:	003ec906 	br	28017d4 <_realloc_r+0x84>
 2801cb0:	900b883a 	mov	r5,r18
 2801cb4:	8009883a 	mov	r4,r16
 2801cb8:	28016700 	call	2801670 <memmove>
 2801cbc:	b80f883a 	mov	r7,r23
 2801cc0:	003ec406 	br	28017d4 <_realloc_r+0x84>
 2801cc4:	90c00417 	ldw	r3,16(r18)
 2801cc8:	89400604 	addi	r5,r17,24
 2801ccc:	91000604 	addi	r4,r18,24
 2801cd0:	88c00415 	stw	r3,16(r17)
 2801cd4:	90800517 	ldw	r2,20(r18)
 2801cd8:	88800515 	stw	r2,20(r17)
 2801cdc:	003f6806 	br	2801a80 <_realloc_r+0x330>
 2801ce0:	900b883a 	mov	r5,r18
 2801ce4:	8809883a 	mov	r4,r17
 2801ce8:	28016700 	call	2801670 <memmove>
 2801cec:	003fd406 	br	2801c40 <_realloc_r+0x4f0>
 2801cf0:	90c00417 	ldw	r3,16(r18)
 2801cf4:	91000604 	addi	r4,r18,24
 2801cf8:	ba000804 	addi	r8,r23,32
 2801cfc:	b8c00615 	stw	r3,24(r23)
 2801d00:	90800517 	ldw	r2,20(r18)
 2801d04:	b8800715 	stw	r2,28(r23)
 2801d08:	003f1206 	br	2801954 <_realloc_r+0x204>
 2801d0c:	90c00417 	ldw	r3,16(r18)
 2801d10:	91000604 	addi	r4,r18,24
 2801d14:	ba000804 	addi	r8,r23,32
 2801d18:	b8c00615 	stw	r3,24(r23)
 2801d1c:	90800517 	ldw	r2,20(r18)
 2801d20:	b8800715 	stw	r2,28(r23)
 2801d24:	003f3206 	br	28019f0 <_realloc_r+0x2a0>
 2801d28:	90c00417 	ldw	r3,16(r18)
 2801d2c:	91000604 	addi	r4,r18,24
 2801d30:	b9c00804 	addi	r7,r23,32
 2801d34:	b8c00615 	stw	r3,24(r23)
 2801d38:	90800517 	ldw	r2,20(r18)
 2801d3c:	b8800715 	stw	r2,28(r23)
 2801d40:	003fb906 	br	2801c28 <_realloc_r+0x4d8>

02801d44 <_sbrk_r>:
 2801d44:	defffd04 	addi	sp,sp,-12
 2801d48:	dc000015 	stw	r16,0(sp)
 2801d4c:	0400a074 	movhi	r16,641
 2801d50:	8428a504 	addi	r16,r16,-23916
 2801d54:	dc400115 	stw	r17,4(sp)
 2801d58:	80000015 	stw	zero,0(r16)
 2801d5c:	2023883a 	mov	r17,r4
 2801d60:	2809883a 	mov	r4,r5
 2801d64:	dfc00215 	stw	ra,8(sp)
 2801d68:	2803a340 	call	2803a34 <sbrk>
 2801d6c:	1007883a 	mov	r3,r2
 2801d70:	00bfffc4 	movi	r2,-1
 2801d74:	18800626 	beq	r3,r2,2801d90 <_sbrk_r+0x4c>
 2801d78:	1805883a 	mov	r2,r3
 2801d7c:	dfc00217 	ldw	ra,8(sp)
 2801d80:	dc400117 	ldw	r17,4(sp)
 2801d84:	dc000017 	ldw	r16,0(sp)
 2801d88:	dec00304 	addi	sp,sp,12
 2801d8c:	f800283a 	ret
 2801d90:	80800017 	ldw	r2,0(r16)
 2801d94:	103ff826 	beq	r2,zero,2801d78 <_sbrk_r+0x34>
 2801d98:	88800015 	stw	r2,0(r17)
 2801d9c:	1805883a 	mov	r2,r3
 2801da0:	dfc00217 	ldw	ra,8(sp)
 2801da4:	dc400117 	ldw	r17,4(sp)
 2801da8:	dc000017 	ldw	r16,0(sp)
 2801dac:	dec00304 	addi	sp,sp,12
 2801db0:	f800283a 	ret

02801db4 <__swsetup_r>:
 2801db4:	0080a074 	movhi	r2,641
 2801db8:	10a1c304 	addi	r2,r2,-30964
 2801dbc:	10c00017 	ldw	r3,0(r2)
 2801dc0:	defffd04 	addi	sp,sp,-12
 2801dc4:	dc400115 	stw	r17,4(sp)
 2801dc8:	dc000015 	stw	r16,0(sp)
 2801dcc:	dfc00215 	stw	ra,8(sp)
 2801dd0:	2023883a 	mov	r17,r4
 2801dd4:	2821883a 	mov	r16,r5
 2801dd8:	18000226 	beq	r3,zero,2801de4 <__swsetup_r+0x30>
 2801ddc:	18800e17 	ldw	r2,56(r3)
 2801de0:	10001f26 	beq	r2,zero,2801e60 <__swsetup_r+0xac>
 2801de4:	8100030b 	ldhu	r4,12(r16)
 2801de8:	2080020c 	andi	r2,r4,8
 2801dec:	10002826 	beq	r2,zero,2801e90 <__swsetup_r+0xdc>
 2801df0:	81400417 	ldw	r5,16(r16)
 2801df4:	28001d26 	beq	r5,zero,2801e6c <__swsetup_r+0xb8>
 2801df8:	2080004c 	andi	r2,r4,1
 2801dfc:	1005003a 	cmpeq	r2,r2,zero
 2801e00:	10000b26 	beq	r2,zero,2801e30 <__swsetup_r+0x7c>
 2801e04:	2080008c 	andi	r2,r4,2
 2801e08:	10001226 	beq	r2,zero,2801e54 <__swsetup_r+0xa0>
 2801e0c:	0005883a 	mov	r2,zero
 2801e10:	80800215 	stw	r2,8(r16)
 2801e14:	28000b26 	beq	r5,zero,2801e44 <__swsetup_r+0x90>
 2801e18:	0005883a 	mov	r2,zero
 2801e1c:	dfc00217 	ldw	ra,8(sp)
 2801e20:	dc400117 	ldw	r17,4(sp)
 2801e24:	dc000017 	ldw	r16,0(sp)
 2801e28:	dec00304 	addi	sp,sp,12
 2801e2c:	f800283a 	ret
 2801e30:	80800517 	ldw	r2,20(r16)
 2801e34:	80000215 	stw	zero,8(r16)
 2801e38:	0085c83a 	sub	r2,zero,r2
 2801e3c:	80800615 	stw	r2,24(r16)
 2801e40:	283ff51e 	bne	r5,zero,2801e18 <__swsetup_r+0x64>
 2801e44:	2080200c 	andi	r2,r4,128
 2801e48:	103ff326 	beq	r2,zero,2801e18 <__swsetup_r+0x64>
 2801e4c:	00bfffc4 	movi	r2,-1
 2801e50:	003ff206 	br	2801e1c <__swsetup_r+0x68>
 2801e54:	80800517 	ldw	r2,20(r16)
 2801e58:	80800215 	stw	r2,8(r16)
 2801e5c:	003fed06 	br	2801e14 <__swsetup_r+0x60>
 2801e60:	1809883a 	mov	r4,r3
 2801e64:	28021880 	call	2802188 <__sinit>
 2801e68:	003fde06 	br	2801de4 <__swsetup_r+0x30>
 2801e6c:	20c0a00c 	andi	r3,r4,640
 2801e70:	00808004 	movi	r2,512
 2801e74:	18bfe026 	beq	r3,r2,2801df8 <__swsetup_r+0x44>
 2801e78:	8809883a 	mov	r4,r17
 2801e7c:	800b883a 	mov	r5,r16
 2801e80:	28029d40 	call	28029d4 <__smakebuf_r>
 2801e84:	8100030b 	ldhu	r4,12(r16)
 2801e88:	81400417 	ldw	r5,16(r16)
 2801e8c:	003fda06 	br	2801df8 <__swsetup_r+0x44>
 2801e90:	2080040c 	andi	r2,r4,16
 2801e94:	103fed26 	beq	r2,zero,2801e4c <__swsetup_r+0x98>
 2801e98:	2080010c 	andi	r2,r4,4
 2801e9c:	10001226 	beq	r2,zero,2801ee8 <__swsetup_r+0x134>
 2801ea0:	81400c17 	ldw	r5,48(r16)
 2801ea4:	28000526 	beq	r5,zero,2801ebc <__swsetup_r+0x108>
 2801ea8:	80801004 	addi	r2,r16,64
 2801eac:	28800226 	beq	r5,r2,2801eb8 <__swsetup_r+0x104>
 2801eb0:	8809883a 	mov	r4,r17
 2801eb4:	28025400 	call	2802540 <_free_r>
 2801eb8:	80000c15 	stw	zero,48(r16)
 2801ebc:	8080030b 	ldhu	r2,12(r16)
 2801ec0:	81400417 	ldw	r5,16(r16)
 2801ec4:	80000115 	stw	zero,4(r16)
 2801ec8:	10bff6cc 	andi	r2,r2,65499
 2801ecc:	8080030d 	sth	r2,12(r16)
 2801ed0:	81400015 	stw	r5,0(r16)
 2801ed4:	8080030b 	ldhu	r2,12(r16)
 2801ed8:	10800214 	ori	r2,r2,8
 2801edc:	113fffcc 	andi	r4,r2,65535
 2801ee0:	8080030d 	sth	r2,12(r16)
 2801ee4:	003fc306 	br	2801df4 <__swsetup_r+0x40>
 2801ee8:	81400417 	ldw	r5,16(r16)
 2801eec:	003ff906 	br	2801ed4 <__swsetup_r+0x120>

02801ef0 <_fflush_r>:
 2801ef0:	defffb04 	addi	sp,sp,-20
 2801ef4:	dcc00315 	stw	r19,12(sp)
 2801ef8:	dc800215 	stw	r18,8(sp)
 2801efc:	dfc00415 	stw	ra,16(sp)
 2801f00:	dc400115 	stw	r17,4(sp)
 2801f04:	dc000015 	stw	r16,0(sp)
 2801f08:	2027883a 	mov	r19,r4
 2801f0c:	2825883a 	mov	r18,r5
 2801f10:	20000226 	beq	r4,zero,2801f1c <_fflush_r+0x2c>
 2801f14:	20800e17 	ldw	r2,56(r4)
 2801f18:	10005626 	beq	r2,zero,2802074 <_fflush_r+0x184>
 2801f1c:	9100030b 	ldhu	r4,12(r18)
 2801f20:	20ffffcc 	andi	r3,r4,65535
 2801f24:	18e0001c 	xori	r3,r3,32768
 2801f28:	18e00004 	addi	r3,r3,-32768
 2801f2c:	1880020c 	andi	r2,r3,8
 2801f30:	1000261e 	bne	r2,zero,2801fcc <_fflush_r+0xdc>
 2801f34:	90c00117 	ldw	r3,4(r18)
 2801f38:	20820014 	ori	r2,r4,2048
 2801f3c:	9080030d 	sth	r2,12(r18)
 2801f40:	1009883a 	mov	r4,r2
 2801f44:	00c0400e 	bge	zero,r3,2802048 <_fflush_r+0x158>
 2801f48:	92000a17 	ldw	r8,40(r18)
 2801f4c:	40004026 	beq	r8,zero,2802050 <_fflush_r+0x160>
 2801f50:	2084000c 	andi	r2,r4,4096
 2801f54:	10005326 	beq	r2,zero,28020a4 <_fflush_r+0x1b4>
 2801f58:	94001417 	ldw	r16,80(r18)
 2801f5c:	9080030b 	ldhu	r2,12(r18)
 2801f60:	1080010c 	andi	r2,r2,4
 2801f64:	1000481e 	bne	r2,zero,2802088 <_fflush_r+0x198>
 2801f68:	91400717 	ldw	r5,28(r18)
 2801f6c:	9809883a 	mov	r4,r19
 2801f70:	800d883a 	mov	r6,r16
 2801f74:	000f883a 	mov	r7,zero
 2801f78:	403ee83a 	callr	r8
 2801f7c:	8080261e 	bne	r16,r2,2802018 <_fflush_r+0x128>
 2801f80:	9080030b 	ldhu	r2,12(r18)
 2801f84:	91000417 	ldw	r4,16(r18)
 2801f88:	90000115 	stw	zero,4(r18)
 2801f8c:	10bdffcc 	andi	r2,r2,63487
 2801f90:	10ffffcc 	andi	r3,r2,65535
 2801f94:	18c4000c 	andi	r3,r3,4096
 2801f98:	9080030d 	sth	r2,12(r18)
 2801f9c:	91000015 	stw	r4,0(r18)
 2801fa0:	18002b26 	beq	r3,zero,2802050 <_fflush_r+0x160>
 2801fa4:	0007883a 	mov	r3,zero
 2801fa8:	1805883a 	mov	r2,r3
 2801fac:	94001415 	stw	r16,80(r18)
 2801fb0:	dfc00417 	ldw	ra,16(sp)
 2801fb4:	dcc00317 	ldw	r19,12(sp)
 2801fb8:	dc800217 	ldw	r18,8(sp)
 2801fbc:	dc400117 	ldw	r17,4(sp)
 2801fc0:	dc000017 	ldw	r16,0(sp)
 2801fc4:	dec00504 	addi	sp,sp,20
 2801fc8:	f800283a 	ret
 2801fcc:	94400417 	ldw	r17,16(r18)
 2801fd0:	88001f26 	beq	r17,zero,2802050 <_fflush_r+0x160>
 2801fd4:	90800017 	ldw	r2,0(r18)
 2801fd8:	18c000cc 	andi	r3,r3,3
 2801fdc:	94400015 	stw	r17,0(r18)
 2801fe0:	1461c83a 	sub	r16,r2,r17
 2801fe4:	18002526 	beq	r3,zero,280207c <_fflush_r+0x18c>
 2801fe8:	0005883a 	mov	r2,zero
 2801fec:	90800215 	stw	r2,8(r18)
 2801ff0:	0400170e 	bge	zero,r16,2802050 <_fflush_r+0x160>
 2801ff4:	90c00917 	ldw	r3,36(r18)
 2801ff8:	91400717 	ldw	r5,28(r18)
 2801ffc:	880d883a 	mov	r6,r17
 2802000:	800f883a 	mov	r7,r16
 2802004:	9809883a 	mov	r4,r19
 2802008:	183ee83a 	callr	r3
 280200c:	88a3883a 	add	r17,r17,r2
 2802010:	80a1c83a 	sub	r16,r16,r2
 2802014:	00bff616 	blt	zero,r2,2801ff0 <_fflush_r+0x100>
 2802018:	9080030b 	ldhu	r2,12(r18)
 280201c:	00ffffc4 	movi	r3,-1
 2802020:	10801014 	ori	r2,r2,64
 2802024:	9080030d 	sth	r2,12(r18)
 2802028:	1805883a 	mov	r2,r3
 280202c:	dfc00417 	ldw	ra,16(sp)
 2802030:	dcc00317 	ldw	r19,12(sp)
 2802034:	dc800217 	ldw	r18,8(sp)
 2802038:	dc400117 	ldw	r17,4(sp)
 280203c:	dc000017 	ldw	r16,0(sp)
 2802040:	dec00504 	addi	sp,sp,20
 2802044:	f800283a 	ret
 2802048:	90800f17 	ldw	r2,60(r18)
 280204c:	00bfbe16 	blt	zero,r2,2801f48 <_fflush_r+0x58>
 2802050:	0007883a 	mov	r3,zero
 2802054:	1805883a 	mov	r2,r3
 2802058:	dfc00417 	ldw	ra,16(sp)
 280205c:	dcc00317 	ldw	r19,12(sp)
 2802060:	dc800217 	ldw	r18,8(sp)
 2802064:	dc400117 	ldw	r17,4(sp)
 2802068:	dc000017 	ldw	r16,0(sp)
 280206c:	dec00504 	addi	sp,sp,20
 2802070:	f800283a 	ret
 2802074:	28021880 	call	2802188 <__sinit>
 2802078:	003fa806 	br	2801f1c <_fflush_r+0x2c>
 280207c:	90800517 	ldw	r2,20(r18)
 2802080:	90800215 	stw	r2,8(r18)
 2802084:	003fda06 	br	2801ff0 <_fflush_r+0x100>
 2802088:	90800117 	ldw	r2,4(r18)
 280208c:	90c00c17 	ldw	r3,48(r18)
 2802090:	80a1c83a 	sub	r16,r16,r2
 2802094:	183fb426 	beq	r3,zero,2801f68 <_fflush_r+0x78>
 2802098:	90800f17 	ldw	r2,60(r18)
 280209c:	80a1c83a 	sub	r16,r16,r2
 28020a0:	003fb106 	br	2801f68 <_fflush_r+0x78>
 28020a4:	91400717 	ldw	r5,28(r18)
 28020a8:	9809883a 	mov	r4,r19
 28020ac:	000d883a 	mov	r6,zero
 28020b0:	01c00044 	movi	r7,1
 28020b4:	403ee83a 	callr	r8
 28020b8:	1021883a 	mov	r16,r2
 28020bc:	00bfffc4 	movi	r2,-1
 28020c0:	80800226 	beq	r16,r2,28020cc <_fflush_r+0x1dc>
 28020c4:	92000a17 	ldw	r8,40(r18)
 28020c8:	003fa406 	br	2801f5c <_fflush_r+0x6c>
 28020cc:	98c00017 	ldw	r3,0(r19)
 28020d0:	00800744 	movi	r2,29
 28020d4:	18bfde26 	beq	r3,r2,2802050 <_fflush_r+0x160>
 28020d8:	9080030b 	ldhu	r2,12(r18)
 28020dc:	8007883a 	mov	r3,r16
 28020e0:	10801014 	ori	r2,r2,64
 28020e4:	9080030d 	sth	r2,12(r18)
 28020e8:	003fcf06 	br	2802028 <_fflush_r+0x138>

028020ec <fflush>:
 28020ec:	0140a034 	movhi	r5,640
 28020f0:	2947bc04 	addi	r5,r5,7920
 28020f4:	2007883a 	mov	r3,r4
 28020f8:	20000526 	beq	r4,zero,2802110 <fflush+0x24>
 28020fc:	0080a074 	movhi	r2,641
 2802100:	10a1c304 	addi	r2,r2,-30964
 2802104:	11000017 	ldw	r4,0(r2)
 2802108:	180b883a 	mov	r5,r3
 280210c:	2801ef01 	jmpi	2801ef0 <_fflush_r>
 2802110:	0080a074 	movhi	r2,641
 2802114:	10a1c404 	addi	r2,r2,-30960
 2802118:	11000017 	ldw	r4,0(r2)
 280211c:	28028541 	jmpi	2802854 <_fwalk_reent>

02802120 <std>:
 2802120:	0080a034 	movhi	r2,640
 2802124:	108b0004 	addi	r2,r2,11264
 2802128:	20800b15 	stw	r2,44(r4)
 280212c:	0080a034 	movhi	r2,640
 2802130:	108b3b04 	addi	r2,r2,11500
 2802134:	20800815 	stw	r2,32(r4)
 2802138:	00c0a034 	movhi	r3,640
 280213c:	18cb1c04 	addi	r3,r3,11376
 2802140:	0080a034 	movhi	r2,640
 2802144:	108b0204 	addi	r2,r2,11272
 2802148:	2140030d 	sth	r5,12(r4)
 280214c:	2180038d 	sth	r6,14(r4)
 2802150:	20c00915 	stw	r3,36(r4)
 2802154:	20800a15 	stw	r2,40(r4)
 2802158:	20000015 	stw	zero,0(r4)
 280215c:	20000115 	stw	zero,4(r4)
 2802160:	20000215 	stw	zero,8(r4)
 2802164:	20000415 	stw	zero,16(r4)
 2802168:	20000515 	stw	zero,20(r4)
 280216c:	20000615 	stw	zero,24(r4)
 2802170:	21000715 	stw	r4,28(r4)
 2802174:	f800283a 	ret

02802178 <__sfp_lock_acquire>:
 2802178:	f800283a 	ret

0280217c <__sfp_lock_release>:
 280217c:	f800283a 	ret

02802180 <__sinit_lock_acquire>:
 2802180:	f800283a 	ret

02802184 <__sinit_lock_release>:
 2802184:	f800283a 	ret

02802188 <__sinit>:
 2802188:	20800e17 	ldw	r2,56(r4)
 280218c:	defffd04 	addi	sp,sp,-12
 2802190:	dc400115 	stw	r17,4(sp)
 2802194:	dc000015 	stw	r16,0(sp)
 2802198:	dfc00215 	stw	ra,8(sp)
 280219c:	04400044 	movi	r17,1
 28021a0:	01400104 	movi	r5,4
 28021a4:	000d883a 	mov	r6,zero
 28021a8:	2021883a 	mov	r16,r4
 28021ac:	2200bb04 	addi	r8,r4,748
 28021b0:	200f883a 	mov	r7,r4
 28021b4:	10000526 	beq	r2,zero,28021cc <__sinit+0x44>
 28021b8:	dfc00217 	ldw	ra,8(sp)
 28021bc:	dc400117 	ldw	r17,4(sp)
 28021c0:	dc000017 	ldw	r16,0(sp)
 28021c4:	dec00304 	addi	sp,sp,12
 28021c8:	f800283a 	ret
 28021cc:	21000117 	ldw	r4,4(r4)
 28021d0:	0080a034 	movhi	r2,640
 28021d4:	10889b04 	addi	r2,r2,8812
 28021d8:	00c000c4 	movi	r3,3
 28021dc:	80800f15 	stw	r2,60(r16)
 28021e0:	80c0b915 	stw	r3,740(r16)
 28021e4:	8200ba15 	stw	r8,744(r16)
 28021e8:	84400e15 	stw	r17,56(r16)
 28021ec:	8000b815 	stw	zero,736(r16)
 28021f0:	28021200 	call	2802120 <std>
 28021f4:	81000217 	ldw	r4,8(r16)
 28021f8:	880d883a 	mov	r6,r17
 28021fc:	800f883a 	mov	r7,r16
 2802200:	01400284 	movi	r5,10
 2802204:	28021200 	call	2802120 <std>
 2802208:	81000317 	ldw	r4,12(r16)
 280220c:	800f883a 	mov	r7,r16
 2802210:	01400484 	movi	r5,18
 2802214:	01800084 	movi	r6,2
 2802218:	dfc00217 	ldw	ra,8(sp)
 280221c:	dc400117 	ldw	r17,4(sp)
 2802220:	dc000017 	ldw	r16,0(sp)
 2802224:	dec00304 	addi	sp,sp,12
 2802228:	28021201 	jmpi	2802120 <std>

0280222c <__fp_lock>:
 280222c:	0005883a 	mov	r2,zero
 2802230:	f800283a 	ret

02802234 <__fp_unlock>:
 2802234:	0005883a 	mov	r2,zero
 2802238:	f800283a 	ret

0280223c <__fp_unlock_all>:
 280223c:	0080a074 	movhi	r2,641
 2802240:	10a1c304 	addi	r2,r2,-30964
 2802244:	11000017 	ldw	r4,0(r2)
 2802248:	0140a034 	movhi	r5,640
 280224c:	29488d04 	addi	r5,r5,8756
 2802250:	280291c1 	jmpi	280291c <_fwalk>

02802254 <__fp_lock_all>:
 2802254:	0080a074 	movhi	r2,641
 2802258:	10a1c304 	addi	r2,r2,-30964
 280225c:	11000017 	ldw	r4,0(r2)
 2802260:	0140a034 	movhi	r5,640
 2802264:	29488b04 	addi	r5,r5,8748
 2802268:	280291c1 	jmpi	280291c <_fwalk>

0280226c <_cleanup_r>:
 280226c:	0140a034 	movhi	r5,640
 2802270:	294bd104 	addi	r5,r5,12100
 2802274:	280291c1 	jmpi	280291c <_fwalk>

02802278 <_cleanup>:
 2802278:	0080a074 	movhi	r2,641
 280227c:	10a1c404 	addi	r2,r2,-30960
 2802280:	11000017 	ldw	r4,0(r2)
 2802284:	280226c1 	jmpi	280226c <_cleanup_r>

02802288 <__sfmoreglue>:
 2802288:	defffc04 	addi	sp,sp,-16
 280228c:	dc000015 	stw	r16,0(sp)
 2802290:	2821883a 	mov	r16,r5
 2802294:	dc400115 	stw	r17,4(sp)
 2802298:	01401704 	movi	r5,92
 280229c:	2023883a 	mov	r17,r4
 28022a0:	8009883a 	mov	r4,r16
 28022a4:	dfc00315 	stw	ra,12(sp)
 28022a8:	dcc00215 	stw	r19,8(sp)
 28022ac:	280312c0 	call	280312c <__mulsi3>
 28022b0:	11400304 	addi	r5,r2,12
 28022b4:	8809883a 	mov	r4,r17
 28022b8:	1027883a 	mov	r19,r2
 28022bc:	2800dac0 	call	2800dac <_malloc_r>
 28022c0:	10c00304 	addi	r3,r2,12
 28022c4:	1023883a 	mov	r17,r2
 28022c8:	1809883a 	mov	r4,r3
 28022cc:	980d883a 	mov	r6,r19
 28022d0:	000b883a 	mov	r5,zero
 28022d4:	10000b26 	beq	r2,zero,2802304 <__sfmoreglue+0x7c>
 28022d8:	14000115 	stw	r16,4(r2)
 28022dc:	10c00215 	stw	r3,8(r2)
 28022e0:	10000015 	stw	zero,0(r2)
 28022e4:	2802b680 	call	2802b68 <memset>
 28022e8:	8805883a 	mov	r2,r17
 28022ec:	dfc00317 	ldw	ra,12(sp)
 28022f0:	dcc00217 	ldw	r19,8(sp)
 28022f4:	dc400117 	ldw	r17,4(sp)
 28022f8:	dc000017 	ldw	r16,0(sp)
 28022fc:	dec00404 	addi	sp,sp,16
 2802300:	f800283a 	ret
 2802304:	0023883a 	mov	r17,zero
 2802308:	8805883a 	mov	r2,r17
 280230c:	dfc00317 	ldw	ra,12(sp)
 2802310:	dcc00217 	ldw	r19,8(sp)
 2802314:	dc400117 	ldw	r17,4(sp)
 2802318:	dc000017 	ldw	r16,0(sp)
 280231c:	dec00404 	addi	sp,sp,16
 2802320:	f800283a 	ret

02802324 <__sfp>:
 2802324:	defffd04 	addi	sp,sp,-12
 2802328:	0080a074 	movhi	r2,641
 280232c:	10a1c404 	addi	r2,r2,-30960
 2802330:	dc000015 	stw	r16,0(sp)
 2802334:	14000017 	ldw	r16,0(r2)
 2802338:	dc400115 	stw	r17,4(sp)
 280233c:	dfc00215 	stw	ra,8(sp)
 2802340:	80800e17 	ldw	r2,56(r16)
 2802344:	2023883a 	mov	r17,r4
 2802348:	10002626 	beq	r2,zero,28023e4 <__sfp+0xc0>
 280234c:	8400b804 	addi	r16,r16,736
 2802350:	80800117 	ldw	r2,4(r16)
 2802354:	81000217 	ldw	r4,8(r16)
 2802358:	10ffffc4 	addi	r3,r2,-1
 280235c:	18000916 	blt	r3,zero,2802384 <__sfp+0x60>
 2802360:	2080030f 	ldh	r2,12(r4)
 2802364:	10000b26 	beq	r2,zero,2802394 <__sfp+0x70>
 2802368:	017fffc4 	movi	r5,-1
 280236c:	00000206 	br	2802378 <__sfp+0x54>
 2802370:	2080030f 	ldh	r2,12(r4)
 2802374:	10000726 	beq	r2,zero,2802394 <__sfp+0x70>
 2802378:	18ffffc4 	addi	r3,r3,-1
 280237c:	21001704 	addi	r4,r4,92
 2802380:	197ffb1e 	bne	r3,r5,2802370 <__sfp+0x4c>
 2802384:	80800017 	ldw	r2,0(r16)
 2802388:	10001926 	beq	r2,zero,28023f0 <__sfp+0xcc>
 280238c:	1021883a 	mov	r16,r2
 2802390:	003fef06 	br	2802350 <__sfp+0x2c>
 2802394:	00bfffc4 	movi	r2,-1
 2802398:	00c00044 	movi	r3,1
 280239c:	2080038d 	sth	r2,14(r4)
 28023a0:	20c0030d 	sth	r3,12(r4)
 28023a4:	20000015 	stw	zero,0(r4)
 28023a8:	20000215 	stw	zero,8(r4)
 28023ac:	20000115 	stw	zero,4(r4)
 28023b0:	20000415 	stw	zero,16(r4)
 28023b4:	20000515 	stw	zero,20(r4)
 28023b8:	20000615 	stw	zero,24(r4)
 28023bc:	20000c15 	stw	zero,48(r4)
 28023c0:	20000d15 	stw	zero,52(r4)
 28023c4:	20001115 	stw	zero,68(r4)
 28023c8:	20001215 	stw	zero,72(r4)
 28023cc:	2005883a 	mov	r2,r4
 28023d0:	dfc00217 	ldw	ra,8(sp)
 28023d4:	dc400117 	ldw	r17,4(sp)
 28023d8:	dc000017 	ldw	r16,0(sp)
 28023dc:	dec00304 	addi	sp,sp,12
 28023e0:	f800283a 	ret
 28023e4:	8009883a 	mov	r4,r16
 28023e8:	28021880 	call	2802188 <__sinit>
 28023ec:	003fd706 	br	280234c <__sfp+0x28>
 28023f0:	8809883a 	mov	r4,r17
 28023f4:	01400104 	movi	r5,4
 28023f8:	28022880 	call	2802288 <__sfmoreglue>
 28023fc:	80800015 	stw	r2,0(r16)
 2802400:	103fe21e 	bne	r2,zero,280238c <__sfp+0x68>
 2802404:	00800304 	movi	r2,12
 2802408:	0009883a 	mov	r4,zero
 280240c:	88800015 	stw	r2,0(r17)
 2802410:	003fee06 	br	28023cc <__sfp+0xa8>

02802414 <_malloc_trim_r>:
 2802414:	defffb04 	addi	sp,sp,-20
 2802418:	dcc00315 	stw	r19,12(sp)
 280241c:	04c0a034 	movhi	r19,640
 2802420:	9cdc0804 	addi	r19,r19,28704
 2802424:	dc800215 	stw	r18,8(sp)
 2802428:	dc400115 	stw	r17,4(sp)
 280242c:	dc000015 	stw	r16,0(sp)
 2802430:	2823883a 	mov	r17,r5
 2802434:	2025883a 	mov	r18,r4
 2802438:	dfc00415 	stw	ra,16(sp)
 280243c:	28037f80 	call	28037f8 <__malloc_lock>
 2802440:	98800217 	ldw	r2,8(r19)
 2802444:	9009883a 	mov	r4,r18
 2802448:	000b883a 	mov	r5,zero
 280244c:	10c00117 	ldw	r3,4(r2)
 2802450:	00bfff04 	movi	r2,-4
 2802454:	18a0703a 	and	r16,r3,r2
 2802458:	8463c83a 	sub	r17,r16,r17
 280245c:	8c43fbc4 	addi	r17,r17,4079
 2802460:	8822d33a 	srli	r17,r17,12
 2802464:	0083ffc4 	movi	r2,4095
 2802468:	8c7fffc4 	addi	r17,r17,-1
 280246c:	8822933a 	slli	r17,r17,12
 2802470:	1440060e 	bge	r2,r17,280248c <_malloc_trim_r+0x78>
 2802474:	2801d440 	call	2801d44 <_sbrk_r>
 2802478:	98c00217 	ldw	r3,8(r19)
 280247c:	9009883a 	mov	r4,r18
 2802480:	044bc83a 	sub	r5,zero,r17
 2802484:	80c7883a 	add	r3,r16,r3
 2802488:	10c00926 	beq	r2,r3,28024b0 <_malloc_trim_r+0x9c>
 280248c:	28038180 	call	2803818 <__malloc_unlock>
 2802490:	0005883a 	mov	r2,zero
 2802494:	dfc00417 	ldw	ra,16(sp)
 2802498:	dcc00317 	ldw	r19,12(sp)
 280249c:	dc800217 	ldw	r18,8(sp)
 28024a0:	dc400117 	ldw	r17,4(sp)
 28024a4:	dc000017 	ldw	r16,0(sp)
 28024a8:	dec00504 	addi	sp,sp,20
 28024ac:	f800283a 	ret
 28024b0:	9009883a 	mov	r4,r18
 28024b4:	2801d440 	call	2801d44 <_sbrk_r>
 28024b8:	844dc83a 	sub	r6,r16,r17
 28024bc:	00ffffc4 	movi	r3,-1
 28024c0:	9009883a 	mov	r4,r18
 28024c4:	000b883a 	mov	r5,zero
 28024c8:	01c0a074 	movhi	r7,641
 28024cc:	39e8ae04 	addi	r7,r7,-23880
 28024d0:	31800054 	ori	r6,r6,1
 28024d4:	10c00926 	beq	r2,r3,28024fc <_malloc_trim_r+0xe8>
 28024d8:	38800017 	ldw	r2,0(r7)
 28024dc:	98c00217 	ldw	r3,8(r19)
 28024e0:	9009883a 	mov	r4,r18
 28024e4:	1445c83a 	sub	r2,r2,r17
 28024e8:	38800015 	stw	r2,0(r7)
 28024ec:	19800115 	stw	r6,4(r3)
 28024f0:	28038180 	call	2803818 <__malloc_unlock>
 28024f4:	00800044 	movi	r2,1
 28024f8:	003fe606 	br	2802494 <_malloc_trim_r+0x80>
 28024fc:	2801d440 	call	2801d44 <_sbrk_r>
 2802500:	99800217 	ldw	r6,8(r19)
 2802504:	100f883a 	mov	r7,r2
 2802508:	9009883a 	mov	r4,r18
 280250c:	1187c83a 	sub	r3,r2,r6
 2802510:	008003c4 	movi	r2,15
 2802514:	19400054 	ori	r5,r3,1
 2802518:	10ffdc0e 	bge	r2,r3,280248c <_malloc_trim_r+0x78>
 280251c:	0080a074 	movhi	r2,641
 2802520:	10a1c604 	addi	r2,r2,-30952
 2802524:	10c00017 	ldw	r3,0(r2)
 2802528:	0080a074 	movhi	r2,641
 280252c:	10a8ae04 	addi	r2,r2,-23880
 2802530:	31400115 	stw	r5,4(r6)
 2802534:	38c7c83a 	sub	r3,r7,r3
 2802538:	10c00015 	stw	r3,0(r2)
 280253c:	003fd306 	br	280248c <_malloc_trim_r+0x78>

02802540 <_free_r>:
 2802540:	defffd04 	addi	sp,sp,-12
 2802544:	dc400115 	stw	r17,4(sp)
 2802548:	dc000015 	stw	r16,0(sp)
 280254c:	dfc00215 	stw	ra,8(sp)
 2802550:	2821883a 	mov	r16,r5
 2802554:	2023883a 	mov	r17,r4
 2802558:	28005a26 	beq	r5,zero,28026c4 <_free_r+0x184>
 280255c:	28037f80 	call	28037f8 <__malloc_lock>
 2802560:	823ffe04 	addi	r8,r16,-8
 2802564:	41400117 	ldw	r5,4(r8)
 2802568:	00bfff84 	movi	r2,-2
 280256c:	0280a034 	movhi	r10,640
 2802570:	529c0804 	addi	r10,r10,28704
 2802574:	288e703a 	and	r7,r5,r2
 2802578:	41cd883a 	add	r6,r8,r7
 280257c:	30c00117 	ldw	r3,4(r6)
 2802580:	51000217 	ldw	r4,8(r10)
 2802584:	00bfff04 	movi	r2,-4
 2802588:	1892703a 	and	r9,r3,r2
 280258c:	5017883a 	mov	r11,r10
 2802590:	31006726 	beq	r6,r4,2802730 <_free_r+0x1f0>
 2802594:	2880004c 	andi	r2,r5,1
 2802598:	1005003a 	cmpeq	r2,r2,zero
 280259c:	32400115 	stw	r9,4(r6)
 28025a0:	10001a1e 	bne	r2,zero,280260c <_free_r+0xcc>
 28025a4:	000b883a 	mov	r5,zero
 28025a8:	3247883a 	add	r3,r6,r9
 28025ac:	18800117 	ldw	r2,4(r3)
 28025b0:	1080004c 	andi	r2,r2,1
 28025b4:	1000231e 	bne	r2,zero,2802644 <_free_r+0x104>
 28025b8:	280ac03a 	cmpne	r5,r5,zero
 28025bc:	3a4f883a 	add	r7,r7,r9
 28025c0:	2800451e 	bne	r5,zero,28026d8 <_free_r+0x198>
 28025c4:	31000217 	ldw	r4,8(r6)
 28025c8:	0080a034 	movhi	r2,640
 28025cc:	109c0a04 	addi	r2,r2,28712
 28025d0:	20807b26 	beq	r4,r2,28027c0 <_free_r+0x280>
 28025d4:	30800317 	ldw	r2,12(r6)
 28025d8:	3a07883a 	add	r3,r7,r8
 28025dc:	19c00015 	stw	r7,0(r3)
 28025e0:	11000215 	stw	r4,8(r2)
 28025e4:	20800315 	stw	r2,12(r4)
 28025e8:	38800054 	ori	r2,r7,1
 28025ec:	40800115 	stw	r2,4(r8)
 28025f0:	28001a26 	beq	r5,zero,280265c <_free_r+0x11c>
 28025f4:	8809883a 	mov	r4,r17
 28025f8:	dfc00217 	ldw	ra,8(sp)
 28025fc:	dc400117 	ldw	r17,4(sp)
 2802600:	dc000017 	ldw	r16,0(sp)
 2802604:	dec00304 	addi	sp,sp,12
 2802608:	28038181 	jmpi	2803818 <__malloc_unlock>
 280260c:	80bffe17 	ldw	r2,-8(r16)
 2802610:	50c00204 	addi	r3,r10,8
 2802614:	4091c83a 	sub	r8,r8,r2
 2802618:	41000217 	ldw	r4,8(r8)
 280261c:	388f883a 	add	r7,r7,r2
 2802620:	20c06126 	beq	r4,r3,28027a8 <_free_r+0x268>
 2802624:	40800317 	ldw	r2,12(r8)
 2802628:	3247883a 	add	r3,r6,r9
 280262c:	000b883a 	mov	r5,zero
 2802630:	11000215 	stw	r4,8(r2)
 2802634:	20800315 	stw	r2,12(r4)
 2802638:	18800117 	ldw	r2,4(r3)
 280263c:	1080004c 	andi	r2,r2,1
 2802640:	103fdd26 	beq	r2,zero,28025b8 <_free_r+0x78>
 2802644:	38800054 	ori	r2,r7,1
 2802648:	3a07883a 	add	r3,r7,r8
 280264c:	280ac03a 	cmpne	r5,r5,zero
 2802650:	40800115 	stw	r2,4(r8)
 2802654:	19c00015 	stw	r7,0(r3)
 2802658:	283fe61e 	bne	r5,zero,28025f4 <_free_r+0xb4>
 280265c:	00807fc4 	movi	r2,511
 2802660:	11c01f2e 	bgeu	r2,r7,28026e0 <_free_r+0x1a0>
 2802664:	3806d27a 	srli	r3,r7,9
 2802668:	1800481e 	bne	r3,zero,280278c <_free_r+0x24c>
 280266c:	3804d0fa 	srli	r2,r7,3
 2802670:	100690fa 	slli	r3,r2,3
 2802674:	1acd883a 	add	r6,r3,r11
 2802678:	31400217 	ldw	r5,8(r6)
 280267c:	31405926 	beq	r6,r5,28027e4 <_free_r+0x2a4>
 2802680:	28800117 	ldw	r2,4(r5)
 2802684:	00ffff04 	movi	r3,-4
 2802688:	10c4703a 	and	r2,r2,r3
 280268c:	3880022e 	bgeu	r7,r2,2802698 <_free_r+0x158>
 2802690:	29400217 	ldw	r5,8(r5)
 2802694:	317ffa1e 	bne	r6,r5,2802680 <_free_r+0x140>
 2802698:	29800317 	ldw	r6,12(r5)
 280269c:	41800315 	stw	r6,12(r8)
 28026a0:	41400215 	stw	r5,8(r8)
 28026a4:	8809883a 	mov	r4,r17
 28026a8:	2a000315 	stw	r8,12(r5)
 28026ac:	32000215 	stw	r8,8(r6)
 28026b0:	dfc00217 	ldw	ra,8(sp)
 28026b4:	dc400117 	ldw	r17,4(sp)
 28026b8:	dc000017 	ldw	r16,0(sp)
 28026bc:	dec00304 	addi	sp,sp,12
 28026c0:	28038181 	jmpi	2803818 <__malloc_unlock>
 28026c4:	dfc00217 	ldw	ra,8(sp)
 28026c8:	dc400117 	ldw	r17,4(sp)
 28026cc:	dc000017 	ldw	r16,0(sp)
 28026d0:	dec00304 	addi	sp,sp,12
 28026d4:	f800283a 	ret
 28026d8:	31000217 	ldw	r4,8(r6)
 28026dc:	003fbd06 	br	28025d4 <_free_r+0x94>
 28026e0:	3806d0fa 	srli	r3,r7,3
 28026e4:	00800044 	movi	r2,1
 28026e8:	51400117 	ldw	r5,4(r10)
 28026ec:	180890fa 	slli	r4,r3,3
 28026f0:	1807d0ba 	srai	r3,r3,2
 28026f4:	22c9883a 	add	r4,r4,r11
 28026f8:	21800217 	ldw	r6,8(r4)
 28026fc:	10c4983a 	sll	r2,r2,r3
 2802700:	41000315 	stw	r4,12(r8)
 2802704:	41800215 	stw	r6,8(r8)
 2802708:	288ab03a 	or	r5,r5,r2
 280270c:	22000215 	stw	r8,8(r4)
 2802710:	8809883a 	mov	r4,r17
 2802714:	51400115 	stw	r5,4(r10)
 2802718:	32000315 	stw	r8,12(r6)
 280271c:	dfc00217 	ldw	ra,8(sp)
 2802720:	dc400117 	ldw	r17,4(sp)
 2802724:	dc000017 	ldw	r16,0(sp)
 2802728:	dec00304 	addi	sp,sp,12
 280272c:	28038181 	jmpi	2803818 <__malloc_unlock>
 2802730:	2880004c 	andi	r2,r5,1
 2802734:	3a4d883a 	add	r6,r7,r9
 2802738:	1000071e 	bne	r2,zero,2802758 <_free_r+0x218>
 280273c:	80bffe17 	ldw	r2,-8(r16)
 2802740:	4091c83a 	sub	r8,r8,r2
 2802744:	41000317 	ldw	r4,12(r8)
 2802748:	40c00217 	ldw	r3,8(r8)
 280274c:	308d883a 	add	r6,r6,r2
 2802750:	20c00215 	stw	r3,8(r4)
 2802754:	19000315 	stw	r4,12(r3)
 2802758:	0080a074 	movhi	r2,641
 280275c:	10a1c504 	addi	r2,r2,-30956
 2802760:	11000017 	ldw	r4,0(r2)
 2802764:	30c00054 	ori	r3,r6,1
 2802768:	52000215 	stw	r8,8(r10)
 280276c:	40c00115 	stw	r3,4(r8)
 2802770:	313fa036 	bltu	r6,r4,28025f4 <_free_r+0xb4>
 2802774:	0080a074 	movhi	r2,641
 2802778:	10a8a204 	addi	r2,r2,-23928
 280277c:	11400017 	ldw	r5,0(r2)
 2802780:	8809883a 	mov	r4,r17
 2802784:	28024140 	call	2802414 <_malloc_trim_r>
 2802788:	003f9a06 	br	28025f4 <_free_r+0xb4>
 280278c:	00800104 	movi	r2,4
 2802790:	10c0072e 	bgeu	r2,r3,28027b0 <_free_r+0x270>
 2802794:	00800504 	movi	r2,20
 2802798:	10c01936 	bltu	r2,r3,2802800 <_free_r+0x2c0>
 280279c:	188016c4 	addi	r2,r3,91
 28027a0:	100690fa 	slli	r3,r2,3
 28027a4:	003fb306 	br	2802674 <_free_r+0x134>
 28027a8:	01400044 	movi	r5,1
 28027ac:	003f7e06 	br	28025a8 <_free_r+0x68>
 28027b0:	3804d1ba 	srli	r2,r7,6
 28027b4:	10800e04 	addi	r2,r2,56
 28027b8:	100690fa 	slli	r3,r2,3
 28027bc:	003fad06 	br	2802674 <_free_r+0x134>
 28027c0:	22000315 	stw	r8,12(r4)
 28027c4:	22000215 	stw	r8,8(r4)
 28027c8:	3a05883a 	add	r2,r7,r8
 28027cc:	38c00054 	ori	r3,r7,1
 28027d0:	11c00015 	stw	r7,0(r2)
 28027d4:	41000215 	stw	r4,8(r8)
 28027d8:	40c00115 	stw	r3,4(r8)
 28027dc:	41000315 	stw	r4,12(r8)
 28027e0:	003f8406 	br	28025f4 <_free_r+0xb4>
 28027e4:	1005d0ba 	srai	r2,r2,2
 28027e8:	00c00044 	movi	r3,1
 28027ec:	51000117 	ldw	r4,4(r10)
 28027f0:	1886983a 	sll	r3,r3,r2
 28027f4:	20c8b03a 	or	r4,r4,r3
 28027f8:	51000115 	stw	r4,4(r10)
 28027fc:	003fa706 	br	280269c <_free_r+0x15c>
 2802800:	00801504 	movi	r2,84
 2802804:	10c00436 	bltu	r2,r3,2802818 <_free_r+0x2d8>
 2802808:	3804d33a 	srli	r2,r7,12
 280280c:	10801b84 	addi	r2,r2,110
 2802810:	100690fa 	slli	r3,r2,3
 2802814:	003f9706 	br	2802674 <_free_r+0x134>
 2802818:	00805504 	movi	r2,340
 280281c:	10c00436 	bltu	r2,r3,2802830 <_free_r+0x2f0>
 2802820:	3804d3fa 	srli	r2,r7,15
 2802824:	10801dc4 	addi	r2,r2,119
 2802828:	100690fa 	slli	r3,r2,3
 280282c:	003f9106 	br	2802674 <_free_r+0x134>
 2802830:	00815504 	movi	r2,1364
 2802834:	10c0032e 	bgeu	r2,r3,2802844 <_free_r+0x304>
 2802838:	00801f84 	movi	r2,126
 280283c:	00c0fc04 	movi	r3,1008
 2802840:	003f8c06 	br	2802674 <_free_r+0x134>
 2802844:	3804d4ba 	srli	r2,r7,18
 2802848:	10801f04 	addi	r2,r2,124
 280284c:	100690fa 	slli	r3,r2,3
 2802850:	003f8806 	br	2802674 <_free_r+0x134>

02802854 <_fwalk_reent>:
 2802854:	defff704 	addi	sp,sp,-36
 2802858:	dcc00315 	stw	r19,12(sp)
 280285c:	24c0b804 	addi	r19,r4,736
 2802860:	dd800615 	stw	r22,24(sp)
 2802864:	dd400515 	stw	r21,20(sp)
 2802868:	dfc00815 	stw	ra,32(sp)
 280286c:	ddc00715 	stw	r23,28(sp)
 2802870:	dd000415 	stw	r20,16(sp)
 2802874:	dc800215 	stw	r18,8(sp)
 2802878:	dc400115 	stw	r17,4(sp)
 280287c:	dc000015 	stw	r16,0(sp)
 2802880:	202b883a 	mov	r21,r4
 2802884:	282d883a 	mov	r22,r5
 2802888:	28021780 	call	2802178 <__sfp_lock_acquire>
 280288c:	98002126 	beq	r19,zero,2802914 <_fwalk_reent+0xc0>
 2802890:	002f883a 	mov	r23,zero
 2802894:	9c800117 	ldw	r18,4(r19)
 2802898:	9c000217 	ldw	r16,8(r19)
 280289c:	90bfffc4 	addi	r2,r18,-1
 28028a0:	10000d16 	blt	r2,zero,28028d8 <_fwalk_reent+0x84>
 28028a4:	0023883a 	mov	r17,zero
 28028a8:	053fffc4 	movi	r20,-1
 28028ac:	8080030f 	ldh	r2,12(r16)
 28028b0:	8c400044 	addi	r17,r17,1
 28028b4:	10000626 	beq	r2,zero,28028d0 <_fwalk_reent+0x7c>
 28028b8:	8080038f 	ldh	r2,14(r16)
 28028bc:	800b883a 	mov	r5,r16
 28028c0:	a809883a 	mov	r4,r21
 28028c4:	15000226 	beq	r2,r20,28028d0 <_fwalk_reent+0x7c>
 28028c8:	b03ee83a 	callr	r22
 28028cc:	b8aeb03a 	or	r23,r23,r2
 28028d0:	84001704 	addi	r16,r16,92
 28028d4:	947ff51e 	bne	r18,r17,28028ac <_fwalk_reent+0x58>
 28028d8:	9cc00017 	ldw	r19,0(r19)
 28028dc:	983fed1e 	bne	r19,zero,2802894 <_fwalk_reent+0x40>
 28028e0:	280217c0 	call	280217c <__sfp_lock_release>
 28028e4:	b805883a 	mov	r2,r23
 28028e8:	dfc00817 	ldw	ra,32(sp)
 28028ec:	ddc00717 	ldw	r23,28(sp)
 28028f0:	dd800617 	ldw	r22,24(sp)
 28028f4:	dd400517 	ldw	r21,20(sp)
 28028f8:	dd000417 	ldw	r20,16(sp)
 28028fc:	dcc00317 	ldw	r19,12(sp)
 2802900:	dc800217 	ldw	r18,8(sp)
 2802904:	dc400117 	ldw	r17,4(sp)
 2802908:	dc000017 	ldw	r16,0(sp)
 280290c:	dec00904 	addi	sp,sp,36
 2802910:	f800283a 	ret
 2802914:	002f883a 	mov	r23,zero
 2802918:	003ff106 	br	28028e0 <_fwalk_reent+0x8c>

0280291c <_fwalk>:
 280291c:	defff804 	addi	sp,sp,-32
 2802920:	dcc00315 	stw	r19,12(sp)
 2802924:	24c0b804 	addi	r19,r4,736
 2802928:	dd400515 	stw	r21,20(sp)
 280292c:	dfc00715 	stw	ra,28(sp)
 2802930:	dd800615 	stw	r22,24(sp)
 2802934:	dd000415 	stw	r20,16(sp)
 2802938:	dc800215 	stw	r18,8(sp)
 280293c:	dc400115 	stw	r17,4(sp)
 2802940:	dc000015 	stw	r16,0(sp)
 2802944:	282b883a 	mov	r21,r5
 2802948:	28021780 	call	2802178 <__sfp_lock_acquire>
 280294c:	98001f26 	beq	r19,zero,28029cc <_fwalk+0xb0>
 2802950:	002d883a 	mov	r22,zero
 2802954:	9c800117 	ldw	r18,4(r19)
 2802958:	9c000217 	ldw	r16,8(r19)
 280295c:	90bfffc4 	addi	r2,r18,-1
 2802960:	10000c16 	blt	r2,zero,2802994 <_fwalk+0x78>
 2802964:	0023883a 	mov	r17,zero
 2802968:	053fffc4 	movi	r20,-1
 280296c:	8080030f 	ldh	r2,12(r16)
 2802970:	8c400044 	addi	r17,r17,1
 2802974:	10000526 	beq	r2,zero,280298c <_fwalk+0x70>
 2802978:	8080038f 	ldh	r2,14(r16)
 280297c:	8009883a 	mov	r4,r16
 2802980:	15000226 	beq	r2,r20,280298c <_fwalk+0x70>
 2802984:	a83ee83a 	callr	r21
 2802988:	b0acb03a 	or	r22,r22,r2
 280298c:	84001704 	addi	r16,r16,92
 2802990:	947ff61e 	bne	r18,r17,280296c <_fwalk+0x50>
 2802994:	9cc00017 	ldw	r19,0(r19)
 2802998:	983fee1e 	bne	r19,zero,2802954 <_fwalk+0x38>
 280299c:	280217c0 	call	280217c <__sfp_lock_release>
 28029a0:	b005883a 	mov	r2,r22
 28029a4:	dfc00717 	ldw	ra,28(sp)
 28029a8:	dd800617 	ldw	r22,24(sp)
 28029ac:	dd400517 	ldw	r21,20(sp)
 28029b0:	dd000417 	ldw	r20,16(sp)
 28029b4:	dcc00317 	ldw	r19,12(sp)
 28029b8:	dc800217 	ldw	r18,8(sp)
 28029bc:	dc400117 	ldw	r17,4(sp)
 28029c0:	dc000017 	ldw	r16,0(sp)
 28029c4:	dec00804 	addi	sp,sp,32
 28029c8:	f800283a 	ret
 28029cc:	002d883a 	mov	r22,zero
 28029d0:	003ff206 	br	280299c <_fwalk+0x80>

028029d4 <__smakebuf_r>:
 28029d4:	2880030b 	ldhu	r2,12(r5)
 28029d8:	deffed04 	addi	sp,sp,-76
 28029dc:	dc401015 	stw	r17,64(sp)
 28029e0:	1080008c 	andi	r2,r2,2
 28029e4:	dc000f15 	stw	r16,60(sp)
 28029e8:	dfc01215 	stw	ra,72(sp)
 28029ec:	dc801115 	stw	r18,68(sp)
 28029f0:	2821883a 	mov	r16,r5
 28029f4:	2023883a 	mov	r17,r4
 28029f8:	10000b26 	beq	r2,zero,2802a28 <__smakebuf_r+0x54>
 28029fc:	28c010c4 	addi	r3,r5,67
 2802a00:	00800044 	movi	r2,1
 2802a04:	28800515 	stw	r2,20(r5)
 2802a08:	28c00415 	stw	r3,16(r5)
 2802a0c:	28c00015 	stw	r3,0(r5)
 2802a10:	dfc01217 	ldw	ra,72(sp)
 2802a14:	dc801117 	ldw	r18,68(sp)
 2802a18:	dc401017 	ldw	r17,64(sp)
 2802a1c:	dc000f17 	ldw	r16,60(sp)
 2802a20:	dec01304 	addi	sp,sp,76
 2802a24:	f800283a 	ret
 2802a28:	2940038f 	ldh	r5,14(r5)
 2802a2c:	28002116 	blt	r5,zero,2802ab4 <__smakebuf_r+0xe0>
 2802a30:	d80d883a 	mov	r6,sp
 2802a34:	2802f580 	call	2802f58 <_fstat_r>
 2802a38:	10001e16 	blt	r2,zero,2802ab4 <__smakebuf_r+0xe0>
 2802a3c:	d8800117 	ldw	r2,4(sp)
 2802a40:	00e00014 	movui	r3,32768
 2802a44:	113c000c 	andi	r4,r2,61440
 2802a48:	20c03126 	beq	r4,r3,2802b10 <__smakebuf_r+0x13c>
 2802a4c:	8080030b 	ldhu	r2,12(r16)
 2802a50:	00c80004 	movi	r3,8192
 2802a54:	10820014 	ori	r2,r2,2048
 2802a58:	8080030d 	sth	r2,12(r16)
 2802a5c:	20c01e26 	beq	r4,r3,2802ad8 <__smakebuf_r+0x104>
 2802a60:	04810004 	movi	r18,1024
 2802a64:	8809883a 	mov	r4,r17
 2802a68:	900b883a 	mov	r5,r18
 2802a6c:	2800dac0 	call	2800dac <_malloc_r>
 2802a70:	1009883a 	mov	r4,r2
 2802a74:	10003126 	beq	r2,zero,2802b3c <__smakebuf_r+0x168>
 2802a78:	80c0030b 	ldhu	r3,12(r16)
 2802a7c:	0080a034 	movhi	r2,640
 2802a80:	10889b04 	addi	r2,r2,8812
 2802a84:	88800f15 	stw	r2,60(r17)
 2802a88:	18c02014 	ori	r3,r3,128
 2802a8c:	84800515 	stw	r18,20(r16)
 2802a90:	80c0030d 	sth	r3,12(r16)
 2802a94:	81000415 	stw	r4,16(r16)
 2802a98:	81000015 	stw	r4,0(r16)
 2802a9c:	dfc01217 	ldw	ra,72(sp)
 2802aa0:	dc801117 	ldw	r18,68(sp)
 2802aa4:	dc401017 	ldw	r17,64(sp)
 2802aa8:	dc000f17 	ldw	r16,60(sp)
 2802aac:	dec01304 	addi	sp,sp,76
 2802ab0:	f800283a 	ret
 2802ab4:	80c0030b 	ldhu	r3,12(r16)
 2802ab8:	1880200c 	andi	r2,r3,128
 2802abc:	10000426 	beq	r2,zero,2802ad0 <__smakebuf_r+0xfc>
 2802ac0:	04801004 	movi	r18,64
 2802ac4:	18820014 	ori	r2,r3,2048
 2802ac8:	8080030d 	sth	r2,12(r16)
 2802acc:	003fe506 	br	2802a64 <__smakebuf_r+0x90>
 2802ad0:	04810004 	movi	r18,1024
 2802ad4:	003ffb06 	br	2802ac4 <__smakebuf_r+0xf0>
 2802ad8:	8140038f 	ldh	r5,14(r16)
 2802adc:	8809883a 	mov	r4,r17
 2802ae0:	2802fcc0 	call	2802fcc <_isatty_r>
 2802ae4:	103fde26 	beq	r2,zero,2802a60 <__smakebuf_r+0x8c>
 2802ae8:	8080030b 	ldhu	r2,12(r16)
 2802aec:	80c010c4 	addi	r3,r16,67
 2802af0:	04810004 	movi	r18,1024
 2802af4:	10800054 	ori	r2,r2,1
 2802af8:	8080030d 	sth	r2,12(r16)
 2802afc:	00800044 	movi	r2,1
 2802b00:	80c00415 	stw	r3,16(r16)
 2802b04:	80800515 	stw	r2,20(r16)
 2802b08:	80c00015 	stw	r3,0(r16)
 2802b0c:	003fd506 	br	2802a64 <__smakebuf_r+0x90>
 2802b10:	80c00a17 	ldw	r3,40(r16)
 2802b14:	0080a034 	movhi	r2,640
 2802b18:	108b0204 	addi	r2,r2,11272
 2802b1c:	18bfcb1e 	bne	r3,r2,2802a4c <__smakebuf_r+0x78>
 2802b20:	8080030b 	ldhu	r2,12(r16)
 2802b24:	00c10004 	movi	r3,1024
 2802b28:	1825883a 	mov	r18,r3
 2802b2c:	10c4b03a 	or	r2,r2,r3
 2802b30:	8080030d 	sth	r2,12(r16)
 2802b34:	80c01315 	stw	r3,76(r16)
 2802b38:	003fca06 	br	2802a64 <__smakebuf_r+0x90>
 2802b3c:	8100030b 	ldhu	r4,12(r16)
 2802b40:	2080800c 	andi	r2,r4,512
 2802b44:	103fb21e 	bne	r2,zero,2802a10 <__smakebuf_r+0x3c>
 2802b48:	80c010c4 	addi	r3,r16,67
 2802b4c:	21000094 	ori	r4,r4,2
 2802b50:	00800044 	movi	r2,1
 2802b54:	80800515 	stw	r2,20(r16)
 2802b58:	8100030d 	sth	r4,12(r16)
 2802b5c:	80c00415 	stw	r3,16(r16)
 2802b60:	80c00015 	stw	r3,0(r16)
 2802b64:	003faa06 	br	2802a10 <__smakebuf_r+0x3c>

02802b68 <memset>:
 2802b68:	008000c4 	movi	r2,3
 2802b6c:	29403fcc 	andi	r5,r5,255
 2802b70:	2007883a 	mov	r3,r4
 2802b74:	1180022e 	bgeu	r2,r6,2802b80 <memset+0x18>
 2802b78:	2084703a 	and	r2,r4,r2
 2802b7c:	10000826 	beq	r2,zero,2802ba0 <memset+0x38>
 2802b80:	30000526 	beq	r6,zero,2802b98 <memset+0x30>
 2802b84:	2805883a 	mov	r2,r5
 2802b88:	30cd883a 	add	r6,r6,r3
 2802b8c:	18800005 	stb	r2,0(r3)
 2802b90:	18c00044 	addi	r3,r3,1
 2802b94:	19bffd1e 	bne	r3,r6,2802b8c <memset+0x24>
 2802b98:	2005883a 	mov	r2,r4
 2802b9c:	f800283a 	ret
 2802ba0:	2804923a 	slli	r2,r5,8
 2802ba4:	020003c4 	movi	r8,15
 2802ba8:	200f883a 	mov	r7,r4
 2802bac:	2884b03a 	or	r2,r5,r2
 2802bb0:	1006943a 	slli	r3,r2,16
 2802bb4:	10c6b03a 	or	r3,r2,r3
 2802bb8:	41800a2e 	bgeu	r8,r6,2802be4 <memset+0x7c>
 2802bbc:	4005883a 	mov	r2,r8
 2802bc0:	31bffc04 	addi	r6,r6,-16
 2802bc4:	38c00015 	stw	r3,0(r7)
 2802bc8:	38c00115 	stw	r3,4(r7)
 2802bcc:	38c00215 	stw	r3,8(r7)
 2802bd0:	38c00315 	stw	r3,12(r7)
 2802bd4:	39c00404 	addi	r7,r7,16
 2802bd8:	11bff936 	bltu	r2,r6,2802bc0 <memset+0x58>
 2802bdc:	008000c4 	movi	r2,3
 2802be0:	1180052e 	bgeu	r2,r6,2802bf8 <memset+0x90>
 2802be4:	31bfff04 	addi	r6,r6,-4
 2802be8:	008000c4 	movi	r2,3
 2802bec:	38c00015 	stw	r3,0(r7)
 2802bf0:	39c00104 	addi	r7,r7,4
 2802bf4:	11bffb36 	bltu	r2,r6,2802be4 <memset+0x7c>
 2802bf8:	3807883a 	mov	r3,r7
 2802bfc:	003fe006 	br	2802b80 <memset+0x18>

02802c00 <__sclose>:
 2802c00:	2940038f 	ldh	r5,14(r5)
 2802c04:	2802dc41 	jmpi	2802dc4 <_close_r>

02802c08 <__sseek>:
 2802c08:	defffe04 	addi	sp,sp,-8
 2802c0c:	dc000015 	stw	r16,0(sp)
 2802c10:	2821883a 	mov	r16,r5
 2802c14:	2940038f 	ldh	r5,14(r5)
 2802c18:	dfc00115 	stw	ra,4(sp)
 2802c1c:	280303c0 	call	280303c <_lseek_r>
 2802c20:	1007883a 	mov	r3,r2
 2802c24:	00bfffc4 	movi	r2,-1
 2802c28:	18800926 	beq	r3,r2,2802c50 <__sseek+0x48>
 2802c2c:	8080030b 	ldhu	r2,12(r16)
 2802c30:	80c01415 	stw	r3,80(r16)
 2802c34:	10840014 	ori	r2,r2,4096
 2802c38:	8080030d 	sth	r2,12(r16)
 2802c3c:	1805883a 	mov	r2,r3
 2802c40:	dfc00117 	ldw	ra,4(sp)
 2802c44:	dc000017 	ldw	r16,0(sp)
 2802c48:	dec00204 	addi	sp,sp,8
 2802c4c:	f800283a 	ret
 2802c50:	8080030b 	ldhu	r2,12(r16)
 2802c54:	10bbffcc 	andi	r2,r2,61439
 2802c58:	8080030d 	sth	r2,12(r16)
 2802c5c:	1805883a 	mov	r2,r3
 2802c60:	dfc00117 	ldw	ra,4(sp)
 2802c64:	dc000017 	ldw	r16,0(sp)
 2802c68:	dec00204 	addi	sp,sp,8
 2802c6c:	f800283a 	ret

02802c70 <__swrite>:
 2802c70:	2880030b 	ldhu	r2,12(r5)
 2802c74:	defffb04 	addi	sp,sp,-20
 2802c78:	dcc00315 	stw	r19,12(sp)
 2802c7c:	1080400c 	andi	r2,r2,256
 2802c80:	dc800215 	stw	r18,8(sp)
 2802c84:	dc400115 	stw	r17,4(sp)
 2802c88:	dc000015 	stw	r16,0(sp)
 2802c8c:	3027883a 	mov	r19,r6
 2802c90:	3825883a 	mov	r18,r7
 2802c94:	dfc00415 	stw	ra,16(sp)
 2802c98:	2821883a 	mov	r16,r5
 2802c9c:	000d883a 	mov	r6,zero
 2802ca0:	01c00084 	movi	r7,2
 2802ca4:	2023883a 	mov	r17,r4
 2802ca8:	10000226 	beq	r2,zero,2802cb4 <__swrite+0x44>
 2802cac:	2940038f 	ldh	r5,14(r5)
 2802cb0:	280303c0 	call	280303c <_lseek_r>
 2802cb4:	8080030b 	ldhu	r2,12(r16)
 2802cb8:	8140038f 	ldh	r5,14(r16)
 2802cbc:	8809883a 	mov	r4,r17
 2802cc0:	10bbffcc 	andi	r2,r2,61439
 2802cc4:	980d883a 	mov	r6,r19
 2802cc8:	900f883a 	mov	r7,r18
 2802ccc:	8080030d 	sth	r2,12(r16)
 2802cd0:	dfc00417 	ldw	ra,16(sp)
 2802cd4:	dcc00317 	ldw	r19,12(sp)
 2802cd8:	dc800217 	ldw	r18,8(sp)
 2802cdc:	dc400117 	ldw	r17,4(sp)
 2802ce0:	dc000017 	ldw	r16,0(sp)
 2802ce4:	dec00504 	addi	sp,sp,20
 2802ce8:	2802d4c1 	jmpi	2802d4c <_write_r>

02802cec <__sread>:
 2802cec:	defffe04 	addi	sp,sp,-8
 2802cf0:	dc000015 	stw	r16,0(sp)
 2802cf4:	2821883a 	mov	r16,r5
 2802cf8:	2940038f 	ldh	r5,14(r5)
 2802cfc:	dfc00115 	stw	ra,4(sp)
 2802d00:	28030b40 	call	28030b4 <_read_r>
 2802d04:	1007883a 	mov	r3,r2
 2802d08:	10000816 	blt	r2,zero,2802d2c <__sread+0x40>
 2802d0c:	80801417 	ldw	r2,80(r16)
 2802d10:	10c5883a 	add	r2,r2,r3
 2802d14:	80801415 	stw	r2,80(r16)
 2802d18:	1805883a 	mov	r2,r3
 2802d1c:	dfc00117 	ldw	ra,4(sp)
 2802d20:	dc000017 	ldw	r16,0(sp)
 2802d24:	dec00204 	addi	sp,sp,8
 2802d28:	f800283a 	ret
 2802d2c:	8080030b 	ldhu	r2,12(r16)
 2802d30:	10bbffcc 	andi	r2,r2,61439
 2802d34:	8080030d 	sth	r2,12(r16)
 2802d38:	1805883a 	mov	r2,r3
 2802d3c:	dfc00117 	ldw	ra,4(sp)
 2802d40:	dc000017 	ldw	r16,0(sp)
 2802d44:	dec00204 	addi	sp,sp,8
 2802d48:	f800283a 	ret

02802d4c <_write_r>:
 2802d4c:	defffd04 	addi	sp,sp,-12
 2802d50:	dc000015 	stw	r16,0(sp)
 2802d54:	0400a074 	movhi	r16,641
 2802d58:	8428a504 	addi	r16,r16,-23916
 2802d5c:	dc400115 	stw	r17,4(sp)
 2802d60:	80000015 	stw	zero,0(r16)
 2802d64:	2023883a 	mov	r17,r4
 2802d68:	2809883a 	mov	r4,r5
 2802d6c:	300b883a 	mov	r5,r6
 2802d70:	380d883a 	mov	r6,r7
 2802d74:	dfc00215 	stw	ra,8(sp)
 2802d78:	2803b200 	call	2803b20 <write>
 2802d7c:	1007883a 	mov	r3,r2
 2802d80:	00bfffc4 	movi	r2,-1
 2802d84:	18800626 	beq	r3,r2,2802da0 <_write_r+0x54>
 2802d88:	1805883a 	mov	r2,r3
 2802d8c:	dfc00217 	ldw	ra,8(sp)
 2802d90:	dc400117 	ldw	r17,4(sp)
 2802d94:	dc000017 	ldw	r16,0(sp)
 2802d98:	dec00304 	addi	sp,sp,12
 2802d9c:	f800283a 	ret
 2802da0:	80800017 	ldw	r2,0(r16)
 2802da4:	103ff826 	beq	r2,zero,2802d88 <_write_r+0x3c>
 2802da8:	88800015 	stw	r2,0(r17)
 2802dac:	1805883a 	mov	r2,r3
 2802db0:	dfc00217 	ldw	ra,8(sp)
 2802db4:	dc400117 	ldw	r17,4(sp)
 2802db8:	dc000017 	ldw	r16,0(sp)
 2802dbc:	dec00304 	addi	sp,sp,12
 2802dc0:	f800283a 	ret

02802dc4 <_close_r>:
 2802dc4:	defffd04 	addi	sp,sp,-12
 2802dc8:	dc000015 	stw	r16,0(sp)
 2802dcc:	0400a074 	movhi	r16,641
 2802dd0:	8428a504 	addi	r16,r16,-23916
 2802dd4:	dc400115 	stw	r17,4(sp)
 2802dd8:	80000015 	stw	zero,0(r16)
 2802ddc:	2023883a 	mov	r17,r4
 2802de0:	2809883a 	mov	r4,r5
 2802de4:	dfc00215 	stw	ra,8(sp)
 2802de8:	28031640 	call	2803164 <close>
 2802dec:	1007883a 	mov	r3,r2
 2802df0:	00bfffc4 	movi	r2,-1
 2802df4:	18800626 	beq	r3,r2,2802e10 <_close_r+0x4c>
 2802df8:	1805883a 	mov	r2,r3
 2802dfc:	dfc00217 	ldw	ra,8(sp)
 2802e00:	dc400117 	ldw	r17,4(sp)
 2802e04:	dc000017 	ldw	r16,0(sp)
 2802e08:	dec00304 	addi	sp,sp,12
 2802e0c:	f800283a 	ret
 2802e10:	80800017 	ldw	r2,0(r16)
 2802e14:	103ff826 	beq	r2,zero,2802df8 <_close_r+0x34>
 2802e18:	88800015 	stw	r2,0(r17)
 2802e1c:	1805883a 	mov	r2,r3
 2802e20:	dfc00217 	ldw	ra,8(sp)
 2802e24:	dc400117 	ldw	r17,4(sp)
 2802e28:	dc000017 	ldw	r16,0(sp)
 2802e2c:	dec00304 	addi	sp,sp,12
 2802e30:	f800283a 	ret

02802e34 <_fclose_r>:
 2802e34:	defffc04 	addi	sp,sp,-16
 2802e38:	dc400115 	stw	r17,4(sp)
 2802e3c:	dc000015 	stw	r16,0(sp)
 2802e40:	dfc00315 	stw	ra,12(sp)
 2802e44:	dc800215 	stw	r18,8(sp)
 2802e48:	2821883a 	mov	r16,r5
 2802e4c:	2023883a 	mov	r17,r4
 2802e50:	28002926 	beq	r5,zero,2802ef8 <_fclose_r+0xc4>
 2802e54:	28021780 	call	2802178 <__sfp_lock_acquire>
 2802e58:	88000226 	beq	r17,zero,2802e64 <_fclose_r+0x30>
 2802e5c:	88800e17 	ldw	r2,56(r17)
 2802e60:	10002d26 	beq	r2,zero,2802f18 <_fclose_r+0xe4>
 2802e64:	8080030f 	ldh	r2,12(r16)
 2802e68:	10002226 	beq	r2,zero,2802ef4 <_fclose_r+0xc0>
 2802e6c:	8809883a 	mov	r4,r17
 2802e70:	800b883a 	mov	r5,r16
 2802e74:	2801ef00 	call	2801ef0 <_fflush_r>
 2802e78:	1025883a 	mov	r18,r2
 2802e7c:	80800b17 	ldw	r2,44(r16)
 2802e80:	10000426 	beq	r2,zero,2802e94 <_fclose_r+0x60>
 2802e84:	81400717 	ldw	r5,28(r16)
 2802e88:	8809883a 	mov	r4,r17
 2802e8c:	103ee83a 	callr	r2
 2802e90:	10002a16 	blt	r2,zero,2802f3c <_fclose_r+0x108>
 2802e94:	8080030b 	ldhu	r2,12(r16)
 2802e98:	1080200c 	andi	r2,r2,128
 2802e9c:	1000231e 	bne	r2,zero,2802f2c <_fclose_r+0xf8>
 2802ea0:	81400c17 	ldw	r5,48(r16)
 2802ea4:	28000526 	beq	r5,zero,2802ebc <_fclose_r+0x88>
 2802ea8:	80801004 	addi	r2,r16,64
 2802eac:	28800226 	beq	r5,r2,2802eb8 <_fclose_r+0x84>
 2802eb0:	8809883a 	mov	r4,r17
 2802eb4:	28025400 	call	2802540 <_free_r>
 2802eb8:	80000c15 	stw	zero,48(r16)
 2802ebc:	81401117 	ldw	r5,68(r16)
 2802ec0:	28000326 	beq	r5,zero,2802ed0 <_fclose_r+0x9c>
 2802ec4:	8809883a 	mov	r4,r17
 2802ec8:	28025400 	call	2802540 <_free_r>
 2802ecc:	80001115 	stw	zero,68(r16)
 2802ed0:	8000030d 	sth	zero,12(r16)
 2802ed4:	280217c0 	call	280217c <__sfp_lock_release>
 2802ed8:	9005883a 	mov	r2,r18
 2802edc:	dfc00317 	ldw	ra,12(sp)
 2802ee0:	dc800217 	ldw	r18,8(sp)
 2802ee4:	dc400117 	ldw	r17,4(sp)
 2802ee8:	dc000017 	ldw	r16,0(sp)
 2802eec:	dec00404 	addi	sp,sp,16
 2802ef0:	f800283a 	ret
 2802ef4:	280217c0 	call	280217c <__sfp_lock_release>
 2802ef8:	0025883a 	mov	r18,zero
 2802efc:	9005883a 	mov	r2,r18
 2802f00:	dfc00317 	ldw	ra,12(sp)
 2802f04:	dc800217 	ldw	r18,8(sp)
 2802f08:	dc400117 	ldw	r17,4(sp)
 2802f0c:	dc000017 	ldw	r16,0(sp)
 2802f10:	dec00404 	addi	sp,sp,16
 2802f14:	f800283a 	ret
 2802f18:	8809883a 	mov	r4,r17
 2802f1c:	28021880 	call	2802188 <__sinit>
 2802f20:	8080030f 	ldh	r2,12(r16)
 2802f24:	103fd11e 	bne	r2,zero,2802e6c <_fclose_r+0x38>
 2802f28:	003ff206 	br	2802ef4 <_fclose_r+0xc0>
 2802f2c:	81400417 	ldw	r5,16(r16)
 2802f30:	8809883a 	mov	r4,r17
 2802f34:	28025400 	call	2802540 <_free_r>
 2802f38:	003fd906 	br	2802ea0 <_fclose_r+0x6c>
 2802f3c:	04bfffc4 	movi	r18,-1
 2802f40:	003fd406 	br	2802e94 <_fclose_r+0x60>

02802f44 <fclose>:
 2802f44:	0080a074 	movhi	r2,641
 2802f48:	10a1c304 	addi	r2,r2,-30964
 2802f4c:	200b883a 	mov	r5,r4
 2802f50:	11000017 	ldw	r4,0(r2)
 2802f54:	2802e341 	jmpi	2802e34 <_fclose_r>

02802f58 <_fstat_r>:
 2802f58:	defffd04 	addi	sp,sp,-12
 2802f5c:	dc000015 	stw	r16,0(sp)
 2802f60:	0400a074 	movhi	r16,641
 2802f64:	8428a504 	addi	r16,r16,-23916
 2802f68:	dc400115 	stw	r17,4(sp)
 2802f6c:	80000015 	stw	zero,0(r16)
 2802f70:	2023883a 	mov	r17,r4
 2802f74:	2809883a 	mov	r4,r5
 2802f78:	300b883a 	mov	r5,r6
 2802f7c:	dfc00215 	stw	ra,8(sp)
 2802f80:	28032f00 	call	28032f0 <fstat>
 2802f84:	1007883a 	mov	r3,r2
 2802f88:	00bfffc4 	movi	r2,-1
 2802f8c:	18800626 	beq	r3,r2,2802fa8 <_fstat_r+0x50>
 2802f90:	1805883a 	mov	r2,r3
 2802f94:	dfc00217 	ldw	ra,8(sp)
 2802f98:	dc400117 	ldw	r17,4(sp)
 2802f9c:	dc000017 	ldw	r16,0(sp)
 2802fa0:	dec00304 	addi	sp,sp,12
 2802fa4:	f800283a 	ret
 2802fa8:	80800017 	ldw	r2,0(r16)
 2802fac:	103ff826 	beq	r2,zero,2802f90 <_fstat_r+0x38>
 2802fb0:	88800015 	stw	r2,0(r17)
 2802fb4:	1805883a 	mov	r2,r3
 2802fb8:	dfc00217 	ldw	ra,8(sp)
 2802fbc:	dc400117 	ldw	r17,4(sp)
 2802fc0:	dc000017 	ldw	r16,0(sp)
 2802fc4:	dec00304 	addi	sp,sp,12
 2802fc8:	f800283a 	ret

02802fcc <_isatty_r>:
 2802fcc:	defffd04 	addi	sp,sp,-12
 2802fd0:	dc000015 	stw	r16,0(sp)
 2802fd4:	0400a074 	movhi	r16,641
 2802fd8:	8428a504 	addi	r16,r16,-23916
 2802fdc:	dc400115 	stw	r17,4(sp)
 2802fe0:	80000015 	stw	zero,0(r16)
 2802fe4:	2023883a 	mov	r17,r4
 2802fe8:	2809883a 	mov	r4,r5
 2802fec:	dfc00215 	stw	ra,8(sp)
 2802ff0:	28034280 	call	2803428 <isatty>
 2802ff4:	1007883a 	mov	r3,r2
 2802ff8:	00bfffc4 	movi	r2,-1
 2802ffc:	18800626 	beq	r3,r2,2803018 <_isatty_r+0x4c>
 2803000:	1805883a 	mov	r2,r3
 2803004:	dfc00217 	ldw	ra,8(sp)
 2803008:	dc400117 	ldw	r17,4(sp)
 280300c:	dc000017 	ldw	r16,0(sp)
 2803010:	dec00304 	addi	sp,sp,12
 2803014:	f800283a 	ret
 2803018:	80800017 	ldw	r2,0(r16)
 280301c:	103ff826 	beq	r2,zero,2803000 <_isatty_r+0x34>
 2803020:	88800015 	stw	r2,0(r17)
 2803024:	1805883a 	mov	r2,r3
 2803028:	dfc00217 	ldw	ra,8(sp)
 280302c:	dc400117 	ldw	r17,4(sp)
 2803030:	dc000017 	ldw	r16,0(sp)
 2803034:	dec00304 	addi	sp,sp,12
 2803038:	f800283a 	ret

0280303c <_lseek_r>:
 280303c:	defffd04 	addi	sp,sp,-12
 2803040:	dc000015 	stw	r16,0(sp)
 2803044:	0400a074 	movhi	r16,641
 2803048:	8428a504 	addi	r16,r16,-23916
 280304c:	dc400115 	stw	r17,4(sp)
 2803050:	80000015 	stw	zero,0(r16)
 2803054:	2023883a 	mov	r17,r4
 2803058:	2809883a 	mov	r4,r5
 280305c:	300b883a 	mov	r5,r6
 2803060:	380d883a 	mov	r6,r7
 2803064:	dfc00215 	stw	ra,8(sp)
 2803068:	28036380 	call	2803638 <lseek>
 280306c:	1007883a 	mov	r3,r2
 2803070:	00bfffc4 	movi	r2,-1
 2803074:	18800626 	beq	r3,r2,2803090 <_lseek_r+0x54>
 2803078:	1805883a 	mov	r2,r3
 280307c:	dfc00217 	ldw	ra,8(sp)
 2803080:	dc400117 	ldw	r17,4(sp)
 2803084:	dc000017 	ldw	r16,0(sp)
 2803088:	dec00304 	addi	sp,sp,12
 280308c:	f800283a 	ret
 2803090:	80800017 	ldw	r2,0(r16)
 2803094:	103ff826 	beq	r2,zero,2803078 <_lseek_r+0x3c>
 2803098:	88800015 	stw	r2,0(r17)
 280309c:	1805883a 	mov	r2,r3
 28030a0:	dfc00217 	ldw	ra,8(sp)
 28030a4:	dc400117 	ldw	r17,4(sp)
 28030a8:	dc000017 	ldw	r16,0(sp)
 28030ac:	dec00304 	addi	sp,sp,12
 28030b0:	f800283a 	ret

028030b4 <_read_r>:
 28030b4:	defffd04 	addi	sp,sp,-12
 28030b8:	dc000015 	stw	r16,0(sp)
 28030bc:	0400a074 	movhi	r16,641
 28030c0:	8428a504 	addi	r16,r16,-23916
 28030c4:	dc400115 	stw	r17,4(sp)
 28030c8:	80000015 	stw	zero,0(r16)
 28030cc:	2023883a 	mov	r17,r4
 28030d0:	2809883a 	mov	r4,r5
 28030d4:	300b883a 	mov	r5,r6
 28030d8:	380d883a 	mov	r6,r7
 28030dc:	dfc00215 	stw	ra,8(sp)
 28030e0:	28038380 	call	2803838 <read>
 28030e4:	1007883a 	mov	r3,r2
 28030e8:	00bfffc4 	movi	r2,-1
 28030ec:	18800626 	beq	r3,r2,2803108 <_read_r+0x54>
 28030f0:	1805883a 	mov	r2,r3
 28030f4:	dfc00217 	ldw	ra,8(sp)
 28030f8:	dc400117 	ldw	r17,4(sp)
 28030fc:	dc000017 	ldw	r16,0(sp)
 2803100:	dec00304 	addi	sp,sp,12
 2803104:	f800283a 	ret
 2803108:	80800017 	ldw	r2,0(r16)
 280310c:	103ff826 	beq	r2,zero,28030f0 <_read_r+0x3c>
 2803110:	88800015 	stw	r2,0(r17)
 2803114:	1805883a 	mov	r2,r3
 2803118:	dfc00217 	ldw	ra,8(sp)
 280311c:	dc400117 	ldw	r17,4(sp)
 2803120:	dc000017 	ldw	r16,0(sp)
 2803124:	dec00304 	addi	sp,sp,12
 2803128:	f800283a 	ret

0280312c <__mulsi3>:
 280312c:	20000a26 	beq	r4,zero,2803158 <__mulsi3+0x2c>
 2803130:	0007883a 	mov	r3,zero
 2803134:	2080004c 	andi	r2,r4,1
 2803138:	1005003a 	cmpeq	r2,r2,zero
 280313c:	2008d07a 	srli	r4,r4,1
 2803140:	1000011e 	bne	r2,zero,2803148 <__mulsi3+0x1c>
 2803144:	1947883a 	add	r3,r3,r5
 2803148:	294b883a 	add	r5,r5,r5
 280314c:	203ff91e 	bne	r4,zero,2803134 <__mulsi3+0x8>
 2803150:	1805883a 	mov	r2,r3
 2803154:	f800283a 	ret
 2803158:	0007883a 	mov	r3,zero
 280315c:	1805883a 	mov	r2,r3
 2803160:	f800283a 	ret

02803164 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2803164:	defff804 	addi	sp,sp,-32
 2803168:	dfc00715 	stw	ra,28(sp)
 280316c:	df000615 	stw	fp,24(sp)
 2803170:	df000604 	addi	fp,sp,24
 2803174:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2803178:	e0bffc17 	ldw	r2,-16(fp)
 280317c:	1004803a 	cmplt	r2,r2,zero
 2803180:	1000091e 	bne	r2,zero,28031a8 <close+0x44>
 2803184:	e13ffc17 	ldw	r4,-16(fp)
 2803188:	01400304 	movi	r5,12
 280318c:	280312c0 	call	280312c <__mulsi3>
 2803190:	1007883a 	mov	r3,r2
 2803194:	0080a034 	movhi	r2,640
 2803198:	109d1404 	addi	r2,r2,29776
 280319c:	1887883a 	add	r3,r3,r2
 28031a0:	e0ffff15 	stw	r3,-4(fp)
 28031a4:	00000106 	br	28031ac <close+0x48>
 28031a8:	e03fff15 	stw	zero,-4(fp)
 28031ac:	e0bfff17 	ldw	r2,-4(fp)
 28031b0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 28031b4:	e0bffb17 	ldw	r2,-20(fp)
 28031b8:	1005003a 	cmpeq	r2,r2,zero
 28031bc:	10001d1e 	bne	r2,zero,2803234 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 28031c0:	e0bffb17 	ldw	r2,-20(fp)
 28031c4:	10800017 	ldw	r2,0(r2)
 28031c8:	10800417 	ldw	r2,16(r2)
 28031cc:	1005003a 	cmpeq	r2,r2,zero
 28031d0:	1000071e 	bne	r2,zero,28031f0 <close+0x8c>
 28031d4:	e0bffb17 	ldw	r2,-20(fp)
 28031d8:	10800017 	ldw	r2,0(r2)
 28031dc:	10800417 	ldw	r2,16(r2)
 28031e0:	e13ffb17 	ldw	r4,-20(fp)
 28031e4:	103ee83a 	callr	r2
 28031e8:	e0bffe15 	stw	r2,-8(fp)
 28031ec:	00000106 	br	28031f4 <close+0x90>
 28031f0:	e03ffe15 	stw	zero,-8(fp)
 28031f4:	e0bffe17 	ldw	r2,-8(fp)
 28031f8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 28031fc:	e13ffc17 	ldw	r4,-16(fp)
 2803200:	28039bc0 	call	28039bc <alt_release_fd>
    if (rval < 0)
 2803204:	e0bffa17 	ldw	r2,-24(fp)
 2803208:	1004403a 	cmpge	r2,r2,zero
 280320c:	1000071e 	bne	r2,zero,280322c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 2803210:	28032640 	call	2803264 <alt_get_errno>
 2803214:	e0fffa17 	ldw	r3,-24(fp)
 2803218:	00c7c83a 	sub	r3,zero,r3
 280321c:	10c00015 	stw	r3,0(r2)
      return -1;
 2803220:	00bfffc4 	movi	r2,-1
 2803224:	e0bffd15 	stw	r2,-12(fp)
 2803228:	00000806 	br	280324c <close+0xe8>
    }
    return 0;
 280322c:	e03ffd15 	stw	zero,-12(fp)
 2803230:	00000606 	br	280324c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2803234:	28032640 	call	2803264 <alt_get_errno>
 2803238:	1007883a 	mov	r3,r2
 280323c:	00801444 	movi	r2,81
 2803240:	18800015 	stw	r2,0(r3)
    return -1;
 2803244:	00bfffc4 	movi	r2,-1
 2803248:	e0bffd15 	stw	r2,-12(fp)
 280324c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 2803250:	e037883a 	mov	sp,fp
 2803254:	dfc00117 	ldw	ra,4(sp)
 2803258:	df000017 	ldw	fp,0(sp)
 280325c:	dec00204 	addi	sp,sp,8
 2803260:	f800283a 	ret

02803264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2803264:	defffd04 	addi	sp,sp,-12
 2803268:	dfc00215 	stw	ra,8(sp)
 280326c:	df000115 	stw	fp,4(sp)
 2803270:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2803274:	0080a074 	movhi	r2,641
 2803278:	10a1cc04 	addi	r2,r2,-30928
 280327c:	10800017 	ldw	r2,0(r2)
 2803280:	1005003a 	cmpeq	r2,r2,zero
 2803284:	1000061e 	bne	r2,zero,28032a0 <alt_get_errno+0x3c>
 2803288:	0080a074 	movhi	r2,641
 280328c:	10a1cc04 	addi	r2,r2,-30928
 2803290:	10800017 	ldw	r2,0(r2)
 2803294:	103ee83a 	callr	r2
 2803298:	e0bfff15 	stw	r2,-4(fp)
 280329c:	00000306 	br	28032ac <alt_get_errno+0x48>
 28032a0:	0080a074 	movhi	r2,641
 28032a4:	10a8a504 	addi	r2,r2,-23916
 28032a8:	e0bfff15 	stw	r2,-4(fp)
 28032ac:	e0bfff17 	ldw	r2,-4(fp)
}
 28032b0:	e037883a 	mov	sp,fp
 28032b4:	dfc00117 	ldw	ra,4(sp)
 28032b8:	df000017 	ldw	fp,0(sp)
 28032bc:	dec00204 	addi	sp,sp,8
 28032c0:	f800283a 	ret

028032c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 28032c4:	defffc04 	addi	sp,sp,-16
 28032c8:	df000315 	stw	fp,12(sp)
 28032cc:	df000304 	addi	fp,sp,12
 28032d0:	e13ffd15 	stw	r4,-12(fp)
 28032d4:	e17ffe15 	stw	r5,-8(fp)
 28032d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 28032dc:	e0bfff17 	ldw	r2,-4(fp)
}
 28032e0:	e037883a 	mov	sp,fp
 28032e4:	df000017 	ldw	fp,0(sp)
 28032e8:	dec00104 	addi	sp,sp,4
 28032ec:	f800283a 	ret

028032f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 28032f0:	defff904 	addi	sp,sp,-28
 28032f4:	dfc00615 	stw	ra,24(sp)
 28032f8:	df000515 	stw	fp,20(sp)
 28032fc:	df000504 	addi	fp,sp,20
 2803300:	e13ffc15 	stw	r4,-16(fp)
 2803304:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2803308:	e0bffc17 	ldw	r2,-16(fp)
 280330c:	1004803a 	cmplt	r2,r2,zero
 2803310:	1000091e 	bne	r2,zero,2803338 <fstat+0x48>
 2803314:	e13ffc17 	ldw	r4,-16(fp)
 2803318:	01400304 	movi	r5,12
 280331c:	280312c0 	call	280312c <__mulsi3>
 2803320:	1007883a 	mov	r3,r2
 2803324:	0080a034 	movhi	r2,640
 2803328:	109d1404 	addi	r2,r2,29776
 280332c:	1887883a 	add	r3,r3,r2
 2803330:	e0ffff15 	stw	r3,-4(fp)
 2803334:	00000106 	br	280333c <fstat+0x4c>
 2803338:	e03fff15 	stw	zero,-4(fp)
 280333c:	e0bfff17 	ldw	r2,-4(fp)
 2803340:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2803344:	e0bffb17 	ldw	r2,-20(fp)
 2803348:	1005003a 	cmpeq	r2,r2,zero
 280334c:	1000121e 	bne	r2,zero,2803398 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2803350:	e0bffb17 	ldw	r2,-20(fp)
 2803354:	10800017 	ldw	r2,0(r2)
 2803358:	10800817 	ldw	r2,32(r2)
 280335c:	1005003a 	cmpeq	r2,r2,zero
 2803360:	1000081e 	bne	r2,zero,2803384 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 2803364:	e0bffb17 	ldw	r2,-20(fp)
 2803368:	10800017 	ldw	r2,0(r2)
 280336c:	10800817 	ldw	r2,32(r2)
 2803370:	e13ffb17 	ldw	r4,-20(fp)
 2803374:	e17ffd17 	ldw	r5,-12(fp)
 2803378:	103ee83a 	callr	r2
 280337c:	e0bffe15 	stw	r2,-8(fp)
 2803380:	00000b06 	br	28033b0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2803384:	e0fffd17 	ldw	r3,-12(fp)
 2803388:	00880004 	movi	r2,8192
 280338c:	18800115 	stw	r2,4(r3)
      return 0;
 2803390:	e03ffe15 	stw	zero,-8(fp)
 2803394:	00000606 	br	28033b0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2803398:	28033c80 	call	28033c8 <alt_get_errno>
 280339c:	1007883a 	mov	r3,r2
 28033a0:	00801444 	movi	r2,81
 28033a4:	18800015 	stw	r2,0(r3)
    return -1;
 28033a8:	00bfffc4 	movi	r2,-1
 28033ac:	e0bffe15 	stw	r2,-8(fp)
 28033b0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 28033b4:	e037883a 	mov	sp,fp
 28033b8:	dfc00117 	ldw	ra,4(sp)
 28033bc:	df000017 	ldw	fp,0(sp)
 28033c0:	dec00204 	addi	sp,sp,8
 28033c4:	f800283a 	ret

028033c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 28033c8:	defffd04 	addi	sp,sp,-12
 28033cc:	dfc00215 	stw	ra,8(sp)
 28033d0:	df000115 	stw	fp,4(sp)
 28033d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 28033d8:	0080a074 	movhi	r2,641
 28033dc:	10a1cc04 	addi	r2,r2,-30928
 28033e0:	10800017 	ldw	r2,0(r2)
 28033e4:	1005003a 	cmpeq	r2,r2,zero
 28033e8:	1000061e 	bne	r2,zero,2803404 <alt_get_errno+0x3c>
 28033ec:	0080a074 	movhi	r2,641
 28033f0:	10a1cc04 	addi	r2,r2,-30928
 28033f4:	10800017 	ldw	r2,0(r2)
 28033f8:	103ee83a 	callr	r2
 28033fc:	e0bfff15 	stw	r2,-4(fp)
 2803400:	00000306 	br	2803410 <alt_get_errno+0x48>
 2803404:	0080a074 	movhi	r2,641
 2803408:	10a8a504 	addi	r2,r2,-23916
 280340c:	e0bfff15 	stw	r2,-4(fp)
 2803410:	e0bfff17 	ldw	r2,-4(fp)
}
 2803414:	e037883a 	mov	sp,fp
 2803418:	dfc00117 	ldw	ra,4(sp)
 280341c:	df000017 	ldw	fp,0(sp)
 2803420:	dec00204 	addi	sp,sp,8
 2803424:	f800283a 	ret

02803428 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2803428:	deffeb04 	addi	sp,sp,-84
 280342c:	dfc01415 	stw	ra,80(sp)
 2803430:	df001315 	stw	fp,76(sp)
 2803434:	df001304 	addi	fp,sp,76
 2803438:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 280343c:	e0bffd17 	ldw	r2,-12(fp)
 2803440:	1004803a 	cmplt	r2,r2,zero
 2803444:	1000091e 	bne	r2,zero,280346c <isatty+0x44>
 2803448:	e13ffd17 	ldw	r4,-12(fp)
 280344c:	01400304 	movi	r5,12
 2803450:	280312c0 	call	280312c <__mulsi3>
 2803454:	1007883a 	mov	r3,r2
 2803458:	0080a034 	movhi	r2,640
 280345c:	109d1404 	addi	r2,r2,29776
 2803460:	1887883a 	add	r3,r3,r2
 2803464:	e0ffff15 	stw	r3,-4(fp)
 2803468:	00000106 	br	2803470 <isatty+0x48>
 280346c:	e03fff15 	stw	zero,-4(fp)
 2803470:	e0bfff17 	ldw	r2,-4(fp)
 2803474:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 2803478:	e0bfed17 	ldw	r2,-76(fp)
 280347c:	1005003a 	cmpeq	r2,r2,zero
 2803480:	10000f1e 	bne	r2,zero,28034c0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2803484:	e0bfed17 	ldw	r2,-76(fp)
 2803488:	10800017 	ldw	r2,0(r2)
 280348c:	10800817 	ldw	r2,32(r2)
 2803490:	1004c03a 	cmpne	r2,r2,zero
 2803494:	1000031e 	bne	r2,zero,28034a4 <isatty+0x7c>
    {
      return 1;
 2803498:	00800044 	movi	r2,1
 280349c:	e0bffe15 	stw	r2,-8(fp)
 28034a0:	00000c06 	br	28034d4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 28034a4:	e17fee04 	addi	r5,fp,-72
 28034a8:	e13ffd17 	ldw	r4,-12(fp)
 28034ac:	28032f00 	call	28032f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 28034b0:	e0bfef17 	ldw	r2,-68(fp)
 28034b4:	10880020 	cmpeqi	r2,r2,8192
 28034b8:	e0bffe15 	stw	r2,-8(fp)
 28034bc:	00000506 	br	28034d4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 28034c0:	28034ec0 	call	28034ec <alt_get_errno>
 28034c4:	1007883a 	mov	r3,r2
 28034c8:	00801444 	movi	r2,81
 28034cc:	18800015 	stw	r2,0(r3)
    return 0;
 28034d0:	e03ffe15 	stw	zero,-8(fp)
 28034d4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 28034d8:	e037883a 	mov	sp,fp
 28034dc:	dfc00117 	ldw	ra,4(sp)
 28034e0:	df000017 	ldw	fp,0(sp)
 28034e4:	dec00204 	addi	sp,sp,8
 28034e8:	f800283a 	ret

028034ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 28034ec:	defffd04 	addi	sp,sp,-12
 28034f0:	dfc00215 	stw	ra,8(sp)
 28034f4:	df000115 	stw	fp,4(sp)
 28034f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 28034fc:	0080a074 	movhi	r2,641
 2803500:	10a1cc04 	addi	r2,r2,-30928
 2803504:	10800017 	ldw	r2,0(r2)
 2803508:	1005003a 	cmpeq	r2,r2,zero
 280350c:	1000061e 	bne	r2,zero,2803528 <alt_get_errno+0x3c>
 2803510:	0080a074 	movhi	r2,641
 2803514:	10a1cc04 	addi	r2,r2,-30928
 2803518:	10800017 	ldw	r2,0(r2)
 280351c:	103ee83a 	callr	r2
 2803520:	e0bfff15 	stw	r2,-4(fp)
 2803524:	00000306 	br	2803534 <alt_get_errno+0x48>
 2803528:	0080a074 	movhi	r2,641
 280352c:	10a8a504 	addi	r2,r2,-23916
 2803530:	e0bfff15 	stw	r2,-4(fp)
 2803534:	e0bfff17 	ldw	r2,-4(fp)
}
 2803538:	e037883a 	mov	sp,fp
 280353c:	dfc00117 	ldw	ra,4(sp)
 2803540:	df000017 	ldw	fp,0(sp)
 2803544:	dec00204 	addi	sp,sp,8
 2803548:	f800283a 	ret

0280354c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 280354c:	defffe04 	addi	sp,sp,-8
 2803550:	dfc00115 	stw	ra,4(sp)
 2803554:	df000015 	stw	fp,0(sp)
 2803558:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 280355c:	0100a074 	movhi	r4,641
 2803560:	2121d504 	addi	r4,r4,-30892
 2803564:	0140a034 	movhi	r5,640
 2803568:	295b0804 	addi	r5,r5,27680
 280356c:	0180a074 	movhi	r6,641
 2803570:	31a1d504 	addi	r6,r6,-30892
 2803574:	28035cc0 	call	28035cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2803578:	0100a034 	movhi	r4,640
 280357c:	21000804 	addi	r4,r4,32
 2803580:	0140a034 	movhi	r5,640
 2803584:	29400804 	addi	r5,r5,32
 2803588:	0180a034 	movhi	r6,640
 280358c:	31806d04 	addi	r6,r6,436
 2803590:	28035cc0 	call	28035cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2803594:	0100a034 	movhi	r4,640
 2803598:	211af304 	addi	r4,r4,27596
 280359c:	0140a034 	movhi	r5,640
 28035a0:	295af304 	addi	r5,r5,27596
 28035a4:	0180a034 	movhi	r6,640
 28035a8:	319b0804 	addi	r6,r6,27680
 28035ac:	28035cc0 	call	28035cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 28035b0:	28057a80 	call	28057a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 28035b4:	2805ba40 	call	2805ba4 <alt_icache_flush_all>
}
 28035b8:	e037883a 	mov	sp,fp
 28035bc:	dfc00117 	ldw	ra,4(sp)
 28035c0:	df000017 	ldw	fp,0(sp)
 28035c4:	dec00204 	addi	sp,sp,8
 28035c8:	f800283a 	ret

028035cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 28035cc:	defffc04 	addi	sp,sp,-16
 28035d0:	df000315 	stw	fp,12(sp)
 28035d4:	df000304 	addi	fp,sp,12
 28035d8:	e13ffd15 	stw	r4,-12(fp)
 28035dc:	e17ffe15 	stw	r5,-8(fp)
 28035e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 28035e4:	e0fffe17 	ldw	r3,-8(fp)
 28035e8:	e0bffd17 	ldw	r2,-12(fp)
 28035ec:	18800e26 	beq	r3,r2,2803628 <alt_load_section+0x5c>
  {
    while( to != end )
 28035f0:	00000a06 	br	280361c <alt_load_section+0x50>
    {
      *to++ = *from++;
 28035f4:	e0bffd17 	ldw	r2,-12(fp)
 28035f8:	10c00017 	ldw	r3,0(r2)
 28035fc:	e0bffe17 	ldw	r2,-8(fp)
 2803600:	10c00015 	stw	r3,0(r2)
 2803604:	e0bffe17 	ldw	r2,-8(fp)
 2803608:	10800104 	addi	r2,r2,4
 280360c:	e0bffe15 	stw	r2,-8(fp)
 2803610:	e0bffd17 	ldw	r2,-12(fp)
 2803614:	10800104 	addi	r2,r2,4
 2803618:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 280361c:	e0fffe17 	ldw	r3,-8(fp)
 2803620:	e0bfff17 	ldw	r2,-4(fp)
 2803624:	18bff31e 	bne	r3,r2,28035f4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2803628:	e037883a 	mov	sp,fp
 280362c:	df000017 	ldw	fp,0(sp)
 2803630:	dec00104 	addi	sp,sp,4
 2803634:	f800283a 	ret

02803638 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2803638:	defff804 	addi	sp,sp,-32
 280363c:	dfc00715 	stw	ra,28(sp)
 2803640:	df000615 	stw	fp,24(sp)
 2803644:	df000604 	addi	fp,sp,24
 2803648:	e13ffc15 	stw	r4,-16(fp)
 280364c:	e17ffd15 	stw	r5,-12(fp)
 2803650:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2803654:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2803658:	e0bffc17 	ldw	r2,-16(fp)
 280365c:	1004803a 	cmplt	r2,r2,zero
 2803660:	1000091e 	bne	r2,zero,2803688 <lseek+0x50>
 2803664:	e13ffc17 	ldw	r4,-16(fp)
 2803668:	01400304 	movi	r5,12
 280366c:	280312c0 	call	280312c <__mulsi3>
 2803670:	1007883a 	mov	r3,r2
 2803674:	0080a034 	movhi	r2,640
 2803678:	109d1404 	addi	r2,r2,29776
 280367c:	1887883a 	add	r3,r3,r2
 2803680:	e0ffff15 	stw	r3,-4(fp)
 2803684:	00000106 	br	280368c <lseek+0x54>
 2803688:	e03fff15 	stw	zero,-4(fp)
 280368c:	e0bfff17 	ldw	r2,-4(fp)
 2803690:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 2803694:	e0bffb17 	ldw	r2,-20(fp)
 2803698:	1005003a 	cmpeq	r2,r2,zero
 280369c:	1000111e 	bne	r2,zero,28036e4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 28036a0:	e0bffb17 	ldw	r2,-20(fp)
 28036a4:	10800017 	ldw	r2,0(r2)
 28036a8:	10800717 	ldw	r2,28(r2)
 28036ac:	1005003a 	cmpeq	r2,r2,zero
 28036b0:	1000091e 	bne	r2,zero,28036d8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 28036b4:	e0bffb17 	ldw	r2,-20(fp)
 28036b8:	10800017 	ldw	r2,0(r2)
 28036bc:	10800717 	ldw	r2,28(r2)
 28036c0:	e13ffb17 	ldw	r4,-20(fp)
 28036c4:	e17ffd17 	ldw	r5,-12(fp)
 28036c8:	e1bffe17 	ldw	r6,-8(fp)
 28036cc:	103ee83a 	callr	r2
 28036d0:	e0bffa15 	stw	r2,-24(fp)
 28036d4:	00000506 	br	28036ec <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 28036d8:	00bfde84 	movi	r2,-134
 28036dc:	e0bffa15 	stw	r2,-24(fp)
 28036e0:	00000206 	br	28036ec <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 28036e4:	00bfebc4 	movi	r2,-81
 28036e8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 28036ec:	e0bffa17 	ldw	r2,-24(fp)
 28036f0:	1004403a 	cmpge	r2,r2,zero
 28036f4:	1000071e 	bne	r2,zero,2803714 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 28036f8:	280372c0 	call	280372c <alt_get_errno>
 28036fc:	1007883a 	mov	r3,r2
 2803700:	e0bffa17 	ldw	r2,-24(fp)
 2803704:	0085c83a 	sub	r2,zero,r2
 2803708:	18800015 	stw	r2,0(r3)
    rc = -1;
 280370c:	00bfffc4 	movi	r2,-1
 2803710:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 2803714:	e0bffa17 	ldw	r2,-24(fp)
}
 2803718:	e037883a 	mov	sp,fp
 280371c:	dfc00117 	ldw	ra,4(sp)
 2803720:	df000017 	ldw	fp,0(sp)
 2803724:	dec00204 	addi	sp,sp,8
 2803728:	f800283a 	ret

0280372c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 280372c:	defffd04 	addi	sp,sp,-12
 2803730:	dfc00215 	stw	ra,8(sp)
 2803734:	df000115 	stw	fp,4(sp)
 2803738:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 280373c:	0080a074 	movhi	r2,641
 2803740:	10a1cc04 	addi	r2,r2,-30928
 2803744:	10800017 	ldw	r2,0(r2)
 2803748:	1005003a 	cmpeq	r2,r2,zero
 280374c:	1000061e 	bne	r2,zero,2803768 <alt_get_errno+0x3c>
 2803750:	0080a074 	movhi	r2,641
 2803754:	10a1cc04 	addi	r2,r2,-30928
 2803758:	10800017 	ldw	r2,0(r2)
 280375c:	103ee83a 	callr	r2
 2803760:	e0bfff15 	stw	r2,-4(fp)
 2803764:	00000306 	br	2803774 <alt_get_errno+0x48>
 2803768:	0080a074 	movhi	r2,641
 280376c:	10a8a504 	addi	r2,r2,-23916
 2803770:	e0bfff15 	stw	r2,-4(fp)
 2803774:	e0bfff17 	ldw	r2,-4(fp)
}
 2803778:	e037883a 	mov	sp,fp
 280377c:	dfc00117 	ldw	ra,4(sp)
 2803780:	df000017 	ldw	fp,0(sp)
 2803784:	dec00204 	addi	sp,sp,8
 2803788:	f800283a 	ret

0280378c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 280378c:	defffd04 	addi	sp,sp,-12
 2803790:	dfc00215 	stw	ra,8(sp)
 2803794:	df000115 	stw	fp,4(sp)
 2803798:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 280379c:	0009883a 	mov	r4,zero
 28037a0:	2803ca40 	call	2803ca4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 28037a4:	2803cd80 	call	2803cd8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 28037a8:	0100a034 	movhi	r4,640
 28037ac:	211afd04 	addi	r4,r4,27636
 28037b0:	0140a034 	movhi	r5,640
 28037b4:	295afd04 	addi	r5,r5,27636
 28037b8:	0180a034 	movhi	r6,640
 28037bc:	319afd04 	addi	r6,r6,27636
 28037c0:	2805f640 	call	2805f64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 28037c4:	2805a480 	call	2805a48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 28037c8:	0100a034 	movhi	r4,640
 28037cc:	2116ab04 	addi	r4,r4,23212
 28037d0:	28066740 	call	2806674 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 28037d4:	d126e317 	ldw	r4,-25716(gp)
 28037d8:	d166e417 	ldw	r5,-25712(gp)
 28037dc:	d1a6e517 	ldw	r6,-25708(gp)
 28037e0:	28003040 	call	2800304 <main>
 28037e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 28037e8:	01000044 	movi	r4,1
 28037ec:	28031640 	call	2803164 <close>
  exit (result);
 28037f0:	e13fff17 	ldw	r4,-4(fp)
 28037f4:	28066880 	call	2806688 <exit>

028037f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 28037f8:	defffe04 	addi	sp,sp,-8
 28037fc:	df000115 	stw	fp,4(sp)
 2803800:	df000104 	addi	fp,sp,4
 2803804:	e13fff15 	stw	r4,-4(fp)
}
 2803808:	e037883a 	mov	sp,fp
 280380c:	df000017 	ldw	fp,0(sp)
 2803810:	dec00104 	addi	sp,sp,4
 2803814:	f800283a 	ret

02803818 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2803818:	defffe04 	addi	sp,sp,-8
 280381c:	df000115 	stw	fp,4(sp)
 2803820:	df000104 	addi	fp,sp,4
 2803824:	e13fff15 	stw	r4,-4(fp)
}
 2803828:	e037883a 	mov	sp,fp
 280382c:	df000017 	ldw	fp,0(sp)
 2803830:	dec00104 	addi	sp,sp,4
 2803834:	f800283a 	ret

02803838 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2803838:	defff704 	addi	sp,sp,-36
 280383c:	dfc00815 	stw	ra,32(sp)
 2803840:	df000715 	stw	fp,28(sp)
 2803844:	df000704 	addi	fp,sp,28
 2803848:	e13ffb15 	stw	r4,-20(fp)
 280384c:	e17ffc15 	stw	r5,-16(fp)
 2803850:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2803854:	e0bffb17 	ldw	r2,-20(fp)
 2803858:	1004803a 	cmplt	r2,r2,zero
 280385c:	1000091e 	bne	r2,zero,2803884 <read+0x4c>
 2803860:	e13ffb17 	ldw	r4,-20(fp)
 2803864:	01400304 	movi	r5,12
 2803868:	280312c0 	call	280312c <__mulsi3>
 280386c:	1007883a 	mov	r3,r2
 2803870:	0080a034 	movhi	r2,640
 2803874:	109d1404 	addi	r2,r2,29776
 2803878:	1887883a 	add	r3,r3,r2
 280387c:	e0ffff15 	stw	r3,-4(fp)
 2803880:	00000106 	br	2803888 <read+0x50>
 2803884:	e03fff15 	stw	zero,-4(fp)
 2803888:	e0bfff17 	ldw	r2,-4(fp)
 280388c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 2803890:	e0bffa17 	ldw	r2,-24(fp)
 2803894:	1005003a 	cmpeq	r2,r2,zero
 2803898:	1000241e 	bne	r2,zero,280392c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 280389c:	e0bffa17 	ldw	r2,-24(fp)
 28038a0:	10800217 	ldw	r2,8(r2)
 28038a4:	108000cc 	andi	r2,r2,3
 28038a8:	10800060 	cmpeqi	r2,r2,1
 28038ac:	10001a1e 	bne	r2,zero,2803918 <read+0xe0>
 28038b0:	e0bffa17 	ldw	r2,-24(fp)
 28038b4:	10800017 	ldw	r2,0(r2)
 28038b8:	10800517 	ldw	r2,20(r2)
 28038bc:	1005003a 	cmpeq	r2,r2,zero
 28038c0:	1000151e 	bne	r2,zero,2803918 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 28038c4:	e0bffa17 	ldw	r2,-24(fp)
 28038c8:	10800017 	ldw	r2,0(r2)
 28038cc:	10800517 	ldw	r2,20(r2)
 28038d0:	e17ffc17 	ldw	r5,-16(fp)
 28038d4:	e1bffd17 	ldw	r6,-12(fp)
 28038d8:	e13ffa17 	ldw	r4,-24(fp)
 28038dc:	103ee83a 	callr	r2
 28038e0:	e0bff915 	stw	r2,-28(fp)
 28038e4:	e0bff917 	ldw	r2,-28(fp)
 28038e8:	1004403a 	cmpge	r2,r2,zero
 28038ec:	1000071e 	bne	r2,zero,280390c <read+0xd4>
        {
          ALT_ERRNO = -rval;
 28038f0:	280395c0 	call	280395c <alt_get_errno>
 28038f4:	e0fff917 	ldw	r3,-28(fp)
 28038f8:	00c7c83a 	sub	r3,zero,r3
 28038fc:	10c00015 	stw	r3,0(r2)
          return -1;
 2803900:	00bfffc4 	movi	r2,-1
 2803904:	e0bffe15 	stw	r2,-8(fp)
 2803908:	00000e06 	br	2803944 <read+0x10c>
        }
        return rval;
 280390c:	e0bff917 	ldw	r2,-28(fp)
 2803910:	e0bffe15 	stw	r2,-8(fp)
 2803914:	00000b06 	br	2803944 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2803918:	280395c0 	call	280395c <alt_get_errno>
 280391c:	1007883a 	mov	r3,r2
 2803920:	00800344 	movi	r2,13
 2803924:	18800015 	stw	r2,0(r3)
 2803928:	00000406 	br	280393c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 280392c:	280395c0 	call	280395c <alt_get_errno>
 2803930:	1007883a 	mov	r3,r2
 2803934:	00801444 	movi	r2,81
 2803938:	18800015 	stw	r2,0(r3)
  }
  return -1;
 280393c:	00bfffc4 	movi	r2,-1
 2803940:	e0bffe15 	stw	r2,-8(fp)
 2803944:	e0bffe17 	ldw	r2,-8(fp)
}
 2803948:	e037883a 	mov	sp,fp
 280394c:	dfc00117 	ldw	ra,4(sp)
 2803950:	df000017 	ldw	fp,0(sp)
 2803954:	dec00204 	addi	sp,sp,8
 2803958:	f800283a 	ret

0280395c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 280395c:	defffd04 	addi	sp,sp,-12
 2803960:	dfc00215 	stw	ra,8(sp)
 2803964:	df000115 	stw	fp,4(sp)
 2803968:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 280396c:	0080a074 	movhi	r2,641
 2803970:	10a1cc04 	addi	r2,r2,-30928
 2803974:	10800017 	ldw	r2,0(r2)
 2803978:	1005003a 	cmpeq	r2,r2,zero
 280397c:	1000061e 	bne	r2,zero,2803998 <alt_get_errno+0x3c>
 2803980:	0080a074 	movhi	r2,641
 2803984:	10a1cc04 	addi	r2,r2,-30928
 2803988:	10800017 	ldw	r2,0(r2)
 280398c:	103ee83a 	callr	r2
 2803990:	e0bfff15 	stw	r2,-4(fp)
 2803994:	00000306 	br	28039a4 <alt_get_errno+0x48>
 2803998:	0080a074 	movhi	r2,641
 280399c:	10a8a504 	addi	r2,r2,-23916
 28039a0:	e0bfff15 	stw	r2,-4(fp)
 28039a4:	e0bfff17 	ldw	r2,-4(fp)
}
 28039a8:	e037883a 	mov	sp,fp
 28039ac:	dfc00117 	ldw	ra,4(sp)
 28039b0:	df000017 	ldw	fp,0(sp)
 28039b4:	dec00204 	addi	sp,sp,8
 28039b8:	f800283a 	ret

028039bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 28039bc:	defffc04 	addi	sp,sp,-16
 28039c0:	dfc00315 	stw	ra,12(sp)
 28039c4:	df000215 	stw	fp,8(sp)
 28039c8:	dc000115 	stw	r16,4(sp)
 28039cc:	df000104 	addi	fp,sp,4
 28039d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 28039d4:	e0bfff17 	ldw	r2,-4(fp)
 28039d8:	108000d0 	cmplti	r2,r2,3
 28039dc:	10000f1e 	bne	r2,zero,2803a1c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 28039e0:	e13fff17 	ldw	r4,-4(fp)
 28039e4:	0400a034 	movhi	r16,640
 28039e8:	841d1404 	addi	r16,r16,29776
 28039ec:	01400304 	movi	r5,12
 28039f0:	280312c0 	call	280312c <__mulsi3>
 28039f4:	1405883a 	add	r2,r2,r16
 28039f8:	10800204 	addi	r2,r2,8
 28039fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2803a00:	e13fff17 	ldw	r4,-4(fp)
 2803a04:	0400a034 	movhi	r16,640
 2803a08:	841d1404 	addi	r16,r16,29776
 2803a0c:	01400304 	movi	r5,12
 2803a10:	280312c0 	call	280312c <__mulsi3>
 2803a14:	1405883a 	add	r2,r2,r16
 2803a18:	10000015 	stw	zero,0(r2)
  }
}
 2803a1c:	e037883a 	mov	sp,fp
 2803a20:	dfc00217 	ldw	ra,8(sp)
 2803a24:	df000117 	ldw	fp,4(sp)
 2803a28:	dc000017 	ldw	r16,0(sp)
 2803a2c:	dec00304 	addi	sp,sp,12
 2803a30:	f800283a 	ret

02803a34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2803a34:	defff804 	addi	sp,sp,-32
 2803a38:	df000715 	stw	fp,28(sp)
 2803a3c:	df000704 	addi	fp,sp,28
 2803a40:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2803a44:	0005303a 	rdctl	r2,status
 2803a48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2803a4c:	e0fffb17 	ldw	r3,-20(fp)
 2803a50:	00bfff84 	movi	r2,-2
 2803a54:	1884703a 	and	r2,r3,r2
 2803a58:	1001703a 	wrctl	status,r2
  
  return context;
 2803a5c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2803a60:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2803a64:	d0a00a17 	ldw	r2,-32728(gp)
 2803a68:	10c000c4 	addi	r3,r2,3
 2803a6c:	00bfff04 	movi	r2,-4
 2803a70:	1884703a 	and	r2,r3,r2
 2803a74:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2803a78:	d0e00a17 	ldw	r3,-32728(gp)
 2803a7c:	e0bffe17 	ldw	r2,-8(fp)
 2803a80:	1887883a 	add	r3,r3,r2
 2803a84:	0080c034 	movhi	r2,768
 2803a88:	10800004 	addi	r2,r2,0
 2803a8c:	10c0072e 	bgeu	r2,r3,2803aac <sbrk+0x78>
 2803a90:	e0bffd17 	ldw	r2,-12(fp)
 2803a94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2803a98:	e0bffa17 	ldw	r2,-24(fp)
 2803a9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2803aa0:	00bfffc4 	movi	r2,-1
 2803aa4:	e0bfff15 	stw	r2,-4(fp)
 2803aa8:	00000c06 	br	2803adc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 2803aac:	d0a00a17 	ldw	r2,-32728(gp)
 2803ab0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 2803ab4:	d0e00a17 	ldw	r3,-32728(gp)
 2803ab8:	e0bffe17 	ldw	r2,-8(fp)
 2803abc:	1885883a 	add	r2,r3,r2
 2803ac0:	d0a00a15 	stw	r2,-32728(gp)
 2803ac4:	e0bffd17 	ldw	r2,-12(fp)
 2803ac8:	e0bff915 	stw	r2,-28(fp)
 2803acc:	e0bff917 	ldw	r2,-28(fp)
 2803ad0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2803ad4:	e0bffc17 	ldw	r2,-16(fp)
 2803ad8:	e0bfff15 	stw	r2,-4(fp)
 2803adc:	e0bfff17 	ldw	r2,-4(fp)
} 
 2803ae0:	e037883a 	mov	sp,fp
 2803ae4:	df000017 	ldw	fp,0(sp)
 2803ae8:	dec00104 	addi	sp,sp,4
 2803aec:	f800283a 	ret

02803af0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 2803af0:	defffd04 	addi	sp,sp,-12
 2803af4:	dfc00215 	stw	ra,8(sp)
 2803af8:	df000115 	stw	fp,4(sp)
 2803afc:	df000104 	addi	fp,sp,4
 2803b00:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 2803b04:	e13fff17 	ldw	r4,-4(fp)
 2803b08:	280564c0 	call	280564c <alt_busy_sleep>
}
 2803b0c:	e037883a 	mov	sp,fp
 2803b10:	dfc00117 	ldw	ra,4(sp)
 2803b14:	df000017 	ldw	fp,0(sp)
 2803b18:	dec00204 	addi	sp,sp,8
 2803b1c:	f800283a 	ret

02803b20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2803b20:	defff704 	addi	sp,sp,-36
 2803b24:	dfc00815 	stw	ra,32(sp)
 2803b28:	df000715 	stw	fp,28(sp)
 2803b2c:	df000704 	addi	fp,sp,28
 2803b30:	e13ffb15 	stw	r4,-20(fp)
 2803b34:	e17ffc15 	stw	r5,-16(fp)
 2803b38:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2803b3c:	e0bffb17 	ldw	r2,-20(fp)
 2803b40:	1004803a 	cmplt	r2,r2,zero
 2803b44:	1000091e 	bne	r2,zero,2803b6c <write+0x4c>
 2803b48:	e13ffb17 	ldw	r4,-20(fp)
 2803b4c:	01400304 	movi	r5,12
 2803b50:	280312c0 	call	280312c <__mulsi3>
 2803b54:	1007883a 	mov	r3,r2
 2803b58:	0080a034 	movhi	r2,640
 2803b5c:	109d1404 	addi	r2,r2,29776
 2803b60:	1887883a 	add	r3,r3,r2
 2803b64:	e0ffff15 	stw	r3,-4(fp)
 2803b68:	00000106 	br	2803b70 <write+0x50>
 2803b6c:	e03fff15 	stw	zero,-4(fp)
 2803b70:	e0bfff17 	ldw	r2,-4(fp)
 2803b74:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 2803b78:	e0bffa17 	ldw	r2,-24(fp)
 2803b7c:	1005003a 	cmpeq	r2,r2,zero
 2803b80:	1000241e 	bne	r2,zero,2803c14 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2803b84:	e0bffa17 	ldw	r2,-24(fp)
 2803b88:	10800217 	ldw	r2,8(r2)
 2803b8c:	108000cc 	andi	r2,r2,3
 2803b90:	1005003a 	cmpeq	r2,r2,zero
 2803b94:	10001a1e 	bne	r2,zero,2803c00 <write+0xe0>
 2803b98:	e0bffa17 	ldw	r2,-24(fp)
 2803b9c:	10800017 	ldw	r2,0(r2)
 2803ba0:	10800617 	ldw	r2,24(r2)
 2803ba4:	1005003a 	cmpeq	r2,r2,zero
 2803ba8:	1000151e 	bne	r2,zero,2803c00 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2803bac:	e0bffa17 	ldw	r2,-24(fp)
 2803bb0:	10800017 	ldw	r2,0(r2)
 2803bb4:	10800617 	ldw	r2,24(r2)
 2803bb8:	e17ffc17 	ldw	r5,-16(fp)
 2803bbc:	e1bffd17 	ldw	r6,-12(fp)
 2803bc0:	e13ffa17 	ldw	r4,-24(fp)
 2803bc4:	103ee83a 	callr	r2
 2803bc8:	e0bff915 	stw	r2,-28(fp)
 2803bcc:	e0bff917 	ldw	r2,-28(fp)
 2803bd0:	1004403a 	cmpge	r2,r2,zero
 2803bd4:	1000071e 	bne	r2,zero,2803bf4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 2803bd8:	2803c440 	call	2803c44 <alt_get_errno>
 2803bdc:	e0fff917 	ldw	r3,-28(fp)
 2803be0:	00c7c83a 	sub	r3,zero,r3
 2803be4:	10c00015 	stw	r3,0(r2)
        return -1;
 2803be8:	00bfffc4 	movi	r2,-1
 2803bec:	e0bffe15 	stw	r2,-8(fp)
 2803bf0:	00000e06 	br	2803c2c <write+0x10c>
      }
      return rval;
 2803bf4:	e0bff917 	ldw	r2,-28(fp)
 2803bf8:	e0bffe15 	stw	r2,-8(fp)
 2803bfc:	00000b06 	br	2803c2c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2803c00:	2803c440 	call	2803c44 <alt_get_errno>
 2803c04:	1007883a 	mov	r3,r2
 2803c08:	00800344 	movi	r2,13
 2803c0c:	18800015 	stw	r2,0(r3)
 2803c10:	00000406 	br	2803c24 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2803c14:	2803c440 	call	2803c44 <alt_get_errno>
 2803c18:	1007883a 	mov	r3,r2
 2803c1c:	00801444 	movi	r2,81
 2803c20:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2803c24:	00bfffc4 	movi	r2,-1
 2803c28:	e0bffe15 	stw	r2,-8(fp)
 2803c2c:	e0bffe17 	ldw	r2,-8(fp)
}
 2803c30:	e037883a 	mov	sp,fp
 2803c34:	dfc00117 	ldw	ra,4(sp)
 2803c38:	df000017 	ldw	fp,0(sp)
 2803c3c:	dec00204 	addi	sp,sp,8
 2803c40:	f800283a 	ret

02803c44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2803c44:	defffd04 	addi	sp,sp,-12
 2803c48:	dfc00215 	stw	ra,8(sp)
 2803c4c:	df000115 	stw	fp,4(sp)
 2803c50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2803c54:	0080a074 	movhi	r2,641
 2803c58:	10a1cc04 	addi	r2,r2,-30928
 2803c5c:	10800017 	ldw	r2,0(r2)
 2803c60:	1005003a 	cmpeq	r2,r2,zero
 2803c64:	1000061e 	bne	r2,zero,2803c80 <alt_get_errno+0x3c>
 2803c68:	0080a074 	movhi	r2,641
 2803c6c:	10a1cc04 	addi	r2,r2,-30928
 2803c70:	10800017 	ldw	r2,0(r2)
 2803c74:	103ee83a 	callr	r2
 2803c78:	e0bfff15 	stw	r2,-4(fp)
 2803c7c:	00000306 	br	2803c8c <alt_get_errno+0x48>
 2803c80:	0080a074 	movhi	r2,641
 2803c84:	10a8a504 	addi	r2,r2,-23916
 2803c88:	e0bfff15 	stw	r2,-4(fp)
 2803c8c:	e0bfff17 	ldw	r2,-4(fp)
}
 2803c90:	e037883a 	mov	sp,fp
 2803c94:	dfc00117 	ldw	ra,4(sp)
 2803c98:	df000017 	ldw	fp,0(sp)
 2803c9c:	dec00204 	addi	sp,sp,8
 2803ca0:	f800283a 	ret

02803ca4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2803ca4:	defffd04 	addi	sp,sp,-12
 2803ca8:	dfc00215 	stw	ra,8(sp)
 2803cac:	df000115 	stw	fp,4(sp)
 2803cb0:	df000104 	addi	fp,sp,4
 2803cb4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2CPU, nios2cpu);
 2803cb8:	28064640 	call	2806464 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2803cbc:	00800044 	movi	r2,1
 2803cc0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2803cc4:	e037883a 	mov	sp,fp
 2803cc8:	dfc00117 	ldw	ra,4(sp)
 2803ccc:	df000017 	ldw	fp,0(sp)
 2803cd0:	dec00204 	addi	sp,sp,8
 2803cd4:	f800283a 	ret

02803cd8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2803cd8:	defffd04 	addi	sp,sp,-12
 2803cdc:	dfc00215 	stw	ra,8(sp)
 2803ce0:	df000115 	stw	fp,4(sp)
 2803ce4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 2803ce8:	00c0a074 	movhi	r3,641
 2803cec:	18e8a904 	addi	r3,r3,-23900
 2803cf0:	00804034 	movhi	r2,256
 2803cf4:	18800015 	stw	r2,0(r3)
 2803cf8:	00c0a074 	movhi	r3,641
 2803cfc:	18e8aa04 	addi	r3,r3,-23896
 2803d00:	00802674 	movhi	r2,153
 2803d04:	10a5a004 	addi	r2,r2,-27008
 2803d08:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_DMA_INIT ( DMA, dma);
 2803d0c:	008000c4 	movi	r2,3
 2803d10:	d8800015 	stw	r2,0(sp)
 2803d14:	0100a034 	movhi	r4,640
 2803d18:	211d9d04 	addi	r4,r4,30324
 2803d1c:	0140a034 	movhi	r5,640
 2803d20:	295da404 	addi	r5,r5,30352
 2803d24:	0180c034 	movhi	r6,768
 2803d28:	31840004 	addi	r6,r6,4096
 2803d2c:	000f883a 	mov	r7,zero
 2803d30:	280492c0 	call	280492c <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2803d34:	0100a034 	movhi	r4,640
 2803d38:	211db504 	addi	r4,r4,30420
 2803d3c:	000b883a 	mov	r5,zero
 2803d40:	000d883a 	mov	r6,zero
 2803d44:	2804b940 	call	2804b94 <altera_avalon_jtag_uart_init>
 2803d48:	0100a034 	movhi	r4,640
 2803d4c:	211dab04 	addi	r4,r4,30380
 2803d50:	2803d680 	call	2803d68 <alt_dev_reg>
}
 2803d54:	e037883a 	mov	sp,fp
 2803d58:	dfc00117 	ldw	ra,4(sp)
 2803d5c:	df000017 	ldw	fp,0(sp)
 2803d60:	dec00204 	addi	sp,sp,8
 2803d64:	f800283a 	ret

02803d68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2803d68:	defffd04 	addi	sp,sp,-12
 2803d6c:	dfc00215 	stw	ra,8(sp)
 2803d70:	df000115 	stw	fp,4(sp)
 2803d74:	df000104 	addi	fp,sp,4
 2803d78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2803d7c:	e13fff17 	ldw	r4,-4(fp)
 2803d80:	0140a074 	movhi	r5,641
 2803d84:	2961c904 	addi	r5,r5,-30940
 2803d88:	28057c40 	call	28057c4 <alt_dev_llist_insert>
}
 2803d8c:	e037883a 	mov	sp,fp
 2803d90:	dfc00117 	ldw	ra,4(sp)
 2803d94:	df000017 	ldw	fp,0(sp)
 2803d98:	dec00204 	addi	sp,sp,8
 2803d9c:	f800283a 	ret

02803da0 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
 2803da0:	defff904 	addi	sp,sp,-28
 2803da4:	df000615 	stw	fp,24(sp)
 2803da8:	df000604 	addi	fp,sp,24
 2803dac:	e13ffc15 	stw	r4,-16(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
 2803db0:	e0bffc17 	ldw	r2,-16(fp)
 2803db4:	10c00117 	ldw	r3,4(r2)
 2803db8:	e0bffc17 	ldw	r2,-16(fp)
 2803dbc:	10800217 	ldw	r2,8(r2)
 2803dc0:	18803926 	beq	r3,r2,2803ea8 <alt_avalon_dma_launch_bidir+0x108>
 2803dc4:	e0bffc17 	ldw	r2,-16(fp)
 2803dc8:	10c00317 	ldw	r3,12(r2)
 2803dcc:	e0bffc17 	ldw	r2,-16(fp)
 2803dd0:	10800417 	ldw	r2,16(r2)
 2803dd4:	18803426 	beq	r3,r2,2803ea8 <alt_avalon_dma_launch_bidir+0x108>
  {
    priv->active = 1;
 2803dd8:	e0fffc17 	ldw	r3,-16(fp)
 2803ddc:	00800044 	movi	r2,1
 2803de0:	18800815 	stw	r2,32(r3)

    tx_slot = &priv->tx_buf[priv->tx_start];
 2803de4:	e0bffc17 	ldw	r2,-16(fp)
 2803de8:	10c00904 	addi	r3,r2,36
 2803dec:	e0bffc17 	ldw	r2,-16(fp)
 2803df0:	10800117 	ldw	r2,4(r2)
 2803df4:	1004913a 	slli	r2,r2,4
 2803df8:	1885883a 	add	r2,r3,r2
 2803dfc:	e0bffb15 	stw	r2,-20(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
 2803e00:	e0bffc17 	ldw	r2,-16(fp)
 2803e04:	10c01904 	addi	r3,r2,100
 2803e08:	e0bffc17 	ldw	r2,-16(fp)
 2803e0c:	10800317 	ldw	r2,12(r2)
 2803e10:	1004913a 	slli	r2,r2,4
 2803e14:	1885883a 	add	r2,r3,r2
 2803e18:	e0bffa15 	stw	r2,-24(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 2803e1c:	e0bffc17 	ldw	r2,-16(fp)
 2803e20:	10800017 	ldw	r2,0(r2)
 2803e24:	11000104 	addi	r4,r2,4
 2803e28:	e0bffb17 	ldw	r2,-20(fp)
 2803e2c:	10800017 	ldw	r2,0(r2)
 2803e30:	1007883a 	mov	r3,r2
 2803e34:	2005883a 	mov	r2,r4
 2803e38:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 2803e3c:	e0bffc17 	ldw	r2,-16(fp)
 2803e40:	10800017 	ldw	r2,0(r2)
 2803e44:	11000204 	addi	r4,r2,8
 2803e48:	e0bffa17 	ldw	r2,-24(fp)
 2803e4c:	10800017 	ldw	r2,0(r2)
 2803e50:	1007883a 	mov	r3,r2
 2803e54:	2005883a 	mov	r2,r4
 2803e58:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
 2803e5c:	e0bffc17 	ldw	r2,-16(fp)
 2803e60:	10800017 	ldw	r2,0(r2)
 2803e64:	10800304 	addi	r2,r2,12
 2803e68:	e0bfff15 	stw	r2,-4(fp)
 2803e6c:	e0bffb17 	ldw	r2,-20(fp)
 2803e70:	10c00117 	ldw	r3,4(r2)
 2803e74:	e0bffa17 	ldw	r2,-24(fp)
 2803e78:	10800117 	ldw	r2,4(r2)
 2803e7c:	e0bffe15 	stw	r2,-8(fp)
 2803e80:	e0fffd15 	stw	r3,-12(fp)
 2803e84:	e0bffe17 	ldw	r2,-8(fp)
 2803e88:	e0fffd17 	ldw	r3,-12(fp)
 2803e8c:	10c0022e 	bgeu	r2,r3,2803e98 <alt_avalon_dma_launch_bidir+0xf8>
 2803e90:	e0bffe17 	ldw	r2,-8(fp)
 2803e94:	e0bffd15 	stw	r2,-12(fp)
 2803e98:	e0fffd17 	ldw	r3,-12(fp)
 2803e9c:	e0bfff17 	ldw	r2,-4(fp)
 2803ea0:	10c00035 	stwio	r3,0(r2)
void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
 2803ea4:	00000206 	br	2803eb0 <alt_avalon_dma_launch_bidir+0x110>
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
 2803ea8:	e0bffc17 	ldw	r2,-16(fp)
 2803eac:	10000815 	stw	zero,32(r2)
  }
}
 2803eb0:	e037883a 	mov	sp,fp
 2803eb4:	df000017 	ldw	fp,0(sp)
 2803eb8:	dec00104 	addi	sp,sp,4
 2803ebc:	f800283a 	ret

02803ec0 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
 2803ec0:	defffd04 	addi	sp,sp,-12
 2803ec4:	df000215 	stw	fp,8(sp)
 2803ec8:	df000204 	addi	fp,sp,8
 2803ecc:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
 2803ed0:	e0bfff17 	ldw	r2,-4(fp)
 2803ed4:	10c00117 	ldw	r3,4(r2)
 2803ed8:	e0bfff17 	ldw	r2,-4(fp)
 2803edc:	10800217 	ldw	r2,8(r2)
 2803ee0:	18801b26 	beq	r3,r2,2803f50 <alt_avalon_dma_launch_txonly+0x90>
  {
    priv->active = 1;
 2803ee4:	e0ffff17 	ldw	r3,-4(fp)
 2803ee8:	00800044 	movi	r2,1
 2803eec:	18800815 	stw	r2,32(r3)
    tx_slot      = &priv->tx_buf[priv->tx_start];
 2803ef0:	e0bfff17 	ldw	r2,-4(fp)
 2803ef4:	10c00904 	addi	r3,r2,36
 2803ef8:	e0bfff17 	ldw	r2,-4(fp)
 2803efc:	10800117 	ldw	r2,4(r2)
 2803f00:	1004913a 	slli	r2,r2,4
 2803f04:	1885883a 	add	r2,r3,r2
 2803f08:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 2803f0c:	e0bfff17 	ldw	r2,-4(fp)
 2803f10:	10800017 	ldw	r2,0(r2)
 2803f14:	11000104 	addi	r4,r2,4
 2803f18:	e0bffe17 	ldw	r2,-8(fp)
 2803f1c:	10800017 	ldw	r2,0(r2)
 2803f20:	1007883a 	mov	r3,r2
 2803f24:	2005883a 	mov	r2,r4
 2803f28:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
 2803f2c:	e0bfff17 	ldw	r2,-4(fp)
 2803f30:	10800017 	ldw	r2,0(r2)
 2803f34:	11000304 	addi	r4,r2,12
 2803f38:	e0bffe17 	ldw	r2,-8(fp)
 2803f3c:	10800117 	ldw	r2,4(r2)
 2803f40:	1007883a 	mov	r3,r2
 2803f44:	2005883a 	mov	r2,r4
 2803f48:	10c00035 	stwio	r3,0(r2)
 2803f4c:	00000206 	br	2803f58 <alt_avalon_dma_launch_txonly+0x98>
  }
  else
  {
    priv->active = 0;
 2803f50:	e0bfff17 	ldw	r2,-4(fp)
 2803f54:	10000815 	stw	zero,32(r2)
  }
}
 2803f58:	e037883a 	mov	sp,fp
 2803f5c:	df000017 	ldw	fp,0(sp)
 2803f60:	dec00104 	addi	sp,sp,4
 2803f64:	f800283a 	ret

02803f68 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
 2803f68:	defffd04 	addi	sp,sp,-12
 2803f6c:	df000215 	stw	fp,8(sp)
 2803f70:	df000204 	addi	fp,sp,8
 2803f74:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
 2803f78:	e0bfff17 	ldw	r2,-4(fp)
 2803f7c:	10c00317 	ldw	r3,12(r2)
 2803f80:	e0bfff17 	ldw	r2,-4(fp)
 2803f84:	10800417 	ldw	r2,16(r2)
 2803f88:	18801b26 	beq	r3,r2,2803ff8 <alt_avalon_dma_launch_rxonly+0x90>
  {
    priv->active = 1;
 2803f8c:	e0ffff17 	ldw	r3,-4(fp)
 2803f90:	00800044 	movi	r2,1
 2803f94:	18800815 	stw	r2,32(r3)
    rx_slot      = &priv->rx_buf[priv->rx_start];
 2803f98:	e0bfff17 	ldw	r2,-4(fp)
 2803f9c:	10c01904 	addi	r3,r2,100
 2803fa0:	e0bfff17 	ldw	r2,-4(fp)
 2803fa4:	10800317 	ldw	r2,12(r2)
 2803fa8:	1004913a 	slli	r2,r2,4
 2803fac:	1885883a 	add	r2,r3,r2
 2803fb0:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 2803fb4:	e0bfff17 	ldw	r2,-4(fp)
 2803fb8:	10800017 	ldw	r2,0(r2)
 2803fbc:	11000204 	addi	r4,r2,8
 2803fc0:	e0bffe17 	ldw	r2,-8(fp)
 2803fc4:	10800017 	ldw	r2,0(r2)
 2803fc8:	1007883a 	mov	r3,r2
 2803fcc:	2005883a 	mov	r2,r4
 2803fd0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
 2803fd4:	e0bfff17 	ldw	r2,-4(fp)
 2803fd8:	10800017 	ldw	r2,0(r2)
 2803fdc:	11000304 	addi	r4,r2,12
 2803fe0:	e0bffe17 	ldw	r2,-8(fp)
 2803fe4:	10800117 	ldw	r2,4(r2)
 2803fe8:	1007883a 	mov	r3,r2
 2803fec:	2005883a 	mov	r2,r4
 2803ff0:	10c00035 	stwio	r3,0(r2)
 2803ff4:	00000206 	br	2804000 <alt_avalon_dma_launch_rxonly+0x98>
  }
  else
  {
    priv->active = 0;
 2803ff8:	e0bfff17 	ldw	r2,-4(fp)
 2803ffc:	10000815 	stw	zero,32(r2)
  }
}
 2804000:	e037883a 	mov	sp,fp
 2804004:	df000017 	ldw	fp,0(sp)
 2804008:	dec00104 	addi	sp,sp,4
 280400c:	f800283a 	ret

02804010 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
 2804010:	defff804 	addi	sp,sp,-32
 2804014:	df000715 	stw	fp,28(sp)
 2804018:	df000704 	addi	fp,sp,28
 280401c:	e13ffb15 	stw	r4,-20(fp)
 2804020:	e17ffc15 	stw	r5,-16(fp)
 2804024:	e1bffd15 	stw	r6,-12(fp)
  int     status = 0;
 2804028:	e03ffa15 	stw	zero,-24(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
 280402c:	e0bffb17 	ldw	r2,-20(fp)
 2804030:	10c00117 	ldw	r3,4(r2)
 2804034:	e0bffb17 	ldw	r2,-20(fp)
 2804038:	10800217 	ldw	r2,8(r2)
 280403c:	18800b1e 	bne	r3,r2,280406c <alt_avalon_dma_ioctl+0x5c>
 2804040:	e0bffb17 	ldw	r2,-20(fp)
 2804044:	10c00317 	ldw	r3,12(r2)
 2804048:	e0bffb17 	ldw	r2,-20(fp)
 280404c:	10800417 	ldw	r2,16(r2)
 2804050:	1880061e 	bne	r3,r2,280406c <alt_avalon_dma_ioctl+0x5c>
 2804054:	e0bffb17 	ldw	r2,-20(fp)
 2804058:	10800017 	ldw	r2,0(r2)
 280405c:	10800304 	addi	r2,r2,12
 2804060:	10800037 	ldwio	r2,0(r2)
 2804064:	1005003a 	cmpeq	r2,r2,zero
 2804068:	1000031e 	bne	r2,zero,2804078 <alt_avalon_dma_ioctl+0x68>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
 280406c:	00bffec4 	movi	r2,-5
 2804070:	e0bfff15 	stw	r2,-4(fp)
 2804074:	0000ca06 	br	28043a0 <alt_avalon_dma_ioctl+0x390>
  }

  /* Now process the ioctl. */

  switch (req)
 2804078:	e0bffc17 	ldw	r2,-16(fp)
 280407c:	108002a8 	cmpgeui	r2,r2,10
 2804080:	10007d1e 	bne	r2,zero,2804278 <alt_avalon_dma_ioctl+0x268>
 2804084:	e0bffc17 	ldw	r2,-16(fp)
 2804088:	1085883a 	add	r2,r2,r2
 280408c:	1087883a 	add	r3,r2,r2
 2804090:	0080a034 	movhi	r2,640
 2804094:	10902904 	addi	r2,r2,16548
 2804098:	1885883a 	add	r2,r3,r2
 280409c:	10800017 	ldw	r2,0(r2)
 28040a0:	1000683a 	jmp	r2
 28040a4:	02804278 	rdprs	r10,zero,265
 28040a8:	028040cc 	andi	r10,zero,259
 28040ac:	02804128 	cmpgeui	r10,zero,260
 28040b0:	02804154 	movui	r10,261
 28040b4:	028041b0 	cmpltui	r10,zero,262
 28040b8:	028041dc 	xori	r10,zero,263
 28040bc:	028041f8 	rdprs	r10,zero,263
 28040c0:	02804218 	cmpnei	r10,zero,264
 28040c4:	02804238 	rdprs	r10,zero,264
 28040c8:	02804258 	cmpnei	r10,zero,265
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
 28040cc:	e0bffb17 	ldw	r2,-20(fp)
 28040d0:	10800517 	ldw	r2,20(r2)
 28040d4:	1080100c 	andi	r2,r2,64
 28040d8:	1004c03a 	cmpne	r2,r2,zero
 28040dc:	10000f1e 	bne	r2,zero,280411c <alt_avalon_dma_ioctl+0x10c>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
 28040e0:	e0bffb17 	ldw	r2,-20(fp)
 28040e4:	10800017 	ldw	r2,0(r2)
 28040e8:	10800104 	addi	r2,r2,4
 28040ec:	e0fffd17 	ldw	r3,-12(fp)
 28040f0:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
 28040f4:	e0bffb17 	ldw	r2,-20(fp)
 28040f8:	10800517 	ldw	r2,20(r2)
 28040fc:	10c00814 	ori	r3,r2,32
 2804100:	e0bffb17 	ldw	r2,-20(fp)
 2804104:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
 2804108:	e0fffb17 	ldw	r3,-20(fp)
 280410c:	0080a034 	movhi	r2,640
 2804110:	108fda04 	addi	r2,r2,16232
 2804114:	18800715 	stw	r2,28(r3)
 2804118:	00005906 	br	2804280 <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
 280411c:	00bffec4 	movi	r2,-5
 2804120:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
 2804124:	00005606 	br	2804280 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
 2804128:	e0bffb17 	ldw	r2,-20(fp)
 280412c:	10c00517 	ldw	r3,20(r2)
 2804130:	00bff7c4 	movi	r2,-33
 2804134:	1886703a 	and	r3,r3,r2
 2804138:	e0bffb17 	ldw	r2,-20(fp)
 280413c:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 2804140:	e0fffb17 	ldw	r3,-20(fp)
 2804144:	0080a034 	movhi	r2,640
 2804148:	108f6804 	addi	r2,r2,15776
 280414c:	18800715 	stw	r2,28(r3)
    break;
 2804150:	00004b06 	br	2804280 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
 2804154:	e0bffb17 	ldw	r2,-20(fp)
 2804158:	10800517 	ldw	r2,20(r2)
 280415c:	1080080c 	andi	r2,r2,32
 2804160:	1004c03a 	cmpne	r2,r2,zero
 2804164:	10000f1e 	bne	r2,zero,28041a4 <alt_avalon_dma_ioctl+0x194>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
 2804168:	e0bffb17 	ldw	r2,-20(fp)
 280416c:	10800017 	ldw	r2,0(r2)
 2804170:	10800204 	addi	r2,r2,8
 2804174:	e0fffd17 	ldw	r3,-12(fp)
 2804178:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
 280417c:	e0bffb17 	ldw	r2,-20(fp)
 2804180:	10800517 	ldw	r2,20(r2)
 2804184:	10c01014 	ori	r3,r2,64
 2804188:	e0bffb17 	ldw	r2,-20(fp)
 280418c:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
 2804190:	e0fffb17 	ldw	r3,-20(fp)
 2804194:	0080a034 	movhi	r2,640
 2804198:	108fb004 	addi	r2,r2,16064
 280419c:	18800715 	stw	r2,28(r3)
 28041a0:	00003706 	br	2804280 <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
 28041a4:	00bffec4 	movi	r2,-5
 28041a8:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
 28041ac:	00003406 	br	2804280 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
 28041b0:	e0bffb17 	ldw	r2,-20(fp)
 28041b4:	10c00517 	ldw	r3,20(r2)
 28041b8:	00bfefc4 	movi	r2,-65
 28041bc:	1886703a 	and	r3,r3,r2
 28041c0:	e0bffb17 	ldw	r2,-20(fp)
 28041c4:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 28041c8:	e0fffb17 	ldw	r3,-20(fp)
 28041cc:	0080a034 	movhi	r2,640
 28041d0:	108f6804 	addi	r2,r2,15776
 28041d4:	18800715 	stw	r2,28(r3)
    break;
 28041d8:	00002906 	br	2804280 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 28041dc:	e0bffb17 	ldw	r2,-20(fp)
 28041e0:	10c00517 	ldw	r3,20(r2)
 28041e4:	00bffc04 	movi	r2,-16
 28041e8:	1886703a 	and	r3,r3,r2
 28041ec:	e0bffb17 	ldw	r2,-20(fp)
 28041f0:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
 28041f4:	00002206 	br	2804280 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 28041f8:	e0bffb17 	ldw	r2,-20(fp)
 28041fc:	10c00517 	ldw	r3,20(r2)
 2804200:	00bffc04 	movi	r2,-16
 2804204:	1884703a 	and	r2,r3,r2
 2804208:	10c00054 	ori	r3,r2,1
 280420c:	e0bffb17 	ldw	r2,-20(fp)
 2804210:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
 2804214:	00001a06 	br	2804280 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 2804218:	e0bffb17 	ldw	r2,-20(fp)
 280421c:	10c00517 	ldw	r3,20(r2)
 2804220:	00bffc04 	movi	r2,-16
 2804224:	1884703a 	and	r2,r3,r2
 2804228:	10c000d4 	ori	r3,r2,3
 280422c:	e0bffb17 	ldw	r2,-20(fp)
 2804230:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
 2804234:	00001206 	br	2804280 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 2804238:	e0bffb17 	ldw	r2,-20(fp)
 280423c:	10c00517 	ldw	r3,20(r2)
 2804240:	00bffc04 	movi	r2,-16
 2804244:	1884703a 	and	r2,r3,r2
 2804248:	10c001d4 	ori	r3,r2,7
 280424c:	e0bffb17 	ldw	r2,-20(fp)
 2804250:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
 2804254:	00000a06 	br	2804280 <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 2804258:	e0bffb17 	ldw	r2,-20(fp)
 280425c:	10c00517 	ldw	r3,20(r2)
 2804260:	00bffc04 	movi	r2,-16
 2804264:	1884703a 	and	r2,r3,r2
 2804268:	10c003d4 	ori	r3,r2,15
 280426c:	e0bffb17 	ldw	r2,-20(fp)
 2804270:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
 2804274:	00000206 	br	2804280 <alt_avalon_dma_ioctl+0x270>
  default:
    status = -ENOTTY;
 2804278:	00bff9c4 	movi	r2,-25
 280427c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (!status)
 2804280:	e0bffa17 	ldw	r2,-24(fp)
 2804284:	1004c03a 	cmpne	r2,r2,zero
 2804288:	1000431e 	bne	r2,zero,2804398 <alt_avalon_dma_ioctl+0x388>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
 280428c:	e0bffb17 	ldw	r2,-20(fp)
 2804290:	10800517 	ldw	r2,20(r2)
 2804294:	108003cc 	andi	r2,r2,15
 2804298:	e0bffe15 	stw	r2,-8(fp)
 280429c:	e0fffe17 	ldw	r3,-8(fp)
 28042a0:	18800060 	cmpeqi	r2,r3,1
 28042a4:	10000d1e 	bne	r2,zero,28042dc <alt_avalon_dma_ioctl+0x2cc>
 28042a8:	e0fffe17 	ldw	r3,-8(fp)
 28042ac:	18800070 	cmpltui	r2,r3,1
 28042b0:	1000071e 	bne	r2,zero,28042d0 <alt_avalon_dma_ioctl+0x2c0>
 28042b4:	e0fffe17 	ldw	r3,-8(fp)
 28042b8:	188000e0 	cmpeqi	r2,r3,3
 28042bc:	10000a1e 	bne	r2,zero,28042e8 <alt_avalon_dma_ioctl+0x2d8>
 28042c0:	e0fffe17 	ldw	r3,-8(fp)
 28042c4:	188001e0 	cmpeqi	r2,r3,7
 28042c8:	10000a1e 	bne	r2,zero,28042f4 <alt_avalon_dma_ioctl+0x2e4>
 28042cc:	00000c06 	br	2804300 <alt_avalon_dma_ioctl+0x2f0>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
 28042d0:	00800044 	movi	r2,1
 28042d4:	e0bff915 	stw	r2,-28(fp)
       break;
 28042d8:	00000b06 	br	2804308 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
 28042dc:	00800084 	movi	r2,2
 28042e0:	e0bff915 	stw	r2,-28(fp)
       break;
 28042e4:	00000806 	br	2804308 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
 28042e8:	00800104 	movi	r2,4
 28042ec:	e0bff915 	stw	r2,-28(fp)
       break;
 28042f0:	00000506 	br	2804308 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
 28042f4:	00810004 	movi	r2,1024
 28042f8:	e0bff915 	stw	r2,-28(fp)
       break;
 28042fc:	00000206 	br	2804308 <alt_avalon_dma_ioctl+0x2f8>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
 2804300:	00820004 	movi	r2,2048
 2804304:	e0bff915 	stw	r2,-28(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
 2804308:	e0bffb17 	ldw	r2,-20(fp)
 280430c:	10800517 	ldw	r2,20(r2)
 2804310:	1080080c 	andi	r2,r2,32
 2804314:	1005003a 	cmpeq	r2,r2,zero
 2804318:	1000091e 	bne	r2,zero,2804340 <alt_avalon_dma_ioctl+0x330>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 280431c:	e0bffb17 	ldw	r2,-20(fp)
 2804320:	10800017 	ldw	r2,0(r2)
 2804324:	11000604 	addi	r4,r2,24
 2804328:	e0bff917 	ldw	r2,-28(fp)
 280432c:	10807e14 	ori	r2,r2,504
 2804330:	1007883a 	mov	r3,r2
 2804334:	2005883a 	mov	r2,r4
 2804338:	10c00035 	stwio	r3,0(r2)
 280433c:	00001606 	br	2804398 <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
 2804340:	e0bffb17 	ldw	r2,-20(fp)
 2804344:	10800517 	ldw	r2,20(r2)
 2804348:	1080100c 	andi	r2,r2,64
 280434c:	1005003a 	cmpeq	r2,r2,zero
 2804350:	1000091e 	bne	r2,zero,2804378 <alt_avalon_dma_ioctl+0x368>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 2804354:	e0bffb17 	ldw	r2,-20(fp)
 2804358:	10800017 	ldw	r2,0(r2)
 280435c:	11000604 	addi	r4,r2,24
 2804360:	e0bff917 	ldw	r2,-28(fp)
 2804364:	1080be14 	ori	r2,r2,760
 2804368:	1007883a 	mov	r3,r2
 280436c:	2005883a 	mov	r2,r4
 2804370:	10c00035 	stwio	r3,0(r2)
 2804374:	00000806 	br	2804398 <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 2804378:	e0bffb17 	ldw	r2,-20(fp)
 280437c:	10800017 	ldw	r2,0(r2)
 2804380:	11000604 	addi	r4,r2,24
 2804384:	e0bff917 	ldw	r2,-28(fp)
 2804388:	10803e14 	ori	r2,r2,248
 280438c:	1007883a 	mov	r3,r2
 2804390:	2005883a 	mov	r2,r4
 2804394:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
 2804398:	e0bffa17 	ldw	r2,-24(fp)
 280439c:	e0bfff15 	stw	r2,-4(fp)
 28043a0:	e0bfff17 	ldw	r2,-4(fp)
}
 28043a4:	e037883a 	mov	sp,fp
 28043a8:	df000017 	ldw	fp,0(sp)
 28043ac:	dec00104 	addi	sp,sp,4
 28043b0:	f800283a 	ret

028043b4 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
 28043b4:	defffb04 	addi	sp,sp,-20
 28043b8:	dfc00415 	stw	ra,16(sp)
 28043bc:	df000315 	stw	fp,12(sp)
 28043c0:	df000304 	addi	fp,sp,12
 28043c4:	e13ffd15 	stw	r4,-12(fp)
 28043c8:	e17ffe15 	stw	r5,-8(fp)
 28043cc:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
 28043d0:	e0bffd17 	ldw	r2,-12(fp)
 28043d4:	11000617 	ldw	r4,24(r2)
 28043d8:	e17ffe17 	ldw	r5,-8(fp)
 28043dc:	e1bfff17 	ldw	r6,-4(fp)
 28043e0:	28040100 	call	2804010 <alt_avalon_dma_ioctl>
             req,
             arg);
}
 28043e4:	e037883a 	mov	sp,fp
 28043e8:	dfc00117 	ldw	ra,4(sp)
 28043ec:	df000017 	ldw	fp,0(sp)
 28043f0:	dec00204 	addi	sp,sp,8
 28043f4:	f800283a 	ret

028043f8 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
 28043f8:	defffb04 	addi	sp,sp,-20
 28043fc:	dfc00415 	stw	ra,16(sp)
 2804400:	df000315 	stw	fp,12(sp)
 2804404:	df000304 	addi	fp,sp,12
 2804408:	e13ffd15 	stw	r4,-12(fp)
 280440c:	e17ffe15 	stw	r5,-8(fp)
 2804410:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
 2804414:	e0bffd17 	ldw	r2,-12(fp)
 2804418:	11000617 	ldw	r4,24(r2)
 280441c:	e17ffe17 	ldw	r5,-8(fp)
 2804420:	e1bfff17 	ldw	r6,-4(fp)
 2804424:	28040100 	call	2804010 <alt_avalon_dma_ioctl>
             req,
             arg);
}
 2804428:	e037883a 	mov	sp,fp
 280442c:	dfc00117 	ldw	ra,4(sp)
 2804430:	df000017 	ldw	fp,0(sp)
 2804434:	dec00204 	addi	sp,sp,8
 2804438:	f800283a 	ret

0280443c <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
 280443c:	defff304 	addi	sp,sp,-52
 2804440:	dfc00c15 	stw	ra,48(sp)
 2804444:	df000b15 	stw	fp,44(sp)
 2804448:	df000b04 	addi	fp,sp,44
 280444c:	e13ffb15 	stw	r4,-20(fp)
 2804450:	e17ffc15 	stw	r5,-16(fp)
 2804454:	e1bffd15 	stw	r6,-12(fp)
 2804458:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
 280445c:	e0bffb17 	ldw	r2,-20(fp)
 2804460:	10800617 	ldw	r2,24(r2)
 2804464:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 2804468:	e0bff517 	ldw	r2,-44(fp)
 280446c:	10800517 	ldw	r2,20(r2)
 2804470:	108003cc 	andi	r2,r2,15
 2804474:	e0bff615 	stw	r2,-40(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
 2804478:	e0bffc17 	ldw	r2,-16(fp)
 280447c:	1007883a 	mov	r3,r2
 2804480:	e0bff617 	ldw	r2,-40(fp)
 2804484:	1884703a 	and	r2,r3,r2
 2804488:	1004c03a 	cmpne	r2,r2,zero
 280448c:	1000091e 	bne	r2,zero,28044b4 <alt_avalon_dma_prepare+0x78>
 2804490:	e0fffd17 	ldw	r3,-12(fp)
 2804494:	e0bff617 	ldw	r2,-40(fp)
 2804498:	1884703a 	and	r2,r3,r2
 280449c:	1004c03a 	cmpne	r2,r2,zero
 28044a0:	1000041e 	bne	r2,zero,28044b4 <alt_avalon_dma_prepare+0x78>
 28044a4:	e0bff517 	ldw	r2,-44(fp)
 28044a8:	10c00617 	ldw	r3,24(r2)
 28044ac:	e0bffd17 	ldw	r2,-12(fp)
 28044b0:	1880032e 	bgeu	r3,r2,28044c0 <alt_avalon_dma_prepare+0x84>
     (len > priv->max_length))
  {
    return -EINVAL;
 28044b4:	00bffa84 	movi	r2,-22
 28044b8:	e0bfff15 	stw	r2,-4(fp)
 28044bc:	00002e06 	br	2804578 <alt_avalon_dma_prepare+0x13c>
  }

  start = priv->rx_start;
 28044c0:	e0bff517 	ldw	r2,-44(fp)
 28044c4:	10800317 	ldw	r2,12(r2)
 28044c8:	e0bff915 	stw	r2,-28(fp)
  end   = priv->rx_end;
 28044cc:	e0bff517 	ldw	r2,-44(fp)
 28044d0:	10800417 	ldw	r2,16(r2)
 28044d4:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->rx_buf[end];
 28044d8:	e0bff517 	ldw	r2,-44(fp)
 28044dc:	10c01904 	addi	r3,r2,100
 28044e0:	e0bff817 	ldw	r2,-32(fp)
 28044e4:	1004913a 	slli	r2,r2,4
 28044e8:	1885883a 	add	r2,r3,r2
 28044ec:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 28044f0:	e0bff817 	ldw	r2,-32(fp)
 28044f4:	10800044 	addi	r2,r2,1
 28044f8:	108000cc 	andi	r2,r2,3
 28044fc:	e0bff715 	stw	r2,-36(fp)

  if (next == start)
 2804500:	e0fff717 	ldw	r3,-36(fp)
 2804504:	e0bff917 	ldw	r2,-28(fp)
 2804508:	1880031e 	bne	r3,r2,2804518 <alt_avalon_dma_prepare+0xdc>
  {
    return -ENOSPC;
 280450c:	00bff904 	movi	r2,-28
 2804510:	e0bfff15 	stw	r2,-4(fp)
 2804514:	00001806 	br	2804578 <alt_avalon_dma_prepare+0x13c>
  }

  slot->data   = data;
 2804518:	e0fffa17 	ldw	r3,-24(fp)
 280451c:	e0bffc17 	ldw	r2,-16(fp)
 2804520:	18800015 	stw	r2,0(r3)
  slot->len    = len;
 2804524:	e0fffa17 	ldw	r3,-24(fp)
 2804528:	e0bffd17 	ldw	r2,-12(fp)
 280452c:	18800115 	stw	r2,4(r3)
  slot->done   = done;
 2804530:	e0fffa17 	ldw	r3,-24(fp)
 2804534:	e0bffe17 	ldw	r2,-8(fp)
 2804538:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
 280453c:	e0fffa17 	ldw	r3,-24(fp)
 2804540:	e0800217 	ldw	r2,8(fp)
 2804544:	18800315 	stw	r2,12(r3)

  priv->rx_end = next;
 2804548:	e0fff517 	ldw	r3,-44(fp)
 280454c:	e0bff717 	ldw	r2,-36(fp)
 2804550:	18800415 	stw	r2,16(r3)

  if (!priv->active)
 2804554:	e0bff517 	ldw	r2,-44(fp)
 2804558:	10800817 	ldw	r2,32(r2)
 280455c:	1004c03a 	cmpne	r2,r2,zero
 2804560:	1000041e 	bne	r2,zero,2804574 <alt_avalon_dma_prepare+0x138>
  {
    priv->launch (priv);
 2804564:	e0bff517 	ldw	r2,-44(fp)
 2804568:	10800717 	ldw	r2,28(r2)
 280456c:	e13ff517 	ldw	r4,-44(fp)
 2804570:	103ee83a 	callr	r2
  }

  return 0;
 2804574:	e03fff15 	stw	zero,-4(fp)
 2804578:	e0bfff17 	ldw	r2,-4(fp)
}
 280457c:	e037883a 	mov	sp,fp
 2804580:	dfc00117 	ldw	ra,4(sp)
 2804584:	df000017 	ldw	fp,0(sp)
 2804588:	dec00204 	addi	sp,sp,8
 280458c:	f800283a 	ret

02804590 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
 2804590:	defffa04 	addi	sp,sp,-24
 2804594:	df000515 	stw	fp,20(sp)
 2804598:	df000504 	addi	fp,sp,20
 280459c:	e13ffe15 	stw	r4,-8(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 28045a0:	e0bffe17 	ldw	r2,-8(fp)
 28045a4:	10800617 	ldw	r2,24(r2)
 28045a8:	e0bffd15 	stw	r2,-12(fp)

  start = priv->tx_start;
 28045ac:	e0bffd17 	ldw	r2,-12(fp)
 28045b0:	10800117 	ldw	r2,4(r2)
 28045b4:	e0bffc15 	stw	r2,-16(fp)
  end   = priv->tx_end;
 28045b8:	e0bffd17 	ldw	r2,-12(fp)
 28045bc:	10800217 	ldw	r2,8(r2)
 28045c0:	e0bffb15 	stw	r2,-20(fp)

  return (start > end) ? start - end - 1 :
 28045c4:	e0fffc17 	ldw	r3,-16(fp)
 28045c8:	e0bffb17 	ldw	r2,-20(fp)
 28045cc:	10c0062e 	bgeu	r2,r3,28045e8 <alt_avalon_dma_space+0x58>
 28045d0:	e0fffc17 	ldw	r3,-16(fp)
 28045d4:	e0bffb17 	ldw	r2,-20(fp)
 28045d8:	1885c83a 	sub	r2,r3,r2
 28045dc:	10bfffc4 	addi	r2,r2,-1
 28045e0:	e0bfff15 	stw	r2,-4(fp)
 28045e4:	00000506 	br	28045fc <alt_avalon_dma_space+0x6c>
 28045e8:	e0fffc17 	ldw	r3,-16(fp)
 28045ec:	e0bffb17 	ldw	r2,-20(fp)
 28045f0:	1885c83a 	sub	r2,r3,r2
 28045f4:	108000c4 	addi	r2,r2,3
 28045f8:	e0bfff15 	stw	r2,-4(fp)
 28045fc:	e0bfff17 	ldw	r2,-4(fp)
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
}
 2804600:	e037883a 	mov	sp,fp
 2804604:	df000017 	ldw	fp,0(sp)
 2804608:	dec00104 	addi	sp,sp,4
 280460c:	f800283a 	ret

02804610 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
 2804610:	defff304 	addi	sp,sp,-52
 2804614:	dfc00c15 	stw	ra,48(sp)
 2804618:	df000b15 	stw	fp,44(sp)
 280461c:	df000b04 	addi	fp,sp,44
 2804620:	e13ffb15 	stw	r4,-20(fp)
 2804624:	e17ffc15 	stw	r5,-16(fp)
 2804628:	e1bffd15 	stw	r6,-12(fp)
 280462c:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 2804630:	e0bffb17 	ldw	r2,-20(fp)
 2804634:	10800617 	ldw	r2,24(r2)
 2804638:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 280463c:	e0bff517 	ldw	r2,-44(fp)
 2804640:	10800517 	ldw	r2,20(r2)
 2804644:	108003cc 	andi	r2,r2,15
 2804648:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
 280464c:	e0bffc17 	ldw	r2,-16(fp)
 2804650:	1007883a 	mov	r3,r2
 2804654:	e0bff717 	ldw	r2,-36(fp)
 2804658:	1884703a 	and	r2,r3,r2
 280465c:	1004c03a 	cmpne	r2,r2,zero
 2804660:	1000091e 	bne	r2,zero,2804688 <alt_avalon_dma_send+0x78>
 2804664:	e0fffd17 	ldw	r3,-12(fp)
 2804668:	e0bff717 	ldw	r2,-36(fp)
 280466c:	1884703a 	and	r2,r3,r2
 2804670:	1004c03a 	cmpne	r2,r2,zero
 2804674:	1000041e 	bne	r2,zero,2804688 <alt_avalon_dma_send+0x78>
 2804678:	e0bff517 	ldw	r2,-44(fp)
 280467c:	10c00617 	ldw	r3,24(r2)
 2804680:	e0bffd17 	ldw	r2,-12(fp)
 2804684:	1880032e 	bgeu	r3,r2,2804694 <alt_avalon_dma_send+0x84>
        (len & align_mask)            ||
        (len > priv->max_length))
  {
    return -EINVAL;
 2804688:	00bffa84 	movi	r2,-22
 280468c:	e0bfff15 	stw	r2,-4(fp)
 2804690:	00002e06 	br	280474c <alt_avalon_dma_send+0x13c>
  }

  start = priv->tx_start;
 2804694:	e0bff517 	ldw	r2,-44(fp)
 2804698:	10800117 	ldw	r2,4(r2)
 280469c:	e0bff915 	stw	r2,-28(fp)
  end   = priv->tx_end;
 28046a0:	e0bff517 	ldw	r2,-44(fp)
 28046a4:	10800217 	ldw	r2,8(r2)
 28046a8:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->tx_buf[end];
 28046ac:	e0bff517 	ldw	r2,-44(fp)
 28046b0:	10c00904 	addi	r3,r2,36
 28046b4:	e0bff817 	ldw	r2,-32(fp)
 28046b8:	1004913a 	slli	r2,r2,4
 28046bc:	1885883a 	add	r2,r3,r2
 28046c0:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 28046c4:	e0bff817 	ldw	r2,-32(fp)
 28046c8:	10800044 	addi	r2,r2,1
 28046cc:	108000cc 	andi	r2,r2,3
 28046d0:	e0bff615 	stw	r2,-40(fp)

  if (next == start)
 28046d4:	e0fff617 	ldw	r3,-40(fp)
 28046d8:	e0bff917 	ldw	r2,-28(fp)
 28046dc:	1880031e 	bne	r3,r2,28046ec <alt_avalon_dma_send+0xdc>
  {
    return -ENOSPC;
 28046e0:	00bff904 	movi	r2,-28
 28046e4:	e0bfff15 	stw	r2,-4(fp)
 28046e8:	00001806 	br	280474c <alt_avalon_dma_send+0x13c>
  }

  /* Fill in the descriptor */

  slot->from   = from;
 28046ec:	e0fffa17 	ldw	r3,-24(fp)
 28046f0:	e0bffc17 	ldw	r2,-16(fp)
 28046f4:	18800015 	stw	r2,0(r3)
  slot->len    = len;
 28046f8:	e0fffa17 	ldw	r3,-24(fp)
 28046fc:	e0bffd17 	ldw	r2,-12(fp)
 2804700:	18800115 	stw	r2,4(r3)
  slot->done   = done;
 2804704:	e0fffa17 	ldw	r3,-24(fp)
 2804708:	e0bffe17 	ldw	r2,-8(fp)
 280470c:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
 2804710:	e0fffa17 	ldw	r3,-24(fp)
 2804714:	e0800217 	ldw	r2,8(fp)
 2804718:	18800315 	stw	r2,12(r3)

  priv->tx_end = next;
 280471c:	e0fff517 	ldw	r3,-44(fp)
 2804720:	e0bff617 	ldw	r2,-40(fp)
 2804724:	18800215 	stw	r2,8(r3)

  if (!priv->active)
 2804728:	e0bff517 	ldw	r2,-44(fp)
 280472c:	10800817 	ldw	r2,32(r2)
 2804730:	1004c03a 	cmpne	r2,r2,zero
 2804734:	1000041e 	bne	r2,zero,2804748 <alt_avalon_dma_send+0x138>
  {
    priv->launch (priv);
 2804738:	e0bff517 	ldw	r2,-44(fp)
 280473c:	10800717 	ldw	r2,28(r2)
 2804740:	e13ff517 	ldw	r4,-44(fp)
 2804744:	103ee83a 	callr	r2
  }

  return 0;
 2804748:	e03fff15 	stw	zero,-4(fp)
 280474c:	e0bfff17 	ldw	r2,-4(fp)
}
 2804750:	e037883a 	mov	sp,fp
 2804754:	dfc00117 	ldw	ra,4(sp)
 2804758:	df000017 	ldw	fp,0(sp)
 280475c:	dec00204 	addi	sp,sp,8
 2804760:	f800283a 	ret

02804764 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
 2804764:	defff104 	addi	sp,sp,-60
 2804768:	dfc00e15 	stw	ra,56(sp)
 280476c:	df000d15 	stw	fp,52(sp)
 2804770:	df000d04 	addi	fp,sp,52
 2804774:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
 2804778:	e0bfff17 	ldw	r2,-4(fp)
 280477c:	e0bffe15 	stw	r2,-8(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
 2804780:	e0bffe17 	ldw	r2,-8(fp)
 2804784:	10800517 	ldw	r2,20(r2)
 2804788:	1080080c 	andi	r2,r2,32
 280478c:	e0bff915 	stw	r2,-28(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
 2804790:	e0bffe17 	ldw	r2,-8(fp)
 2804794:	10800517 	ldw	r2,20(r2)
 2804798:	1080100c 	andi	r2,r2,64
 280479c:	e0bff815 	stw	r2,-32(fp)

  tx_start = priv->tx_start;
 28047a0:	e0bffe17 	ldw	r2,-8(fp)
 28047a4:	10800117 	ldw	r2,4(r2)
 28047a8:	e0bffb15 	stw	r2,-20(fp)
  rx_start = priv->rx_start;
 28047ac:	e0bffe17 	ldw	r2,-8(fp)
 28047b0:	10800317 	ldw	r2,12(r2)
 28047b4:	e0bffa15 	stw	r2,-24(fp)

  tx_slot = &priv->tx_buf[tx_start];
 28047b8:	e0bffe17 	ldw	r2,-8(fp)
 28047bc:	10c00904 	addi	r3,r2,36
 28047c0:	e0bffb17 	ldw	r2,-20(fp)
 28047c4:	1004913a 	slli	r2,r2,4
 28047c8:	1885883a 	add	r2,r3,r2
 28047cc:	e0bffd15 	stw	r2,-12(fp)
  rx_slot = &priv->rx_buf[rx_start];
 28047d0:	e0bffe17 	ldw	r2,-8(fp)
 28047d4:	10c01904 	addi	r3,r2,100
 28047d8:	e0bffa17 	ldw	r2,-24(fp)
 28047dc:	1004913a 	slli	r2,r2,4
 28047e0:	1885883a 	add	r2,r3,r2
 28047e4:	e0bffc15 	stw	r2,-16(fp)

  /* Increment the descriptors */

  if (!stream_tx)
 28047e8:	e0bff917 	ldw	r2,-28(fp)
 28047ec:	1004c03a 	cmpne	r2,r2,zero
 28047f0:	1000051e 	bne	r2,zero,2804808 <alt_avalon_dma_irq+0xa4>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 28047f4:	e0bffb17 	ldw	r2,-20(fp)
 28047f8:	10800044 	addi	r2,r2,1
 28047fc:	10c000cc 	andi	r3,r2,3
 2804800:	e0bffe17 	ldw	r2,-8(fp)
 2804804:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
 2804808:	e0bff817 	ldw	r2,-32(fp)
 280480c:	1004c03a 	cmpne	r2,r2,zero
 2804810:	1000051e 	bne	r2,zero,2804828 <alt_avalon_dma_irq+0xc4>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 2804814:	e0bffa17 	ldw	r2,-24(fp)
 2804818:	10800044 	addi	r2,r2,1
 280481c:	10c000cc 	andi	r3,r2,3
 2804820:	e0bffe17 	ldw	r2,-8(fp)
 2804824:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
 2804828:	e0bffe17 	ldw	r2,-8(fp)
 280482c:	10800017 	ldw	r2,0(r2)
 2804830:	10000035 	stwio	zero,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
 2804834:	e0bffe17 	ldw	r2,-8(fp)
 2804838:	10800017 	ldw	r2,0(r2)
 280483c:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
 2804840:	e0bffe17 	ldw	r2,-8(fp)
 2804844:	10800717 	ldw	r2,28(r2)
 2804848:	e13ffe17 	ldw	r4,-8(fp)
 280484c:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
 2804850:	e0bff917 	ldw	r2,-28(fp)
 2804854:	1004c03a 	cmpne	r2,r2,zero
 2804858:	1000151e 	bne	r2,zero,28048b0 <alt_avalon_dma_irq+0x14c>
 280485c:	e0bffd17 	ldw	r2,-12(fp)
 2804860:	10800217 	ldw	r2,8(r2)
 2804864:	1005003a 	cmpeq	r2,r2,zero
 2804868:	1000111e 	bne	r2,zero,28048b0 <alt_avalon_dma_irq+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280486c:	0005303a 	rdctl	r2,status
 2804870:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2804874:	e0fff617 	ldw	r3,-40(fp)
 2804878:	00bfff84 	movi	r2,-2
 280487c:	1884703a 	and	r2,r3,r2
 2804880:	1001703a 	wrctl	status,r2
  
  return context;
 2804884:	e0bff617 	ldw	r2,-40(fp)
  {
    cpu_sr = alt_irq_disable_all();
 2804888:	e0bff715 	stw	r2,-36(fp)
    tx_slot->done (tx_slot->handle);
 280488c:	e0bffd17 	ldw	r2,-12(fp)
 2804890:	10c00217 	ldw	r3,8(r2)
 2804894:	e0bffd17 	ldw	r2,-12(fp)
 2804898:	11000317 	ldw	r4,12(r2)
 280489c:	183ee83a 	callr	r3
 28048a0:	e0bff717 	ldw	r2,-36(fp)
 28048a4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 28048a8:	e0bff517 	ldw	r2,-44(fp)
 28048ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
 28048b0:	e0bff817 	ldw	r2,-32(fp)
 28048b4:	1004c03a 	cmpne	r2,r2,zero
 28048b8:	1000171e 	bne	r2,zero,2804918 <alt_avalon_dma_irq+0x1b4>
 28048bc:	e0bffc17 	ldw	r2,-16(fp)
 28048c0:	10800217 	ldw	r2,8(r2)
 28048c4:	1005003a 	cmpeq	r2,r2,zero
 28048c8:	1000131e 	bne	r2,zero,2804918 <alt_avalon_dma_irq+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 28048cc:	0005303a 	rdctl	r2,status
 28048d0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 28048d4:	e0fff417 	ldw	r3,-48(fp)
 28048d8:	00bfff84 	movi	r2,-2
 28048dc:	1884703a 	and	r2,r3,r2
 28048e0:	1001703a 	wrctl	status,r2
  
  return context;
 28048e4:	e0bff417 	ldw	r2,-48(fp)
  {
    cpu_sr = alt_irq_disable_all();
 28048e8:	e0bff715 	stw	r2,-36(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
 28048ec:	e0bffc17 	ldw	r2,-16(fp)
 28048f0:	10c00217 	ldw	r3,8(r2)
 28048f4:	e0bffc17 	ldw	r2,-16(fp)
 28048f8:	11000317 	ldw	r4,12(r2)
 28048fc:	e0bffc17 	ldw	r2,-16(fp)
 2804900:	11400017 	ldw	r5,0(r2)
 2804904:	183ee83a 	callr	r3
 2804908:	e0bff717 	ldw	r2,-36(fp)
 280490c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2804910:	e0bff317 	ldw	r2,-52(fp)
 2804914:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 2804918:	e037883a 	mov	sp,fp
 280491c:	dfc00117 	ldw	ra,4(sp)
 2804920:	df000017 	ldw	fp,0(sp)
 2804924:	dec00204 	addi	sp,sp,8
 2804928:	f800283a 	ret

0280492c <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
 280492c:	defff904 	addi	sp,sp,-28
 2804930:	dfc00615 	stw	ra,24(sp)
 2804934:	df000515 	stw	fp,20(sp)
 2804938:	df000504 	addi	fp,sp,20
 280493c:	e13ffc15 	stw	r4,-16(fp)
 2804940:	e17ffd15 	stw	r5,-12(fp)
 2804944:	e1bffe15 	stw	r6,-8(fp)
 2804948:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 280494c:	e0bffe17 	ldw	r2,-8(fp)
 2804950:	10800604 	addi	r2,r2,24
 2804954:	1007883a 	mov	r3,r2
 2804958:	00840004 	movi	r2,4096
 280495c:	18800035 	stwio	r2,0(r3)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 2804960:	e0bffe17 	ldw	r2,-8(fp)
 2804964:	10800604 	addi	r2,r2,24
 2804968:	1007883a 	mov	r3,r2
 280496c:	00840004 	movi	r2,4096
 2804970:	18800035 	stwio	r2,0(r3)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
 2804974:	e0bffe17 	ldw	r2,-8(fp)
 2804978:	10800604 	addi	r2,r2,24
 280497c:	1007883a 	mov	r3,r2
 2804980:	00803f04 	movi	r2,252
 2804984:	18800035 	stwio	r2,0(r3)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
 2804988:	e0bffe17 	ldw	r2,-8(fp)
 280498c:	10000035 	stwio	zero,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
 2804990:	e0bffc17 	ldw	r2,-16(fp)
 2804994:	11c00617 	ldw	r7,24(r2)
 2804998:	d8000015 	stw	zero,0(sp)
 280499c:	e13fff17 	ldw	r4,-4(fp)
 28049a0:	e1400217 	ldw	r5,8(fp)
 28049a4:	0180a034 	movhi	r6,640
 28049a8:	3191d904 	addi	r6,r6,18276
 28049ac:	2805bc00 	call	2805bc0 <alt_ic_isr_register>
 28049b0:	1004803a 	cmplt	r2,r2,zero
 28049b4:	1000041e 	bne	r2,zero,28049c8 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
 28049b8:	e13ffc17 	ldw	r4,-16(fp)
 28049bc:	28049dc0 	call	28049dc <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
 28049c0:	e13ffd17 	ldw	r4,-12(fp)
 28049c4:	2804a140 	call	2804a14 <alt_dma_rxchan_reg>
  }
}
 28049c8:	e037883a 	mov	sp,fp
 28049cc:	dfc00117 	ldw	ra,4(sp)
 28049d0:	df000017 	ldw	fp,0(sp)
 28049d4:	dec00204 	addi	sp,sp,8
 28049d8:	f800283a 	ret

028049dc <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
 28049dc:	defffd04 	addi	sp,sp,-12
 28049e0:	dfc00215 	stw	ra,8(sp)
 28049e4:	df000115 	stw	fp,4(sp)
 28049e8:	df000104 	addi	fp,sp,4
 28049ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
 28049f0:	e13fff17 	ldw	r4,-4(fp)
 28049f4:	0140a074 	movhi	r5,641
 28049f8:	2961d004 	addi	r5,r5,-30912
 28049fc:	28057c40 	call	28057c4 <alt_dev_llist_insert>
}
 2804a00:	e037883a 	mov	sp,fp
 2804a04:	dfc00117 	ldw	ra,4(sp)
 2804a08:	df000017 	ldw	fp,0(sp)
 2804a0c:	dec00204 	addi	sp,sp,8
 2804a10:	f800283a 	ret

02804a14 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
 2804a14:	defffd04 	addi	sp,sp,-12
 2804a18:	dfc00215 	stw	ra,8(sp)
 2804a1c:	df000115 	stw	fp,4(sp)
 2804a20:	df000104 	addi	fp,sp,4
 2804a24:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
 2804a28:	e13fff17 	ldw	r4,-4(fp)
 2804a2c:	0140a074 	movhi	r5,641
 2804a30:	2961ce04 	addi	r5,r5,-30920
 2804a34:	28057c40 	call	28057c4 <alt_dev_llist_insert>
}
 2804a38:	e037883a 	mov	sp,fp
 2804a3c:	dfc00117 	ldw	ra,4(sp)
 2804a40:	df000017 	ldw	fp,0(sp)
 2804a44:	dec00204 	addi	sp,sp,8
 2804a48:	f800283a 	ret

02804a4c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2804a4c:	defffa04 	addi	sp,sp,-24
 2804a50:	dfc00515 	stw	ra,20(sp)
 2804a54:	df000415 	stw	fp,16(sp)
 2804a58:	df000404 	addi	fp,sp,16
 2804a5c:	e13ffd15 	stw	r4,-12(fp)
 2804a60:	e17ffe15 	stw	r5,-8(fp)
 2804a64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2804a68:	e0bffd17 	ldw	r2,-12(fp)
 2804a6c:	10800017 	ldw	r2,0(r2)
 2804a70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2804a74:	e0bffc17 	ldw	r2,-16(fp)
 2804a78:	11000a04 	addi	r4,r2,40
 2804a7c:	e0bffd17 	ldw	r2,-12(fp)
 2804a80:	11c00217 	ldw	r7,8(r2)
 2804a84:	e17ffe17 	ldw	r5,-8(fp)
 2804a88:	e1bfff17 	ldw	r6,-4(fp)
 2804a8c:	28050940 	call	2805094 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2804a90:	e037883a 	mov	sp,fp
 2804a94:	dfc00117 	ldw	ra,4(sp)
 2804a98:	df000017 	ldw	fp,0(sp)
 2804a9c:	dec00204 	addi	sp,sp,8
 2804aa0:	f800283a 	ret

02804aa4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2804aa4:	defffa04 	addi	sp,sp,-24
 2804aa8:	dfc00515 	stw	ra,20(sp)
 2804aac:	df000415 	stw	fp,16(sp)
 2804ab0:	df000404 	addi	fp,sp,16
 2804ab4:	e13ffd15 	stw	r4,-12(fp)
 2804ab8:	e17ffe15 	stw	r5,-8(fp)
 2804abc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2804ac0:	e0bffd17 	ldw	r2,-12(fp)
 2804ac4:	10800017 	ldw	r2,0(r2)
 2804ac8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2804acc:	e0bffc17 	ldw	r2,-16(fp)
 2804ad0:	11000a04 	addi	r4,r2,40
 2804ad4:	e0bffd17 	ldw	r2,-12(fp)
 2804ad8:	11c00217 	ldw	r7,8(r2)
 2804adc:	e17ffe17 	ldw	r5,-8(fp)
 2804ae0:	e1bfff17 	ldw	r6,-4(fp)
 2804ae4:	28052b80 	call	28052b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2804ae8:	e037883a 	mov	sp,fp
 2804aec:	dfc00117 	ldw	ra,4(sp)
 2804af0:	df000017 	ldw	fp,0(sp)
 2804af4:	dec00204 	addi	sp,sp,8
 2804af8:	f800283a 	ret

02804afc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2804afc:	defffc04 	addi	sp,sp,-16
 2804b00:	dfc00315 	stw	ra,12(sp)
 2804b04:	df000215 	stw	fp,8(sp)
 2804b08:	df000204 	addi	fp,sp,8
 2804b0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2804b10:	e0bfff17 	ldw	r2,-4(fp)
 2804b14:	10800017 	ldw	r2,0(r2)
 2804b18:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2804b1c:	e0bffe17 	ldw	r2,-8(fp)
 2804b20:	11000a04 	addi	r4,r2,40
 2804b24:	e0bfff17 	ldw	r2,-4(fp)
 2804b28:	11400217 	ldw	r5,8(r2)
 2804b2c:	2804f2c0 	call	2804f2c <altera_avalon_jtag_uart_close>
}
 2804b30:	e037883a 	mov	sp,fp
 2804b34:	dfc00117 	ldw	ra,4(sp)
 2804b38:	df000017 	ldw	fp,0(sp)
 2804b3c:	dec00204 	addi	sp,sp,8
 2804b40:	f800283a 	ret

02804b44 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2804b44:	defffa04 	addi	sp,sp,-24
 2804b48:	dfc00515 	stw	ra,20(sp)
 2804b4c:	df000415 	stw	fp,16(sp)
 2804b50:	df000404 	addi	fp,sp,16
 2804b54:	e13ffd15 	stw	r4,-12(fp)
 2804b58:	e17ffe15 	stw	r5,-8(fp)
 2804b5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2804b60:	e0bffd17 	ldw	r2,-12(fp)
 2804b64:	10800017 	ldw	r2,0(r2)
 2804b68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2804b6c:	e0bffc17 	ldw	r2,-16(fp)
 2804b70:	11000a04 	addi	r4,r2,40
 2804b74:	e17ffe17 	ldw	r5,-8(fp)
 2804b78:	e1bfff17 	ldw	r6,-4(fp)
 2804b7c:	2804fa00 	call	2804fa0 <altera_avalon_jtag_uart_ioctl>
}
 2804b80:	e037883a 	mov	sp,fp
 2804b84:	dfc00117 	ldw	ra,4(sp)
 2804b88:	df000017 	ldw	fp,0(sp)
 2804b8c:	dec00204 	addi	sp,sp,8
 2804b90:	f800283a 	ret

02804b94 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2804b94:	defffa04 	addi	sp,sp,-24
 2804b98:	dfc00515 	stw	ra,20(sp)
 2804b9c:	df000415 	stw	fp,16(sp)
 2804ba0:	df000404 	addi	fp,sp,16
 2804ba4:	e13ffd15 	stw	r4,-12(fp)
 2804ba8:	e17ffe15 	stw	r5,-8(fp)
 2804bac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2804bb0:	e0fffd17 	ldw	r3,-12(fp)
 2804bb4:	00800044 	movi	r2,1
 2804bb8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2804bbc:	e0bffd17 	ldw	r2,-12(fp)
 2804bc0:	10800017 	ldw	r2,0(r2)
 2804bc4:	11000104 	addi	r4,r2,4
 2804bc8:	e0bffd17 	ldw	r2,-12(fp)
 2804bcc:	10800817 	ldw	r2,32(r2)
 2804bd0:	1007883a 	mov	r3,r2
 2804bd4:	2005883a 	mov	r2,r4
 2804bd8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2804bdc:	e13ffe17 	ldw	r4,-8(fp)
 2804be0:	e17fff17 	ldw	r5,-4(fp)
 2804be4:	d8000015 	stw	zero,0(sp)
 2804be8:	0180a034 	movhi	r6,640
 2804bec:	31931504 	addi	r6,r6,19540
 2804bf0:	e1fffd17 	ldw	r7,-12(fp)
 2804bf4:	2805bc00 	call	2805bc0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2804bf8:	e0bffd17 	ldw	r2,-12(fp)
 2804bfc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2804c00:	e0bffd17 	ldw	r2,-12(fp)
 2804c04:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2804c08:	0080a074 	movhi	r2,641
 2804c0c:	10a8ac04 	addi	r2,r2,-23888
 2804c10:	10800017 	ldw	r2,0(r2)
 2804c14:	100b883a 	mov	r5,r2
 2804c18:	0180a034 	movhi	r6,640
 2804c1c:	31939f04 	addi	r6,r6,20092
 2804c20:	e1fffd17 	ldw	r7,-12(fp)
 2804c24:	28054f80 	call	28054f8 <alt_alarm_start>
 2804c28:	1004403a 	cmpge	r2,r2,zero
 2804c2c:	1000041e 	bne	r2,zero,2804c40 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2804c30:	e0fffd17 	ldw	r3,-12(fp)
 2804c34:	00a00034 	movhi	r2,32768
 2804c38:	10bfffc4 	addi	r2,r2,-1
 2804c3c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2804c40:	e037883a 	mov	sp,fp
 2804c44:	dfc00117 	ldw	ra,4(sp)
 2804c48:	df000017 	ldw	fp,0(sp)
 2804c4c:	dec00204 	addi	sp,sp,8
 2804c50:	f800283a 	ret

02804c54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2804c54:	defff804 	addi	sp,sp,-32
 2804c58:	df000715 	stw	fp,28(sp)
 2804c5c:	df000704 	addi	fp,sp,28
 2804c60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2804c64:	e0bfff17 	ldw	r2,-4(fp)
 2804c68:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 2804c6c:	e0bffe17 	ldw	r2,-8(fp)
 2804c70:	10800017 	ldw	r2,0(r2)
 2804c74:	e0bffd15 	stw	r2,-12(fp)
 2804c78:	00000006 	br	2804c7c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2804c7c:	e0bffd17 	ldw	r2,-12(fp)
 2804c80:	10800104 	addi	r2,r2,4
 2804c84:	10800037 	ldwio	r2,0(r2)
 2804c88:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2804c8c:	e0bffc17 	ldw	r2,-16(fp)
 2804c90:	1080c00c 	andi	r2,r2,768
 2804c94:	1005003a 	cmpeq	r2,r2,zero
 2804c98:	1000741e 	bne	r2,zero,2804e6c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2804c9c:	e0bffc17 	ldw	r2,-16(fp)
 2804ca0:	1080400c 	andi	r2,r2,256
 2804ca4:	1005003a 	cmpeq	r2,r2,zero
 2804ca8:	1000351e 	bne	r2,zero,2804d80 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2804cac:	00800074 	movhi	r2,1
 2804cb0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2804cb4:	e0bffe17 	ldw	r2,-8(fp)
 2804cb8:	10800a17 	ldw	r2,40(r2)
 2804cbc:	10800044 	addi	r2,r2,1
 2804cc0:	1081ffcc 	andi	r2,r2,2047
 2804cc4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 2804cc8:	e0bffe17 	ldw	r2,-8(fp)
 2804ccc:	10c00b17 	ldw	r3,44(r2)
 2804cd0:	e0bffa17 	ldw	r2,-24(fp)
 2804cd4:	18801626 	beq	r3,r2,2804d30 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2804cd8:	e0bffd17 	ldw	r2,-12(fp)
 2804cdc:	10800037 	ldwio	r2,0(r2)
 2804ce0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2804ce4:	e0bffb17 	ldw	r2,-20(fp)
 2804ce8:	10a0000c 	andi	r2,r2,32768
 2804cec:	1005003a 	cmpeq	r2,r2,zero
 2804cf0:	10000f1e 	bne	r2,zero,2804d30 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2804cf4:	e0bffe17 	ldw	r2,-8(fp)
 2804cf8:	10c00a17 	ldw	r3,40(r2)
 2804cfc:	e0bffb17 	ldw	r2,-20(fp)
 2804d00:	1009883a 	mov	r4,r2
 2804d04:	e0bffe17 	ldw	r2,-8(fp)
 2804d08:	1885883a 	add	r2,r3,r2
 2804d0c:	10800e04 	addi	r2,r2,56
 2804d10:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2804d14:	e0bffe17 	ldw	r2,-8(fp)
 2804d18:	10800a17 	ldw	r2,40(r2)
 2804d1c:	10800044 	addi	r2,r2,1
 2804d20:	10c1ffcc 	andi	r3,r2,2047
 2804d24:	e0bffe17 	ldw	r2,-8(fp)
 2804d28:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2804d2c:	003fe106 	br	2804cb4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2804d30:	e0bffb17 	ldw	r2,-20(fp)
 2804d34:	10bfffec 	andhi	r2,r2,65535
 2804d38:	1005003a 	cmpeq	r2,r2,zero
 2804d3c:	1000101e 	bne	r2,zero,2804d80 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2804d40:	e0bffe17 	ldw	r2,-8(fp)
 2804d44:	10c00817 	ldw	r3,32(r2)
 2804d48:	00bfff84 	movi	r2,-2
 2804d4c:	1886703a 	and	r3,r3,r2
 2804d50:	e0bffe17 	ldw	r2,-8(fp)
 2804d54:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2804d58:	e0bffd17 	ldw	r2,-12(fp)
 2804d5c:	11000104 	addi	r4,r2,4
 2804d60:	e0bffe17 	ldw	r2,-8(fp)
 2804d64:	10800817 	ldw	r2,32(r2)
 2804d68:	1007883a 	mov	r3,r2
 2804d6c:	2005883a 	mov	r2,r4
 2804d70:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2804d74:	e0bffd17 	ldw	r2,-12(fp)
 2804d78:	10800104 	addi	r2,r2,4
 2804d7c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2804d80:	e0bffc17 	ldw	r2,-16(fp)
 2804d84:	1080800c 	andi	r2,r2,512
 2804d88:	1005003a 	cmpeq	r2,r2,zero
 2804d8c:	103fbb1e 	bne	r2,zero,2804c7c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2804d90:	e0bffc17 	ldw	r2,-16(fp)
 2804d94:	10bfffec 	andhi	r2,r2,65535
 2804d98:	1004d43a 	srli	r2,r2,16
 2804d9c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2804da0:	00001506 	br	2804df8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2804da4:	e13ffd17 	ldw	r4,-12(fp)
 2804da8:	e0bffe17 	ldw	r2,-8(fp)
 2804dac:	10c00d17 	ldw	r3,52(r2)
 2804db0:	e0bffe17 	ldw	r2,-8(fp)
 2804db4:	1885883a 	add	r2,r3,r2
 2804db8:	10820e04 	addi	r2,r2,2104
 2804dbc:	10800003 	ldbu	r2,0(r2)
 2804dc0:	10c03fcc 	andi	r3,r2,255
 2804dc4:	18c0201c 	xori	r3,r3,128
 2804dc8:	18ffe004 	addi	r3,r3,-128
 2804dcc:	2005883a 	mov	r2,r4
 2804dd0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2804dd4:	e0bffe17 	ldw	r2,-8(fp)
 2804dd8:	10800d17 	ldw	r2,52(r2)
 2804ddc:	10800044 	addi	r2,r2,1
 2804de0:	10c1ffcc 	andi	r3,r2,2047
 2804de4:	e0bffe17 	ldw	r2,-8(fp)
 2804de8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2804dec:	e0bff917 	ldw	r2,-28(fp)
 2804df0:	10bfffc4 	addi	r2,r2,-1
 2804df4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2804df8:	e0bff917 	ldw	r2,-28(fp)
 2804dfc:	1005003a 	cmpeq	r2,r2,zero
 2804e00:	1000051e 	bne	r2,zero,2804e18 <altera_avalon_jtag_uart_irq+0x1c4>
 2804e04:	e0bffe17 	ldw	r2,-8(fp)
 2804e08:	10c00d17 	ldw	r3,52(r2)
 2804e0c:	e0bffe17 	ldw	r2,-8(fp)
 2804e10:	10800c17 	ldw	r2,48(r2)
 2804e14:	18bfe31e 	bne	r3,r2,2804da4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2804e18:	e0bff917 	ldw	r2,-28(fp)
 2804e1c:	1005003a 	cmpeq	r2,r2,zero
 2804e20:	103f961e 	bne	r2,zero,2804c7c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2804e24:	e0bffe17 	ldw	r2,-8(fp)
 2804e28:	10c00817 	ldw	r3,32(r2)
 2804e2c:	00bfff44 	movi	r2,-3
 2804e30:	1886703a 	and	r3,r3,r2
 2804e34:	e0bffe17 	ldw	r2,-8(fp)
 2804e38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2804e3c:	e0bffe17 	ldw	r2,-8(fp)
 2804e40:	10800017 	ldw	r2,0(r2)
 2804e44:	11000104 	addi	r4,r2,4
 2804e48:	e0bffe17 	ldw	r2,-8(fp)
 2804e4c:	10800817 	ldw	r2,32(r2)
 2804e50:	1007883a 	mov	r3,r2
 2804e54:	2005883a 	mov	r2,r4
 2804e58:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2804e5c:	e0bffd17 	ldw	r2,-12(fp)
 2804e60:	10800104 	addi	r2,r2,4
 2804e64:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2804e68:	003f8406 	br	2804c7c <altera_avalon_jtag_uart_irq+0x28>
}
 2804e6c:	e037883a 	mov	sp,fp
 2804e70:	df000017 	ldw	fp,0(sp)
 2804e74:	dec00104 	addi	sp,sp,4
 2804e78:	f800283a 	ret

02804e7c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2804e7c:	defffc04 	addi	sp,sp,-16
 2804e80:	df000315 	stw	fp,12(sp)
 2804e84:	df000304 	addi	fp,sp,12
 2804e88:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2804e8c:	e0bfff17 	ldw	r2,-4(fp)
 2804e90:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2804e94:	e0bffe17 	ldw	r2,-8(fp)
 2804e98:	10800017 	ldw	r2,0(r2)
 2804e9c:	10800104 	addi	r2,r2,4
 2804ea0:	10800037 	ldwio	r2,0(r2)
 2804ea4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2804ea8:	e0bffd17 	ldw	r2,-12(fp)
 2804eac:	1081000c 	andi	r2,r2,1024
 2804eb0:	1005003a 	cmpeq	r2,r2,zero
 2804eb4:	10000c1e 	bne	r2,zero,2804ee8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2804eb8:	e0bffe17 	ldw	r2,-8(fp)
 2804ebc:	10800017 	ldw	r2,0(r2)
 2804ec0:	11000104 	addi	r4,r2,4
 2804ec4:	e0bffe17 	ldw	r2,-8(fp)
 2804ec8:	10800817 	ldw	r2,32(r2)
 2804ecc:	10810014 	ori	r2,r2,1024
 2804ed0:	1007883a 	mov	r3,r2
 2804ed4:	2005883a 	mov	r2,r4
 2804ed8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2804edc:	e0bffe17 	ldw	r2,-8(fp)
 2804ee0:	10000915 	stw	zero,36(r2)
 2804ee4:	00000a06 	br	2804f10 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2804ee8:	e0bffe17 	ldw	r2,-8(fp)
 2804eec:	10c00917 	ldw	r3,36(r2)
 2804ef0:	00a00034 	movhi	r2,32768
 2804ef4:	10bfff04 	addi	r2,r2,-4
 2804ef8:	10c00536 	bltu	r2,r3,2804f10 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 2804efc:	e0bffe17 	ldw	r2,-8(fp)
 2804f00:	10800917 	ldw	r2,36(r2)
 2804f04:	10c00044 	addi	r3,r2,1
 2804f08:	e0bffe17 	ldw	r2,-8(fp)
 2804f0c:	10c00915 	stw	r3,36(r2)
 2804f10:	0080a074 	movhi	r2,641
 2804f14:	10a8ac04 	addi	r2,r2,-23888
 2804f18:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2804f1c:	e037883a 	mov	sp,fp
 2804f20:	df000017 	ldw	fp,0(sp)
 2804f24:	dec00104 	addi	sp,sp,4
 2804f28:	f800283a 	ret

02804f2c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2804f2c:	defffc04 	addi	sp,sp,-16
 2804f30:	df000315 	stw	fp,12(sp)
 2804f34:	df000304 	addi	fp,sp,12
 2804f38:	e13ffd15 	stw	r4,-12(fp)
 2804f3c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2804f40:	00000706 	br	2804f60 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2804f44:	e0bffe17 	ldw	r2,-8(fp)
 2804f48:	1090000c 	andi	r2,r2,16384
 2804f4c:	1005003a 	cmpeq	r2,r2,zero
 2804f50:	1000031e 	bne	r2,zero,2804f60 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 2804f54:	00bffd44 	movi	r2,-11
 2804f58:	e0bfff15 	stw	r2,-4(fp)
 2804f5c:	00000b06 	br	2804f8c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2804f60:	e0bffd17 	ldw	r2,-12(fp)
 2804f64:	10c00d17 	ldw	r3,52(r2)
 2804f68:	e0bffd17 	ldw	r2,-12(fp)
 2804f6c:	10800c17 	ldw	r2,48(r2)
 2804f70:	18800526 	beq	r3,r2,2804f88 <altera_avalon_jtag_uart_close+0x5c>
 2804f74:	e0bffd17 	ldw	r2,-12(fp)
 2804f78:	10c00917 	ldw	r3,36(r2)
 2804f7c:	e0bffd17 	ldw	r2,-12(fp)
 2804f80:	10800117 	ldw	r2,4(r2)
 2804f84:	18bfef36 	bltu	r3,r2,2804f44 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2804f88:	e03fff15 	stw	zero,-4(fp)
 2804f8c:	e0bfff17 	ldw	r2,-4(fp)
}
 2804f90:	e037883a 	mov	sp,fp
 2804f94:	df000017 	ldw	fp,0(sp)
 2804f98:	dec00104 	addi	sp,sp,4
 2804f9c:	f800283a 	ret

02804fa0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2804fa0:	defff804 	addi	sp,sp,-32
 2804fa4:	df000715 	stw	fp,28(sp)
 2804fa8:	df000704 	addi	fp,sp,28
 2804fac:	e13ffb15 	stw	r4,-20(fp)
 2804fb0:	e17ffc15 	stw	r5,-16(fp)
 2804fb4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 2804fb8:	00bff9c4 	movi	r2,-25
 2804fbc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 2804fc0:	e0bffc17 	ldw	r2,-16(fp)
 2804fc4:	e0bfff15 	stw	r2,-4(fp)
 2804fc8:	e0ffff17 	ldw	r3,-4(fp)
 2804fcc:	189a8060 	cmpeqi	r2,r3,27137
 2804fd0:	1000041e 	bne	r2,zero,2804fe4 <altera_avalon_jtag_uart_ioctl+0x44>
 2804fd4:	e0ffff17 	ldw	r3,-4(fp)
 2804fd8:	189a80a0 	cmpeqi	r2,r3,27138
 2804fdc:	10001b1e 	bne	r2,zero,280504c <altera_avalon_jtag_uart_ioctl+0xac>
 2804fe0:	00002706 	br	2805080 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2804fe4:	e0bffb17 	ldw	r2,-20(fp)
 2804fe8:	10c00117 	ldw	r3,4(r2)
 2804fec:	00a00034 	movhi	r2,32768
 2804ff0:	10bfffc4 	addi	r2,r2,-1
 2804ff4:	18802226 	beq	r3,r2,2805080 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 2804ff8:	e0bffd17 	ldw	r2,-12(fp)
 2804ffc:	10800017 	ldw	r2,0(r2)
 2805000:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2805004:	e0bff917 	ldw	r2,-28(fp)
 2805008:	10800090 	cmplti	r2,r2,2
 280500c:	1000071e 	bne	r2,zero,280502c <altera_avalon_jtag_uart_ioctl+0x8c>
 2805010:	e0fff917 	ldw	r3,-28(fp)
 2805014:	00a00034 	movhi	r2,32768
 2805018:	10bfffc4 	addi	r2,r2,-1
 280501c:	18800326 	beq	r3,r2,280502c <altera_avalon_jtag_uart_ioctl+0x8c>
 2805020:	e0bff917 	ldw	r2,-28(fp)
 2805024:	e0bffe15 	stw	r2,-8(fp)
 2805028:	00000306 	br	2805038 <altera_avalon_jtag_uart_ioctl+0x98>
 280502c:	00e00034 	movhi	r3,32768
 2805030:	18ffff84 	addi	r3,r3,-2
 2805034:	e0fffe15 	stw	r3,-8(fp)
 2805038:	e0bffb17 	ldw	r2,-20(fp)
 280503c:	e0fffe17 	ldw	r3,-8(fp)
 2805040:	10c00115 	stw	r3,4(r2)
      rc = 0;
 2805044:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 2805048:	00000d06 	br	2805080 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 280504c:	e0bffb17 	ldw	r2,-20(fp)
 2805050:	10c00117 	ldw	r3,4(r2)
 2805054:	00a00034 	movhi	r2,32768
 2805058:	10bfffc4 	addi	r2,r2,-1
 280505c:	18800826 	beq	r3,r2,2805080 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2805060:	e13ffd17 	ldw	r4,-12(fp)
 2805064:	e0bffb17 	ldw	r2,-20(fp)
 2805068:	10c00917 	ldw	r3,36(r2)
 280506c:	e0bffb17 	ldw	r2,-20(fp)
 2805070:	10800117 	ldw	r2,4(r2)
 2805074:	1885803a 	cmpltu	r2,r3,r2
 2805078:	20800015 	stw	r2,0(r4)
      rc = 0;
 280507c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 2805080:	e0bffa17 	ldw	r2,-24(fp)
}
 2805084:	e037883a 	mov	sp,fp
 2805088:	df000017 	ldw	fp,0(sp)
 280508c:	dec00104 	addi	sp,sp,4
 2805090:	f800283a 	ret

02805094 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2805094:	defff204 	addi	sp,sp,-56
 2805098:	dfc00d15 	stw	ra,52(sp)
 280509c:	df000c15 	stw	fp,48(sp)
 28050a0:	df000c04 	addi	fp,sp,48
 28050a4:	e13ffb15 	stw	r4,-20(fp)
 28050a8:	e17ffc15 	stw	r5,-16(fp)
 28050ac:	e1bffd15 	stw	r6,-12(fp)
 28050b0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 28050b4:	e0bffc17 	ldw	r2,-16(fp)
 28050b8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 28050bc:	00004806 	br	28051e0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 28050c0:	e0bffb17 	ldw	r2,-20(fp)
 28050c4:	10800a17 	ldw	r2,40(r2)
 28050c8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 28050cc:	e0bffb17 	ldw	r2,-20(fp)
 28050d0:	10800b17 	ldw	r2,44(r2)
 28050d4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 28050d8:	e0fff717 	ldw	r3,-36(fp)
 28050dc:	e0bff617 	ldw	r2,-40(fp)
 28050e0:	18800536 	bltu	r3,r2,28050f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 28050e4:	e0bff717 	ldw	r2,-36(fp)
 28050e8:	e0fff617 	ldw	r3,-40(fp)
 28050ec:	10c5c83a 	sub	r2,r2,r3
 28050f0:	e0bff815 	stw	r2,-32(fp)
 28050f4:	00000406 	br	2805108 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 28050f8:	00820004 	movi	r2,2048
 28050fc:	e0fff617 	ldw	r3,-40(fp)
 2805100:	10c5c83a 	sub	r2,r2,r3
 2805104:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2805108:	e0bff817 	ldw	r2,-32(fp)
 280510c:	1005003a 	cmpeq	r2,r2,zero
 2805110:	10001f1e 	bne	r2,zero,2805190 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 2805114:	e0fffd17 	ldw	r3,-12(fp)
 2805118:	e0bff817 	ldw	r2,-32(fp)
 280511c:	1880022e 	bgeu	r3,r2,2805128 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2805120:	e0bffd17 	ldw	r2,-12(fp)
 2805124:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2805128:	e0bffb17 	ldw	r2,-20(fp)
 280512c:	10c00e04 	addi	r3,r2,56
 2805130:	e0bff617 	ldw	r2,-40(fp)
 2805134:	1887883a 	add	r3,r3,r2
 2805138:	e0bffa17 	ldw	r2,-24(fp)
 280513c:	1009883a 	mov	r4,r2
 2805140:	180b883a 	mov	r5,r3
 2805144:	e1bff817 	ldw	r6,-32(fp)
 2805148:	28015d00 	call	28015d0 <memcpy>
      ptr   += n;
 280514c:	e0fff817 	ldw	r3,-32(fp)
 2805150:	e0bffa17 	ldw	r2,-24(fp)
 2805154:	10c5883a 	add	r2,r2,r3
 2805158:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 280515c:	e0fffd17 	ldw	r3,-12(fp)
 2805160:	e0bff817 	ldw	r2,-32(fp)
 2805164:	1885c83a 	sub	r2,r3,r2
 2805168:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 280516c:	e0fff617 	ldw	r3,-40(fp)
 2805170:	e0bff817 	ldw	r2,-32(fp)
 2805174:	1885883a 	add	r2,r3,r2
 2805178:	10c1ffcc 	andi	r3,r2,2047
 280517c:	e0bffb17 	ldw	r2,-20(fp)
 2805180:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2805184:	e0bffd17 	ldw	r2,-12(fp)
 2805188:	10800048 	cmpgei	r2,r2,1
 280518c:	103fcc1e 	bne	r2,zero,28050c0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 2805190:	e0fffa17 	ldw	r3,-24(fp)
 2805194:	e0bffc17 	ldw	r2,-16(fp)
 2805198:	1880141e 	bne	r3,r2,28051ec <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 280519c:	e0bffe17 	ldw	r2,-8(fp)
 28051a0:	1090000c 	andi	r2,r2,16384
 28051a4:	1004c03a 	cmpne	r2,r2,zero
 28051a8:	1000101e 	bne	r2,zero,28051ec <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 28051ac:	e0bffb17 	ldw	r2,-20(fp)
 28051b0:	10c00a17 	ldw	r3,40(r2)
 28051b4:	e0bff717 	ldw	r2,-36(fp)
 28051b8:	1880051e 	bne	r3,r2,28051d0 <altera_avalon_jtag_uart_read+0x13c>
 28051bc:	e0bffb17 	ldw	r2,-20(fp)
 28051c0:	10c00917 	ldw	r3,36(r2)
 28051c4:	e0bffb17 	ldw	r2,-20(fp)
 28051c8:	10800117 	ldw	r2,4(r2)
 28051cc:	18bff736 	bltu	r3,r2,28051ac <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 28051d0:	e0bffb17 	ldw	r2,-20(fp)
 28051d4:	10c00a17 	ldw	r3,40(r2)
 28051d8:	e0bff717 	ldw	r2,-36(fp)
 28051dc:	18800326 	beq	r3,r2,28051ec <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 28051e0:	e0bffd17 	ldw	r2,-12(fp)
 28051e4:	10800048 	cmpgei	r2,r2,1
 28051e8:	103fb51e 	bne	r2,zero,28050c0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 28051ec:	e0fffa17 	ldw	r3,-24(fp)
 28051f0:	e0bffc17 	ldw	r2,-16(fp)
 28051f4:	18801926 	beq	r3,r2,280525c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 28051f8:	0005303a 	rdctl	r2,status
 28051fc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2805200:	e0fff517 	ldw	r3,-44(fp)
 2805204:	00bfff84 	movi	r2,-2
 2805208:	1884703a 	and	r2,r3,r2
 280520c:	1001703a 	wrctl	status,r2
  
  return context;
 2805210:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2805214:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2805218:	e0bffb17 	ldw	r2,-20(fp)
 280521c:	10800817 	ldw	r2,32(r2)
 2805220:	10c00054 	ori	r3,r2,1
 2805224:	e0bffb17 	ldw	r2,-20(fp)
 2805228:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 280522c:	e0bffb17 	ldw	r2,-20(fp)
 2805230:	10800017 	ldw	r2,0(r2)
 2805234:	11000104 	addi	r4,r2,4
 2805238:	e0bffb17 	ldw	r2,-20(fp)
 280523c:	10800817 	ldw	r2,32(r2)
 2805240:	1007883a 	mov	r3,r2
 2805244:	2005883a 	mov	r2,r4
 2805248:	10c00035 	stwio	r3,0(r2)
 280524c:	e0bff917 	ldw	r2,-28(fp)
 2805250:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2805254:	e0bff417 	ldw	r2,-48(fp)
 2805258:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 280525c:	e0fffa17 	ldw	r3,-24(fp)
 2805260:	e0bffc17 	ldw	r2,-16(fp)
 2805264:	18800526 	beq	r3,r2,280527c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 2805268:	e0fffa17 	ldw	r3,-24(fp)
 280526c:	e0bffc17 	ldw	r2,-16(fp)
 2805270:	1887c83a 	sub	r3,r3,r2
 2805274:	e0ffff15 	stw	r3,-4(fp)
 2805278:	00000906 	br	28052a0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 280527c:	e0bffe17 	ldw	r2,-8(fp)
 2805280:	1090000c 	andi	r2,r2,16384
 2805284:	1005003a 	cmpeq	r2,r2,zero
 2805288:	1000031e 	bne	r2,zero,2805298 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 280528c:	00bffd44 	movi	r2,-11
 2805290:	e0bfff15 	stw	r2,-4(fp)
 2805294:	00000206 	br	28052a0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 2805298:	00bffec4 	movi	r2,-5
 280529c:	e0bfff15 	stw	r2,-4(fp)
 28052a0:	e0bfff17 	ldw	r2,-4(fp)
}
 28052a4:	e037883a 	mov	sp,fp
 28052a8:	dfc00117 	ldw	ra,4(sp)
 28052ac:	df000017 	ldw	fp,0(sp)
 28052b0:	dec00204 	addi	sp,sp,8
 28052b4:	f800283a 	ret

028052b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 28052b8:	defff204 	addi	sp,sp,-56
 28052bc:	dfc00d15 	stw	ra,52(sp)
 28052c0:	df000c15 	stw	fp,48(sp)
 28052c4:	df000c04 	addi	fp,sp,48
 28052c8:	e13ffb15 	stw	r4,-20(fp)
 28052cc:	e17ffc15 	stw	r5,-16(fp)
 28052d0:	e1bffd15 	stw	r6,-12(fp)
 28052d4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 28052d8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 28052dc:	e0bffc17 	ldw	r2,-16(fp)
 28052e0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 28052e4:	00003a06 	br	28053d0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 28052e8:	e0bffb17 	ldw	r2,-20(fp)
 28052ec:	10800c17 	ldw	r2,48(r2)
 28052f0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 28052f4:	e0bffb17 	ldw	r2,-20(fp)
 28052f8:	10800d17 	ldw	r2,52(r2)
 28052fc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 2805300:	e0fffa17 	ldw	r3,-24(fp)
 2805304:	e0bff917 	ldw	r2,-28(fp)
 2805308:	1880062e 	bgeu	r3,r2,2805324 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 280530c:	e0fff917 	ldw	r3,-28(fp)
 2805310:	e0bffa17 	ldw	r2,-24(fp)
 2805314:	1885c83a 	sub	r2,r3,r2
 2805318:	10bfffc4 	addi	r2,r2,-1
 280531c:	e0bff815 	stw	r2,-32(fp)
 2805320:	00000c06 	br	2805354 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 2805324:	e0bff917 	ldw	r2,-28(fp)
 2805328:	1005003a 	cmpeq	r2,r2,zero
 280532c:	1000051e 	bne	r2,zero,2805344 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2805330:	00820004 	movi	r2,2048
 2805334:	e0fffa17 	ldw	r3,-24(fp)
 2805338:	10c5c83a 	sub	r2,r2,r3
 280533c:	e0bff815 	stw	r2,-32(fp)
 2805340:	00000406 	br	2805354 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2805344:	0081ffc4 	movi	r2,2047
 2805348:	e0fffa17 	ldw	r3,-24(fp)
 280534c:	10c5c83a 	sub	r2,r2,r3
 2805350:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2805354:	e0bff817 	ldw	r2,-32(fp)
 2805358:	1005003a 	cmpeq	r2,r2,zero
 280535c:	10001f1e 	bne	r2,zero,28053dc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 2805360:	e0fffd17 	ldw	r3,-12(fp)
 2805364:	e0bff817 	ldw	r2,-32(fp)
 2805368:	1880022e 	bgeu	r3,r2,2805374 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 280536c:	e0bffd17 	ldw	r2,-12(fp)
 2805370:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2805374:	e0bffb17 	ldw	r2,-20(fp)
 2805378:	10c20e04 	addi	r3,r2,2104
 280537c:	e0bffa17 	ldw	r2,-24(fp)
 2805380:	1885883a 	add	r2,r3,r2
 2805384:	e0fffc17 	ldw	r3,-16(fp)
 2805388:	1009883a 	mov	r4,r2
 280538c:	180b883a 	mov	r5,r3
 2805390:	e1bff817 	ldw	r6,-32(fp)
 2805394:	28015d00 	call	28015d0 <memcpy>
      ptr   += n;
 2805398:	e0fff817 	ldw	r3,-32(fp)
 280539c:	e0bffc17 	ldw	r2,-16(fp)
 28053a0:	10c5883a 	add	r2,r2,r3
 28053a4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 28053a8:	e0fffd17 	ldw	r3,-12(fp)
 28053ac:	e0bff817 	ldw	r2,-32(fp)
 28053b0:	1885c83a 	sub	r2,r3,r2
 28053b4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 28053b8:	e0fffa17 	ldw	r3,-24(fp)
 28053bc:	e0bff817 	ldw	r2,-32(fp)
 28053c0:	1885883a 	add	r2,r3,r2
 28053c4:	10c1ffcc 	andi	r3,r2,2047
 28053c8:	e0bffb17 	ldw	r2,-20(fp)
 28053cc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 28053d0:	e0bffd17 	ldw	r2,-12(fp)
 28053d4:	10800048 	cmpgei	r2,r2,1
 28053d8:	103fc31e 	bne	r2,zero,28052e8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 28053dc:	0005303a 	rdctl	r2,status
 28053e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 28053e4:	e0fff517 	ldw	r3,-44(fp)
 28053e8:	00bfff84 	movi	r2,-2
 28053ec:	1884703a 	and	r2,r3,r2
 28053f0:	1001703a 	wrctl	status,r2
  
  return context;
 28053f4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 28053f8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 28053fc:	e0bffb17 	ldw	r2,-20(fp)
 2805400:	10800817 	ldw	r2,32(r2)
 2805404:	10c00094 	ori	r3,r2,2
 2805408:	e0bffb17 	ldw	r2,-20(fp)
 280540c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2805410:	e0bffb17 	ldw	r2,-20(fp)
 2805414:	10800017 	ldw	r2,0(r2)
 2805418:	11000104 	addi	r4,r2,4
 280541c:	e0bffb17 	ldw	r2,-20(fp)
 2805420:	10800817 	ldw	r2,32(r2)
 2805424:	1007883a 	mov	r3,r2
 2805428:	2005883a 	mov	r2,r4
 280542c:	10c00035 	stwio	r3,0(r2)
 2805430:	e0bff717 	ldw	r2,-36(fp)
 2805434:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2805438:	e0bff417 	ldw	r2,-48(fp)
 280543c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2805440:	e0bffd17 	ldw	r2,-12(fp)
 2805444:	10800050 	cmplti	r2,r2,1
 2805448:	1000111e 	bne	r2,zero,2805490 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 280544c:	e0bffe17 	ldw	r2,-8(fp)
 2805450:	1090000c 	andi	r2,r2,16384
 2805454:	1004c03a 	cmpne	r2,r2,zero
 2805458:	1000101e 	bne	r2,zero,280549c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 280545c:	e0bffb17 	ldw	r2,-20(fp)
 2805460:	10c00d17 	ldw	r3,52(r2)
 2805464:	e0bff917 	ldw	r2,-28(fp)
 2805468:	1880051e 	bne	r3,r2,2805480 <altera_avalon_jtag_uart_write+0x1c8>
 280546c:	e0bffb17 	ldw	r2,-20(fp)
 2805470:	10c00917 	ldw	r3,36(r2)
 2805474:	e0bffb17 	ldw	r2,-20(fp)
 2805478:	10800117 	ldw	r2,4(r2)
 280547c:	18bff736 	bltu	r3,r2,280545c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 2805480:	e0bffb17 	ldw	r2,-20(fp)
 2805484:	10c00d17 	ldw	r3,52(r2)
 2805488:	e0bff917 	ldw	r2,-28(fp)
 280548c:	18800326 	beq	r3,r2,280549c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 2805490:	e0bffd17 	ldw	r2,-12(fp)
 2805494:	10800048 	cmpgei	r2,r2,1
 2805498:	103fcd1e 	bne	r2,zero,28053d0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 280549c:	e0fffc17 	ldw	r3,-16(fp)
 28054a0:	e0bff617 	ldw	r2,-40(fp)
 28054a4:	18800526 	beq	r3,r2,28054bc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 28054a8:	e0fffc17 	ldw	r3,-16(fp)
 28054ac:	e0bff617 	ldw	r2,-40(fp)
 28054b0:	1887c83a 	sub	r3,r3,r2
 28054b4:	e0ffff15 	stw	r3,-4(fp)
 28054b8:	00000906 	br	28054e0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 28054bc:	e0bffe17 	ldw	r2,-8(fp)
 28054c0:	1090000c 	andi	r2,r2,16384
 28054c4:	1005003a 	cmpeq	r2,r2,zero
 28054c8:	1000031e 	bne	r2,zero,28054d8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 28054cc:	00bffd44 	movi	r2,-11
 28054d0:	e0bfff15 	stw	r2,-4(fp)
 28054d4:	00000206 	br	28054e0 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 28054d8:	00bffec4 	movi	r2,-5
 28054dc:	e0bfff15 	stw	r2,-4(fp)
 28054e0:	e0bfff17 	ldw	r2,-4(fp)
}
 28054e4:	e037883a 	mov	sp,fp
 28054e8:	dfc00117 	ldw	ra,4(sp)
 28054ec:	df000017 	ldw	fp,0(sp)
 28054f0:	dec00204 	addi	sp,sp,8
 28054f4:	f800283a 	ret

028054f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 28054f8:	defff404 	addi	sp,sp,-48
 28054fc:	df000b15 	stw	fp,44(sp)
 2805500:	df000b04 	addi	fp,sp,44
 2805504:	e13ffb15 	stw	r4,-20(fp)
 2805508:	e17ffc15 	stw	r5,-16(fp)
 280550c:	e1bffd15 	stw	r6,-12(fp)
 2805510:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2805514:	e03ff915 	stw	zero,-28(fp)
 2805518:	0080a074 	movhi	r2,641
 280551c:	10a8ac04 	addi	r2,r2,-23888
 2805520:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2805524:	1005003a 	cmpeq	r2,r2,zero
 2805528:	1000411e 	bne	r2,zero,2805630 <alt_alarm_start+0x138>
  {
    if (alarm)
 280552c:	e0bffb17 	ldw	r2,-20(fp)
 2805530:	1005003a 	cmpeq	r2,r2,zero
 2805534:	10003b1e 	bne	r2,zero,2805624 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 2805538:	e0fffb17 	ldw	r3,-20(fp)
 280553c:	e0bffd17 	ldw	r2,-12(fp)
 2805540:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 2805544:	e0fffb17 	ldw	r3,-20(fp)
 2805548:	e0bffe17 	ldw	r2,-8(fp)
 280554c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2805550:	0005303a 	rdctl	r2,status
 2805554:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2805558:	e0fff817 	ldw	r3,-32(fp)
 280555c:	00bfff84 	movi	r2,-2
 2805560:	1884703a 	and	r2,r3,r2
 2805564:	1001703a 	wrctl	status,r2
  
  return context;
 2805568:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 280556c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2805570:	0080a074 	movhi	r2,641
 2805574:	10a8ad04 	addi	r2,r2,-23884
 2805578:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 280557c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2805580:	e0fffc17 	ldw	r3,-16(fp)
 2805584:	e0bff917 	ldw	r2,-28(fp)
 2805588:	1885883a 	add	r2,r3,r2
 280558c:	10c00044 	addi	r3,r2,1
 2805590:	e0bffb17 	ldw	r2,-20(fp)
 2805594:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2805598:	e0bffb17 	ldw	r2,-20(fp)
 280559c:	10c00217 	ldw	r3,8(r2)
 28055a0:	e0bff917 	ldw	r2,-28(fp)
 28055a4:	1880042e 	bgeu	r3,r2,28055b8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 28055a8:	e0fffb17 	ldw	r3,-20(fp)
 28055ac:	00800044 	movi	r2,1
 28055b0:	18800405 	stb	r2,16(r3)
 28055b4:	00000206 	br	28055c0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 28055b8:	e0bffb17 	ldw	r2,-20(fp)
 28055bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 28055c0:	e0fffb17 	ldw	r3,-20(fp)
 28055c4:	0080a074 	movhi	r2,641
 28055c8:	10a1d304 	addi	r2,r2,-30900
 28055cc:	e0bff615 	stw	r2,-40(fp)
 28055d0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 28055d4:	e0fff717 	ldw	r3,-36(fp)
 28055d8:	e0bff617 	ldw	r2,-40(fp)
 28055dc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 28055e0:	e0bff617 	ldw	r2,-40(fp)
 28055e4:	10c00017 	ldw	r3,0(r2)
 28055e8:	e0bff717 	ldw	r2,-36(fp)
 28055ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 28055f0:	e0bff617 	ldw	r2,-40(fp)
 28055f4:	10c00017 	ldw	r3,0(r2)
 28055f8:	e0bff717 	ldw	r2,-36(fp)
 28055fc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2805600:	e0fff617 	ldw	r3,-40(fp)
 2805604:	e0bff717 	ldw	r2,-36(fp)
 2805608:	18800015 	stw	r2,0(r3)
 280560c:	e0bffa17 	ldw	r2,-24(fp)
 2805610:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2805614:	e0bff517 	ldw	r2,-44(fp)
 2805618:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 280561c:	e03fff15 	stw	zero,-4(fp)
 2805620:	00000506 	br	2805638 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 2805624:	00bffa84 	movi	r2,-22
 2805628:	e0bfff15 	stw	r2,-4(fp)
 280562c:	00000206 	br	2805638 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 2805630:	00bfde84 	movi	r2,-134
 2805634:	e0bfff15 	stw	r2,-4(fp)
 2805638:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 280563c:	e037883a 	mov	sp,fp
 2805640:	df000017 	ldw	fp,0(sp)
 2805644:	dec00104 	addi	sp,sp,4
 2805648:	f800283a 	ret

0280564c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 280564c:	defffa04 	addi	sp,sp,-24
 2805650:	dfc00515 	stw	ra,20(sp)
 2805654:	df000415 	stw	fp,16(sp)
 2805658:	df000404 	addi	fp,sp,16
 280565c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 2805660:	00800244 	movi	r2,9
 2805664:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2805668:	e13ffc17 	ldw	r4,-16(fp)
 280566c:	014003f4 	movhi	r5,15
 2805670:	29509004 	addi	r5,r5,16960
 2805674:	280312c0 	call	280312c <__mulsi3>
 2805678:	100b883a 	mov	r5,r2
 280567c:	0101fcf4 	movhi	r4,2035
 2805680:	21205404 	addi	r4,r4,-32432
 2805684:	2806b580 	call	2806b58 <__udivsi3>
 2805688:	100b883a 	mov	r5,r2
 280568c:	01200034 	movhi	r4,32768
 2805690:	213fffc4 	addi	r4,r4,-1
 2805694:	2806b580 	call	2806b58 <__udivsi3>
 2805698:	100b883a 	mov	r5,r2
 280569c:	e13fff17 	ldw	r4,-4(fp)
 28056a0:	2806b580 	call	2806b58 <__udivsi3>
 28056a4:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 28056a8:	e0bffd17 	ldw	r2,-12(fp)
 28056ac:	1005003a 	cmpeq	r2,r2,zero
 28056b0:	10002a1e 	bne	r2,zero,280575c <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 28056b4:	e03ffe15 	stw	zero,-8(fp)
 28056b8:	00001706 	br	2805718 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 28056bc:	00a00034 	movhi	r2,32768
 28056c0:	10bfffc4 	addi	r2,r2,-1
 28056c4:	10bfffc4 	addi	r2,r2,-1
 28056c8:	103ffe1e 	bne	r2,zero,28056c4 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 28056cc:	e13ffc17 	ldw	r4,-16(fp)
 28056d0:	014003f4 	movhi	r5,15
 28056d4:	29509004 	addi	r5,r5,16960
 28056d8:	280312c0 	call	280312c <__mulsi3>
 28056dc:	100b883a 	mov	r5,r2
 28056e0:	0101fcf4 	movhi	r4,2035
 28056e4:	21205404 	addi	r4,r4,-32432
 28056e8:	2806b580 	call	2806b58 <__udivsi3>
 28056ec:	100b883a 	mov	r5,r2
 28056f0:	01200034 	movhi	r4,32768
 28056f4:	213fffc4 	addi	r4,r4,-1
 28056f8:	2806b580 	call	2806b58 <__udivsi3>
 28056fc:	1007883a 	mov	r3,r2
 2805700:	e0bfff17 	ldw	r2,-4(fp)
 2805704:	10c5c83a 	sub	r2,r2,r3
 2805708:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 280570c:	e0bffe17 	ldw	r2,-8(fp)
 2805710:	10800044 	addi	r2,r2,1
 2805714:	e0bffe15 	stw	r2,-8(fp)
 2805718:	e0fffe17 	ldw	r3,-8(fp)
 280571c:	e0bffd17 	ldw	r2,-12(fp)
 2805720:	18bfe616 	blt	r3,r2,28056bc <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2805724:	e13ffc17 	ldw	r4,-16(fp)
 2805728:	014003f4 	movhi	r5,15
 280572c:	29509004 	addi	r5,r5,16960
 2805730:	280312c0 	call	280312c <__mulsi3>
 2805734:	100b883a 	mov	r5,r2
 2805738:	0101fcf4 	movhi	r4,2035
 280573c:	21205404 	addi	r4,r4,-32432
 2805740:	2806b580 	call	2806b58 <__udivsi3>
 2805744:	1009883a 	mov	r4,r2
 2805748:	e17fff17 	ldw	r5,-4(fp)
 280574c:	280312c0 	call	280312c <__mulsi3>
 2805750:	10bfffc4 	addi	r2,r2,-1
 2805754:	103ffe1e 	bne	r2,zero,2805750 <alt_busy_sleep+0x104>
 2805758:	00000d06 	br	2805790 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 280575c:	e13ffc17 	ldw	r4,-16(fp)
 2805760:	014003f4 	movhi	r5,15
 2805764:	29509004 	addi	r5,r5,16960
 2805768:	280312c0 	call	280312c <__mulsi3>
 280576c:	100b883a 	mov	r5,r2
 2805770:	0101fcf4 	movhi	r4,2035
 2805774:	21205404 	addi	r4,r4,-32432
 2805778:	2806b580 	call	2806b58 <__udivsi3>
 280577c:	1009883a 	mov	r4,r2
 2805780:	e17fff17 	ldw	r5,-4(fp)
 2805784:	280312c0 	call	280312c <__mulsi3>
 2805788:	10bfffc4 	addi	r2,r2,-1
 280578c:	00bffe16 	blt	zero,r2,2805788 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 2805790:	0005883a 	mov	r2,zero
}
 2805794:	e037883a 	mov	sp,fp
 2805798:	dfc00117 	ldw	ra,4(sp)
 280579c:	df000017 	ldw	fp,0(sp)
 28057a0:	dec00204 	addi	sp,sp,8
 28057a4:	f800283a 	ret

028057a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 28057a8:	deffff04 	addi	sp,sp,-4
 28057ac:	df000015 	stw	fp,0(sp)
 28057b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 28057b4:	e037883a 	mov	sp,fp
 28057b8:	df000017 	ldw	fp,0(sp)
 28057bc:	dec00104 	addi	sp,sp,4
 28057c0:	f800283a 	ret

028057c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 28057c4:	defff904 	addi	sp,sp,-28
 28057c8:	dfc00615 	stw	ra,24(sp)
 28057cc:	df000515 	stw	fp,20(sp)
 28057d0:	df000504 	addi	fp,sp,20
 28057d4:	e13ffd15 	stw	r4,-12(fp)
 28057d8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 28057dc:	e0bffd17 	ldw	r2,-12(fp)
 28057e0:	1005003a 	cmpeq	r2,r2,zero
 28057e4:	1000041e 	bne	r2,zero,28057f8 <alt_dev_llist_insert+0x34>
 28057e8:	e0bffd17 	ldw	r2,-12(fp)
 28057ec:	10800217 	ldw	r2,8(r2)
 28057f0:	1004c03a 	cmpne	r2,r2,zero
 28057f4:	1000071e 	bne	r2,zero,2805814 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 28057f8:	28058780 	call	2805878 <alt_get_errno>
 28057fc:	1007883a 	mov	r3,r2
 2805800:	00800584 	movi	r2,22
 2805804:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2805808:	00bffa84 	movi	r2,-22
 280580c:	e0bfff15 	stw	r2,-4(fp)
 2805810:	00001306 	br	2805860 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2805814:	e0fffd17 	ldw	r3,-12(fp)
 2805818:	e0bffe17 	ldw	r2,-8(fp)
 280581c:	e0bffb15 	stw	r2,-20(fp)
 2805820:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2805824:	e0fffc17 	ldw	r3,-16(fp)
 2805828:	e0bffb17 	ldw	r2,-20(fp)
 280582c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2805830:	e0bffb17 	ldw	r2,-20(fp)
 2805834:	10c00017 	ldw	r3,0(r2)
 2805838:	e0bffc17 	ldw	r2,-16(fp)
 280583c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2805840:	e0bffb17 	ldw	r2,-20(fp)
 2805844:	10c00017 	ldw	r3,0(r2)
 2805848:	e0bffc17 	ldw	r2,-16(fp)
 280584c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2805850:	e0fffb17 	ldw	r3,-20(fp)
 2805854:	e0bffc17 	ldw	r2,-16(fp)
 2805858:	18800015 	stw	r2,0(r3)

  return 0;  
 280585c:	e03fff15 	stw	zero,-4(fp)
 2805860:	e0bfff17 	ldw	r2,-4(fp)
}
 2805864:	e037883a 	mov	sp,fp
 2805868:	dfc00117 	ldw	ra,4(sp)
 280586c:	df000017 	ldw	fp,0(sp)
 2805870:	dec00204 	addi	sp,sp,8
 2805874:	f800283a 	ret

02805878 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2805878:	defffd04 	addi	sp,sp,-12
 280587c:	dfc00215 	stw	ra,8(sp)
 2805880:	df000115 	stw	fp,4(sp)
 2805884:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2805888:	0080a074 	movhi	r2,641
 280588c:	10a1cc04 	addi	r2,r2,-30928
 2805890:	10800017 	ldw	r2,0(r2)
 2805894:	1005003a 	cmpeq	r2,r2,zero
 2805898:	1000061e 	bne	r2,zero,28058b4 <alt_get_errno+0x3c>
 280589c:	0080a074 	movhi	r2,641
 28058a0:	10a1cc04 	addi	r2,r2,-30928
 28058a4:	10800017 	ldw	r2,0(r2)
 28058a8:	103ee83a 	callr	r2
 28058ac:	e0bfff15 	stw	r2,-4(fp)
 28058b0:	00000306 	br	28058c0 <alt_get_errno+0x48>
 28058b4:	0080a074 	movhi	r2,641
 28058b8:	10a8a504 	addi	r2,r2,-23916
 28058bc:	e0bfff15 	stw	r2,-4(fp)
 28058c0:	e0bfff17 	ldw	r2,-4(fp)
}
 28058c4:	e037883a 	mov	sp,fp
 28058c8:	dfc00117 	ldw	ra,4(sp)
 28058cc:	df000017 	ldw	fp,0(sp)
 28058d0:	dec00204 	addi	sp,sp,8
 28058d4:	f800283a 	ret

028058d8 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
 28058d8:	defffc04 	addi	sp,sp,-16
 28058dc:	dfc00315 	stw	ra,12(sp)
 28058e0:	df000215 	stw	fp,8(sp)
 28058e4:	df000204 	addi	fp,sp,8
 28058e8:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
 28058ec:	e13fff17 	ldw	r4,-4(fp)
 28058f0:	d1600b04 	addi	r5,gp,-32724
 28058f4:	2805b100 	call	2805b10 <alt_find_dev>
 28058f8:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 28058fc:	e0bffe17 	ldw	r2,-8(fp)
 2805900:	1004c03a 	cmpne	r2,r2,zero
 2805904:	1000041e 	bne	r2,zero,2805918 <alt_dma_rxchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 2805908:	28059300 	call	2805930 <alt_get_errno>
 280590c:	1007883a 	mov	r3,r2
 2805910:	008004c4 	movi	r2,19
 2805914:	18800015 	stw	r2,0(r3)
  }

  return dev;
 2805918:	e0bffe17 	ldw	r2,-8(fp)
}
 280591c:	e037883a 	mov	sp,fp
 2805920:	dfc00117 	ldw	ra,4(sp)
 2805924:	df000017 	ldw	fp,0(sp)
 2805928:	dec00204 	addi	sp,sp,8
 280592c:	f800283a 	ret

02805930 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2805930:	defffd04 	addi	sp,sp,-12
 2805934:	dfc00215 	stw	ra,8(sp)
 2805938:	df000115 	stw	fp,4(sp)
 280593c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2805940:	0080a074 	movhi	r2,641
 2805944:	10a1cc04 	addi	r2,r2,-30928
 2805948:	10800017 	ldw	r2,0(r2)
 280594c:	1005003a 	cmpeq	r2,r2,zero
 2805950:	1000061e 	bne	r2,zero,280596c <alt_get_errno+0x3c>
 2805954:	0080a074 	movhi	r2,641
 2805958:	10a1cc04 	addi	r2,r2,-30928
 280595c:	10800017 	ldw	r2,0(r2)
 2805960:	103ee83a 	callr	r2
 2805964:	e0bfff15 	stw	r2,-4(fp)
 2805968:	00000306 	br	2805978 <alt_get_errno+0x48>
 280596c:	0080a074 	movhi	r2,641
 2805970:	10a8a504 	addi	r2,r2,-23916
 2805974:	e0bfff15 	stw	r2,-4(fp)
 2805978:	e0bfff17 	ldw	r2,-4(fp)
}
 280597c:	e037883a 	mov	sp,fp
 2805980:	dfc00117 	ldw	ra,4(sp)
 2805984:	df000017 	ldw	fp,0(sp)
 2805988:	dec00204 	addi	sp,sp,8
 280598c:	f800283a 	ret

02805990 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
 2805990:	defffc04 	addi	sp,sp,-16
 2805994:	dfc00315 	stw	ra,12(sp)
 2805998:	df000215 	stw	fp,8(sp)
 280599c:	df000204 	addi	fp,sp,8
 28059a0:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
 28059a4:	e13fff17 	ldw	r4,-4(fp)
 28059a8:	d1600d04 	addi	r5,gp,-32716
 28059ac:	2805b100 	call	2805b10 <alt_find_dev>
 28059b0:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 28059b4:	e0bffe17 	ldw	r2,-8(fp)
 28059b8:	1004c03a 	cmpne	r2,r2,zero
 28059bc:	1000041e 	bne	r2,zero,28059d0 <alt_dma_txchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 28059c0:	28059e80 	call	28059e8 <alt_get_errno>
 28059c4:	1007883a 	mov	r3,r2
 28059c8:	008004c4 	movi	r2,19
 28059cc:	18800015 	stw	r2,0(r3)
  }

  return dev;
 28059d0:	e0bffe17 	ldw	r2,-8(fp)
}
 28059d4:	e037883a 	mov	sp,fp
 28059d8:	dfc00117 	ldw	ra,4(sp)
 28059dc:	df000017 	ldw	fp,0(sp)
 28059e0:	dec00204 	addi	sp,sp,8
 28059e4:	f800283a 	ret

028059e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 28059e8:	defffd04 	addi	sp,sp,-12
 28059ec:	dfc00215 	stw	ra,8(sp)
 28059f0:	df000115 	stw	fp,4(sp)
 28059f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 28059f8:	0080a074 	movhi	r2,641
 28059fc:	10a1cc04 	addi	r2,r2,-30928
 2805a00:	10800017 	ldw	r2,0(r2)
 2805a04:	1005003a 	cmpeq	r2,r2,zero
 2805a08:	1000061e 	bne	r2,zero,2805a24 <alt_get_errno+0x3c>
 2805a0c:	0080a074 	movhi	r2,641
 2805a10:	10a1cc04 	addi	r2,r2,-30928
 2805a14:	10800017 	ldw	r2,0(r2)
 2805a18:	103ee83a 	callr	r2
 2805a1c:	e0bfff15 	stw	r2,-4(fp)
 2805a20:	00000306 	br	2805a30 <alt_get_errno+0x48>
 2805a24:	0080a074 	movhi	r2,641
 2805a28:	10a8a504 	addi	r2,r2,-23916
 2805a2c:	e0bfff15 	stw	r2,-4(fp)
 2805a30:	e0bfff17 	ldw	r2,-4(fp)
}
 2805a34:	e037883a 	mov	sp,fp
 2805a38:	dfc00117 	ldw	ra,4(sp)
 2805a3c:	df000017 	ldw	fp,0(sp)
 2805a40:	dec00204 	addi	sp,sp,8
 2805a44:	f800283a 	ret

02805a48 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2805a48:	defffd04 	addi	sp,sp,-12
 2805a4c:	dfc00215 	stw	ra,8(sp)
 2805a50:	df000115 	stw	fp,4(sp)
 2805a54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2805a58:	00bfff04 	movi	r2,-4
 2805a5c:	00c0a034 	movhi	r3,640
 2805a60:	18daf304 	addi	r3,r3,27596
 2805a64:	1885883a 	add	r2,r3,r2
 2805a68:	e0bfff15 	stw	r2,-4(fp)
 2805a6c:	00000606 	br	2805a88 <_do_ctors+0x40>
        (*ctor) (); 
 2805a70:	e0bfff17 	ldw	r2,-4(fp)
 2805a74:	10800017 	ldw	r2,0(r2)
 2805a78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2805a7c:	e0bfff17 	ldw	r2,-4(fp)
 2805a80:	10bfff04 	addi	r2,r2,-4
 2805a84:	e0bfff15 	stw	r2,-4(fp)
 2805a88:	e0ffff17 	ldw	r3,-4(fp)
 2805a8c:	0080a034 	movhi	r2,640
 2805a90:	109af204 	addi	r2,r2,27592
 2805a94:	18bff62e 	bgeu	r3,r2,2805a70 <_do_ctors+0x28>
        (*ctor) (); 
}
 2805a98:	e037883a 	mov	sp,fp
 2805a9c:	dfc00117 	ldw	ra,4(sp)
 2805aa0:	df000017 	ldw	fp,0(sp)
 2805aa4:	dec00204 	addi	sp,sp,8
 2805aa8:	f800283a 	ret

02805aac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2805aac:	defffd04 	addi	sp,sp,-12
 2805ab0:	dfc00215 	stw	ra,8(sp)
 2805ab4:	df000115 	stw	fp,4(sp)
 2805ab8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2805abc:	00bfff04 	movi	r2,-4
 2805ac0:	00c0a034 	movhi	r3,640
 2805ac4:	18daf304 	addi	r3,r3,27596
 2805ac8:	1885883a 	add	r2,r3,r2
 2805acc:	e0bfff15 	stw	r2,-4(fp)
 2805ad0:	00000606 	br	2805aec <_do_dtors+0x40>
        (*dtor) (); 
 2805ad4:	e0bfff17 	ldw	r2,-4(fp)
 2805ad8:	10800017 	ldw	r2,0(r2)
 2805adc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2805ae0:	e0bfff17 	ldw	r2,-4(fp)
 2805ae4:	10bfff04 	addi	r2,r2,-4
 2805ae8:	e0bfff15 	stw	r2,-4(fp)
 2805aec:	e0ffff17 	ldw	r3,-4(fp)
 2805af0:	0080a034 	movhi	r2,640
 2805af4:	109af304 	addi	r2,r2,27596
 2805af8:	18bff62e 	bgeu	r3,r2,2805ad4 <_do_dtors+0x28>
        (*dtor) (); 
}
 2805afc:	e037883a 	mov	sp,fp
 2805b00:	dfc00117 	ldw	ra,4(sp)
 2805b04:	df000017 	ldw	fp,0(sp)
 2805b08:	dec00204 	addi	sp,sp,8
 2805b0c:	f800283a 	ret

02805b10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2805b10:	defff904 	addi	sp,sp,-28
 2805b14:	dfc00615 	stw	ra,24(sp)
 2805b18:	df000515 	stw	fp,20(sp)
 2805b1c:	df000504 	addi	fp,sp,20
 2805b20:	e13ffd15 	stw	r4,-12(fp)
 2805b24:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2805b28:	e0bffe17 	ldw	r2,-8(fp)
 2805b2c:	10800017 	ldw	r2,0(r2)
 2805b30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2805b34:	e13ffd17 	ldw	r4,-12(fp)
 2805b38:	280089c0 	call	280089c <strlen>
 2805b3c:	10800044 	addi	r2,r2,1
 2805b40:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2805b44:	00000d06 	br	2805b7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2805b48:	e0bffc17 	ldw	r2,-16(fp)
 2805b4c:	11000217 	ldw	r4,8(r2)
 2805b50:	e1bffb17 	ldw	r6,-20(fp)
 2805b54:	e17ffd17 	ldw	r5,-12(fp)
 2805b58:	28066c00 	call	28066c0 <memcmp>
 2805b5c:	1004c03a 	cmpne	r2,r2,zero
 2805b60:	1000031e 	bne	r2,zero,2805b70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2805b64:	e0bffc17 	ldw	r2,-16(fp)
 2805b68:	e0bfff15 	stw	r2,-4(fp)
 2805b6c:	00000706 	br	2805b8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2805b70:	e0bffc17 	ldw	r2,-16(fp)
 2805b74:	10800017 	ldw	r2,0(r2)
 2805b78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2805b7c:	e0fffe17 	ldw	r3,-8(fp)
 2805b80:	e0bffc17 	ldw	r2,-16(fp)
 2805b84:	10fff01e 	bne	r2,r3,2805b48 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2805b88:	e03fff15 	stw	zero,-4(fp)
 2805b8c:	e0bfff17 	ldw	r2,-4(fp)
}
 2805b90:	e037883a 	mov	sp,fp
 2805b94:	dfc00117 	ldw	ra,4(sp)
 2805b98:	df000017 	ldw	fp,0(sp)
 2805b9c:	dec00204 	addi	sp,sp,8
 2805ba0:	f800283a 	ret

02805ba4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2805ba4:	deffff04 	addi	sp,sp,-4
 2805ba8:	df000015 	stw	fp,0(sp)
 2805bac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 2805bb0:	e037883a 	mov	sp,fp
 2805bb4:	df000017 	ldw	fp,0(sp)
 2805bb8:	dec00104 	addi	sp,sp,4
 2805bbc:	f800283a 	ret

02805bc0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2805bc0:	defff904 	addi	sp,sp,-28
 2805bc4:	dfc00615 	stw	ra,24(sp)
 2805bc8:	df000515 	stw	fp,20(sp)
 2805bcc:	df000504 	addi	fp,sp,20
 2805bd0:	e13ffc15 	stw	r4,-16(fp)
 2805bd4:	e17ffd15 	stw	r5,-12(fp)
 2805bd8:	e1bffe15 	stw	r6,-8(fp)
 2805bdc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2805be0:	e0800217 	ldw	r2,8(fp)
 2805be4:	d8800015 	stw	r2,0(sp)
 2805be8:	e13ffc17 	ldw	r4,-16(fp)
 2805bec:	e17ffd17 	ldw	r5,-12(fp)
 2805bf0:	e1bffe17 	ldw	r6,-8(fp)
 2805bf4:	e1ffff17 	ldw	r7,-4(fp)
 2805bf8:	2805d940 	call	2805d94 <alt_iic_isr_register>
}  
 2805bfc:	e037883a 	mov	sp,fp
 2805c00:	dfc00117 	ldw	ra,4(sp)
 2805c04:	df000017 	ldw	fp,0(sp)
 2805c08:	dec00204 	addi	sp,sp,8
 2805c0c:	f800283a 	ret

02805c10 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2805c10:	defff904 	addi	sp,sp,-28
 2805c14:	df000615 	stw	fp,24(sp)
 2805c18:	df000604 	addi	fp,sp,24
 2805c1c:	e13ffe15 	stw	r4,-8(fp)
 2805c20:	e17fff15 	stw	r5,-4(fp)
 2805c24:	e0bfff17 	ldw	r2,-4(fp)
 2805c28:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2805c2c:	0005303a 	rdctl	r2,status
 2805c30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2805c34:	e0fffb17 	ldw	r3,-20(fp)
 2805c38:	00bfff84 	movi	r2,-2
 2805c3c:	1884703a 	and	r2,r3,r2
 2805c40:	1001703a 	wrctl	status,r2
  
  return context;
 2805c44:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2805c48:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 2805c4c:	e0fffc17 	ldw	r3,-16(fp)
 2805c50:	00800044 	movi	r2,1
 2805c54:	10c4983a 	sll	r2,r2,r3
 2805c58:	1007883a 	mov	r3,r2
 2805c5c:	0080a074 	movhi	r2,641
 2805c60:	10a8ab04 	addi	r2,r2,-23892
 2805c64:	10800017 	ldw	r2,0(r2)
 2805c68:	1886b03a 	or	r3,r3,r2
 2805c6c:	0080a074 	movhi	r2,641
 2805c70:	10a8ab04 	addi	r2,r2,-23892
 2805c74:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2805c78:	0080a074 	movhi	r2,641
 2805c7c:	10a8ab04 	addi	r2,r2,-23892
 2805c80:	10800017 	ldw	r2,0(r2)
 2805c84:	100170fa 	wrctl	ienable,r2
 2805c88:	e0bffd17 	ldw	r2,-12(fp)
 2805c8c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2805c90:	e0bffa17 	ldw	r2,-24(fp)
 2805c94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2805c98:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 2805c9c:	e037883a 	mov	sp,fp
 2805ca0:	df000017 	ldw	fp,0(sp)
 2805ca4:	dec00104 	addi	sp,sp,4
 2805ca8:	f800283a 	ret

02805cac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2805cac:	defff904 	addi	sp,sp,-28
 2805cb0:	df000615 	stw	fp,24(sp)
 2805cb4:	df000604 	addi	fp,sp,24
 2805cb8:	e13ffe15 	stw	r4,-8(fp)
 2805cbc:	e17fff15 	stw	r5,-4(fp)
 2805cc0:	e0bfff17 	ldw	r2,-4(fp)
 2805cc4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2805cc8:	0005303a 	rdctl	r2,status
 2805ccc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2805cd0:	e0fffb17 	ldw	r3,-20(fp)
 2805cd4:	00bfff84 	movi	r2,-2
 2805cd8:	1884703a 	and	r2,r3,r2
 2805cdc:	1001703a 	wrctl	status,r2
  
  return context;
 2805ce0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2805ce4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 2805ce8:	e0fffc17 	ldw	r3,-16(fp)
 2805cec:	00800044 	movi	r2,1
 2805cf0:	10c4983a 	sll	r2,r2,r3
 2805cf4:	0084303a 	nor	r2,zero,r2
 2805cf8:	1007883a 	mov	r3,r2
 2805cfc:	0080a074 	movhi	r2,641
 2805d00:	10a8ab04 	addi	r2,r2,-23892
 2805d04:	10800017 	ldw	r2,0(r2)
 2805d08:	1886703a 	and	r3,r3,r2
 2805d0c:	0080a074 	movhi	r2,641
 2805d10:	10a8ab04 	addi	r2,r2,-23892
 2805d14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2805d18:	0080a074 	movhi	r2,641
 2805d1c:	10a8ab04 	addi	r2,r2,-23892
 2805d20:	10800017 	ldw	r2,0(r2)
 2805d24:	100170fa 	wrctl	ienable,r2
 2805d28:	e0bffd17 	ldw	r2,-12(fp)
 2805d2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2805d30:	e0bffa17 	ldw	r2,-24(fp)
 2805d34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2805d38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2805d3c:	e037883a 	mov	sp,fp
 2805d40:	df000017 	ldw	fp,0(sp)
 2805d44:	dec00104 	addi	sp,sp,4
 2805d48:	f800283a 	ret

02805d4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2805d4c:	defffc04 	addi	sp,sp,-16
 2805d50:	df000315 	stw	fp,12(sp)
 2805d54:	df000304 	addi	fp,sp,12
 2805d58:	e13ffe15 	stw	r4,-8(fp)
 2805d5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2805d60:	000530fa 	rdctl	r2,ienable
 2805d64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2805d68:	e0ffff17 	ldw	r3,-4(fp)
 2805d6c:	00800044 	movi	r2,1
 2805d70:	10c4983a 	sll	r2,r2,r3
 2805d74:	1007883a 	mov	r3,r2
 2805d78:	e0bffd17 	ldw	r2,-12(fp)
 2805d7c:	1884703a 	and	r2,r3,r2
 2805d80:	1004c03a 	cmpne	r2,r2,zero
}
 2805d84:	e037883a 	mov	sp,fp
 2805d88:	df000017 	ldw	fp,0(sp)
 2805d8c:	dec00104 	addi	sp,sp,4
 2805d90:	f800283a 	ret

02805d94 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2805d94:	defff404 	addi	sp,sp,-48
 2805d98:	dfc00b15 	stw	ra,44(sp)
 2805d9c:	df000a15 	stw	fp,40(sp)
 2805da0:	df000a04 	addi	fp,sp,40
 2805da4:	e13ffb15 	stw	r4,-20(fp)
 2805da8:	e17ffc15 	stw	r5,-16(fp)
 2805dac:	e1bffd15 	stw	r6,-12(fp)
 2805db0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 2805db4:	00bffa84 	movi	r2,-22
 2805db8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2805dbc:	e0bffc17 	ldw	r2,-16(fp)
 2805dc0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2805dc4:	e0bff917 	ldw	r2,-28(fp)
 2805dc8:	10800808 	cmpgei	r2,r2,32
 2805dcc:	1000291e 	bne	r2,zero,2805e74 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2805dd0:	0005303a 	rdctl	r2,status
 2805dd4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2805dd8:	e0fff717 	ldw	r3,-36(fp)
 2805ddc:	00bfff84 	movi	r2,-2
 2805de0:	1884703a 	and	r2,r3,r2
 2805de4:	1001703a 	wrctl	status,r2
  
  return context;
 2805de8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2805dec:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 2805df0:	e0bff917 	ldw	r2,-28(fp)
 2805df4:	00c0a074 	movhi	r3,641
 2805df8:	18e8b804 	addi	r3,r3,-23840
 2805dfc:	100490fa 	slli	r2,r2,3
 2805e00:	10c7883a 	add	r3,r2,r3
 2805e04:	e0bffd17 	ldw	r2,-12(fp)
 2805e08:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 2805e0c:	e0bff917 	ldw	r2,-28(fp)
 2805e10:	00c0a074 	movhi	r3,641
 2805e14:	18e8b804 	addi	r3,r3,-23840
 2805e18:	100490fa 	slli	r2,r2,3
 2805e1c:	10c5883a 	add	r2,r2,r3
 2805e20:	10c00104 	addi	r3,r2,4
 2805e24:	e0bffe17 	ldw	r2,-8(fp)
 2805e28:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2805e2c:	e0bffd17 	ldw	r2,-12(fp)
 2805e30:	1005003a 	cmpeq	r2,r2,zero
 2805e34:	1000051e 	bne	r2,zero,2805e4c <alt_iic_isr_register+0xb8>
 2805e38:	e17ff917 	ldw	r5,-28(fp)
 2805e3c:	e13ffb17 	ldw	r4,-20(fp)
 2805e40:	2805c100 	call	2805c10 <alt_ic_irq_enable>
 2805e44:	e0bfff15 	stw	r2,-4(fp)
 2805e48:	00000406 	br	2805e5c <alt_iic_isr_register+0xc8>
 2805e4c:	e17ff917 	ldw	r5,-28(fp)
 2805e50:	e13ffb17 	ldw	r4,-20(fp)
 2805e54:	2805cac0 	call	2805cac <alt_ic_irq_disable>
 2805e58:	e0bfff15 	stw	r2,-4(fp)
 2805e5c:	e0bfff17 	ldw	r2,-4(fp)
 2805e60:	e0bffa15 	stw	r2,-24(fp)
 2805e64:	e0bff817 	ldw	r2,-32(fp)
 2805e68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2805e6c:	e0bff617 	ldw	r2,-40(fp)
 2805e70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2805e74:	e0bffa17 	ldw	r2,-24(fp)
}
 2805e78:	e037883a 	mov	sp,fp
 2805e7c:	dfc00117 	ldw	ra,4(sp)
 2805e80:	df000017 	ldw	fp,0(sp)
 2805e84:	dec00204 	addi	sp,sp,8
 2805e88:	f800283a 	ret

02805e8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2805e8c:	defff804 	addi	sp,sp,-32
 2805e90:	dfc00715 	stw	ra,28(sp)
 2805e94:	df000615 	stw	fp,24(sp)
 2805e98:	dc000515 	stw	r16,20(sp)
 2805e9c:	df000504 	addi	fp,sp,20
 2805ea0:	e13ffc15 	stw	r4,-16(fp)
 2805ea4:	e17ffd15 	stw	r5,-12(fp)
 2805ea8:	e1bffe15 	stw	r6,-8(fp)
 2805eac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2805eb0:	e13ffd17 	ldw	r4,-12(fp)
 2805eb4:	e17ffe17 	ldw	r5,-8(fp)
 2805eb8:	e1bfff17 	ldw	r6,-4(fp)
 2805ebc:	28060d40 	call	28060d4 <open>
 2805ec0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2805ec4:	e0bffb17 	ldw	r2,-20(fp)
 2805ec8:	1004803a 	cmplt	r2,r2,zero
 2805ecc:	10001f1e 	bne	r2,zero,2805f4c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 2805ed0:	e13ffb17 	ldw	r4,-20(fp)
 2805ed4:	0400a034 	movhi	r16,640
 2805ed8:	841d1404 	addi	r16,r16,29776
 2805edc:	01400304 	movi	r5,12
 2805ee0:	280312c0 	call	280312c <__mulsi3>
 2805ee4:	1405883a 	add	r2,r2,r16
 2805ee8:	10c00017 	ldw	r3,0(r2)
 2805eec:	e0bffc17 	ldw	r2,-16(fp)
 2805ef0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2805ef4:	e13ffb17 	ldw	r4,-20(fp)
 2805ef8:	0400a034 	movhi	r16,640
 2805efc:	841d1404 	addi	r16,r16,29776
 2805f00:	01400304 	movi	r5,12
 2805f04:	280312c0 	call	280312c <__mulsi3>
 2805f08:	1405883a 	add	r2,r2,r16
 2805f0c:	10800104 	addi	r2,r2,4
 2805f10:	10c00017 	ldw	r3,0(r2)
 2805f14:	e0bffc17 	ldw	r2,-16(fp)
 2805f18:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2805f1c:	e13ffb17 	ldw	r4,-20(fp)
 2805f20:	0400a034 	movhi	r16,640
 2805f24:	841d1404 	addi	r16,r16,29776
 2805f28:	01400304 	movi	r5,12
 2805f2c:	280312c0 	call	280312c <__mulsi3>
 2805f30:	1405883a 	add	r2,r2,r16
 2805f34:	10800204 	addi	r2,r2,8
 2805f38:	10c00017 	ldw	r3,0(r2)
 2805f3c:	e0bffc17 	ldw	r2,-16(fp)
 2805f40:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2805f44:	e13ffb17 	ldw	r4,-20(fp)
 2805f48:	28039bc0 	call	28039bc <alt_release_fd>
  }
} 
 2805f4c:	e037883a 	mov	sp,fp
 2805f50:	dfc00217 	ldw	ra,8(sp)
 2805f54:	df000117 	ldw	fp,4(sp)
 2805f58:	dc000017 	ldw	r16,0(sp)
 2805f5c:	dec00304 	addi	sp,sp,12
 2805f60:	f800283a 	ret

02805f64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2805f64:	defffb04 	addi	sp,sp,-20
 2805f68:	dfc00415 	stw	ra,16(sp)
 2805f6c:	df000315 	stw	fp,12(sp)
 2805f70:	df000304 	addi	fp,sp,12
 2805f74:	e13ffd15 	stw	r4,-12(fp)
 2805f78:	e17ffe15 	stw	r5,-8(fp)
 2805f7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2805f80:	0100a034 	movhi	r4,640
 2805f84:	211d1704 	addi	r4,r4,29788
 2805f88:	e17ffd17 	ldw	r5,-12(fp)
 2805f8c:	01800044 	movi	r6,1
 2805f90:	01c07fc4 	movi	r7,511
 2805f94:	2805e8c0 	call	2805e8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2805f98:	0100a034 	movhi	r4,640
 2805f9c:	211d1404 	addi	r4,r4,29776
 2805fa0:	e17ffe17 	ldw	r5,-8(fp)
 2805fa4:	000d883a 	mov	r6,zero
 2805fa8:	01c07fc4 	movi	r7,511
 2805fac:	2805e8c0 	call	2805e8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2805fb0:	0100a034 	movhi	r4,640
 2805fb4:	211d1a04 	addi	r4,r4,29800
 2805fb8:	e17fff17 	ldw	r5,-4(fp)
 2805fbc:	01800044 	movi	r6,1
 2805fc0:	01c07fc4 	movi	r7,511
 2805fc4:	2805e8c0 	call	2805e8c <alt_open_fd>
}  
 2805fc8:	e037883a 	mov	sp,fp
 2805fcc:	dfc00117 	ldw	ra,4(sp)
 2805fd0:	df000017 	ldw	fp,0(sp)
 2805fd4:	dec00204 	addi	sp,sp,8
 2805fd8:	f800283a 	ret

02805fdc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2805fdc:	defffa04 	addi	sp,sp,-24
 2805fe0:	dfc00515 	stw	ra,20(sp)
 2805fe4:	df000415 	stw	fp,16(sp)
 2805fe8:	dc000315 	stw	r16,12(sp)
 2805fec:	df000304 	addi	fp,sp,12
 2805ff0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2805ff4:	e0bffe17 	ldw	r2,-8(fp)
 2805ff8:	10800217 	ldw	r2,8(r2)
 2805ffc:	10d00034 	orhi	r3,r2,16384
 2806000:	e0bffe17 	ldw	r2,-8(fp)
 2806004:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2806008:	e03ffd15 	stw	zero,-12(fp)
 280600c:	00002306 	br	280609c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2806010:	e13ffd17 	ldw	r4,-12(fp)
 2806014:	0400a034 	movhi	r16,640
 2806018:	841d1404 	addi	r16,r16,29776
 280601c:	01400304 	movi	r5,12
 2806020:	280312c0 	call	280312c <__mulsi3>
 2806024:	1405883a 	add	r2,r2,r16
 2806028:	10c00017 	ldw	r3,0(r2)
 280602c:	e0bffe17 	ldw	r2,-8(fp)
 2806030:	10800017 	ldw	r2,0(r2)
 2806034:	1880161e 	bne	r3,r2,2806090 <alt_file_locked+0xb4>
 2806038:	e13ffd17 	ldw	r4,-12(fp)
 280603c:	0400a034 	movhi	r16,640
 2806040:	841d1404 	addi	r16,r16,29776
 2806044:	01400304 	movi	r5,12
 2806048:	280312c0 	call	280312c <__mulsi3>
 280604c:	1405883a 	add	r2,r2,r16
 2806050:	10800204 	addi	r2,r2,8
 2806054:	10800017 	ldw	r2,0(r2)
 2806058:	1004403a 	cmpge	r2,r2,zero
 280605c:	10000c1e 	bne	r2,zero,2806090 <alt_file_locked+0xb4>
 2806060:	e13ffd17 	ldw	r4,-12(fp)
 2806064:	01400304 	movi	r5,12
 2806068:	280312c0 	call	280312c <__mulsi3>
 280606c:	1007883a 	mov	r3,r2
 2806070:	0080a034 	movhi	r2,640
 2806074:	109d1404 	addi	r2,r2,29776
 2806078:	1887883a 	add	r3,r3,r2
 280607c:	e0bffe17 	ldw	r2,-8(fp)
 2806080:	18800326 	beq	r3,r2,2806090 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2806084:	00bffcc4 	movi	r2,-13
 2806088:	e0bfff15 	stw	r2,-4(fp)
 280608c:	00000a06 	br	28060b8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2806090:	e0bffd17 	ldw	r2,-12(fp)
 2806094:	10800044 	addi	r2,r2,1
 2806098:	e0bffd15 	stw	r2,-12(fp)
 280609c:	0080a074 	movhi	r2,641
 28060a0:	10a1cb04 	addi	r2,r2,-30932
 28060a4:	10800017 	ldw	r2,0(r2)
 28060a8:	1007883a 	mov	r3,r2
 28060ac:	e0bffd17 	ldw	r2,-12(fp)
 28060b0:	18bfd72e 	bgeu	r3,r2,2806010 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 28060b4:	e03fff15 	stw	zero,-4(fp)
 28060b8:	e0bfff17 	ldw	r2,-4(fp)
}
 28060bc:	e037883a 	mov	sp,fp
 28060c0:	dfc00217 	ldw	ra,8(sp)
 28060c4:	df000117 	ldw	fp,4(sp)
 28060c8:	dc000017 	ldw	r16,0(sp)
 28060cc:	dec00304 	addi	sp,sp,12
 28060d0:	f800283a 	ret

028060d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 28060d4:	defff404 	addi	sp,sp,-48
 28060d8:	dfc00b15 	stw	ra,44(sp)
 28060dc:	df000a15 	stw	fp,40(sp)
 28060e0:	df000a04 	addi	fp,sp,40
 28060e4:	e13ffb15 	stw	r4,-20(fp)
 28060e8:	e17ffc15 	stw	r5,-16(fp)
 28060ec:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 28060f0:	00bfffc4 	movi	r2,-1
 28060f4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 28060f8:	00bffb44 	movi	r2,-19
 28060fc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 2806100:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2806104:	e13ffb17 	ldw	r4,-20(fp)
 2806108:	0140a074 	movhi	r5,641
 280610c:	2961c904 	addi	r5,r5,-30940
 2806110:	2805b100 	call	2805b10 <alt_find_dev>
 2806114:	e0bffa15 	stw	r2,-24(fp)
 2806118:	e0bffa17 	ldw	r2,-24(fp)
 280611c:	1004c03a 	cmpne	r2,r2,zero
 2806120:	1000051e 	bne	r2,zero,2806138 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2806124:	e13ffb17 	ldw	r4,-20(fp)
 2806128:	28064840 	call	2806484 <alt_find_file>
 280612c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2806130:	00800044 	movi	r2,1
 2806134:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2806138:	e0bffa17 	ldw	r2,-24(fp)
 280613c:	1005003a 	cmpeq	r2,r2,zero
 2806140:	1000311e 	bne	r2,zero,2806208 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2806144:	e13ffa17 	ldw	r4,-24(fp)
 2806148:	28065a40 	call	28065a4 <alt_get_fd>
 280614c:	e0bff815 	stw	r2,-32(fp)
 2806150:	e0bff817 	ldw	r2,-32(fp)
 2806154:	1004403a 	cmpge	r2,r2,zero
 2806158:	1000031e 	bne	r2,zero,2806168 <open+0x94>
    {
      status = index;
 280615c:	e0bff817 	ldw	r2,-32(fp)
 2806160:	e0bff715 	stw	r2,-36(fp)
 2806164:	00002a06 	br	2806210 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 2806168:	e13ff817 	ldw	r4,-32(fp)
 280616c:	01400304 	movi	r5,12
 2806170:	280312c0 	call	280312c <__mulsi3>
 2806174:	1007883a 	mov	r3,r2
 2806178:	0080a034 	movhi	r2,640
 280617c:	109d1404 	addi	r2,r2,29776
 2806180:	1885883a 	add	r2,r3,r2
 2806184:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2806188:	e0fffc17 	ldw	r3,-16(fp)
 280618c:	00900034 	movhi	r2,16384
 2806190:	10bfffc4 	addi	r2,r2,-1
 2806194:	1886703a 	and	r3,r3,r2
 2806198:	e0bff917 	ldw	r2,-28(fp)
 280619c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 28061a0:	e0bff617 	ldw	r2,-40(fp)
 28061a4:	1004c03a 	cmpne	r2,r2,zero
 28061a8:	1000061e 	bne	r2,zero,28061c4 <open+0xf0>
 28061ac:	e13ff917 	ldw	r4,-28(fp)
 28061b0:	2805fdc0 	call	2805fdc <alt_file_locked>
 28061b4:	e0bff715 	stw	r2,-36(fp)
 28061b8:	e0bff717 	ldw	r2,-36(fp)
 28061bc:	1004803a 	cmplt	r2,r2,zero
 28061c0:	1000131e 	bne	r2,zero,2806210 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 28061c4:	e0bffa17 	ldw	r2,-24(fp)
 28061c8:	10800317 	ldw	r2,12(r2)
 28061cc:	1005003a 	cmpeq	r2,r2,zero
 28061d0:	1000091e 	bne	r2,zero,28061f8 <open+0x124>
 28061d4:	e0bffa17 	ldw	r2,-24(fp)
 28061d8:	10800317 	ldw	r2,12(r2)
 28061dc:	e13ff917 	ldw	r4,-28(fp)
 28061e0:	e17ffb17 	ldw	r5,-20(fp)
 28061e4:	e1bffc17 	ldw	r6,-16(fp)
 28061e8:	e1fffd17 	ldw	r7,-12(fp)
 28061ec:	103ee83a 	callr	r2
 28061f0:	e0bfff15 	stw	r2,-4(fp)
 28061f4:	00000106 	br	28061fc <open+0x128>
 28061f8:	e03fff15 	stw	zero,-4(fp)
 28061fc:	e0bfff17 	ldw	r2,-4(fp)
 2806200:	e0bff715 	stw	r2,-36(fp)
 2806204:	00000206 	br	2806210 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2806208:	00bffb44 	movi	r2,-19
 280620c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2806210:	e0bff717 	ldw	r2,-36(fp)
 2806214:	1004403a 	cmpge	r2,r2,zero
 2806218:	1000091e 	bne	r2,zero,2806240 <open+0x16c>
  {
    alt_release_fd (index);  
 280621c:	e13ff817 	ldw	r4,-32(fp)
 2806220:	28039bc0 	call	28039bc <alt_release_fd>
    ALT_ERRNO = -status;
 2806224:	28062600 	call	2806260 <alt_get_errno>
 2806228:	e0fff717 	ldw	r3,-36(fp)
 280622c:	00c7c83a 	sub	r3,zero,r3
 2806230:	10c00015 	stw	r3,0(r2)
    return -1;
 2806234:	00bfffc4 	movi	r2,-1
 2806238:	e0bffe15 	stw	r2,-8(fp)
 280623c:	00000206 	br	2806248 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 2806240:	e0bff817 	ldw	r2,-32(fp)
 2806244:	e0bffe15 	stw	r2,-8(fp)
 2806248:	e0bffe17 	ldw	r2,-8(fp)
}
 280624c:	e037883a 	mov	sp,fp
 2806250:	dfc00117 	ldw	ra,4(sp)
 2806254:	df000017 	ldw	fp,0(sp)
 2806258:	dec00204 	addi	sp,sp,8
 280625c:	f800283a 	ret

02806260 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2806260:	defffd04 	addi	sp,sp,-12
 2806264:	dfc00215 	stw	ra,8(sp)
 2806268:	df000115 	stw	fp,4(sp)
 280626c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2806270:	0080a074 	movhi	r2,641
 2806274:	10a1cc04 	addi	r2,r2,-30928
 2806278:	10800017 	ldw	r2,0(r2)
 280627c:	1005003a 	cmpeq	r2,r2,zero
 2806280:	1000061e 	bne	r2,zero,280629c <alt_get_errno+0x3c>
 2806284:	0080a074 	movhi	r2,641
 2806288:	10a1cc04 	addi	r2,r2,-30928
 280628c:	10800017 	ldw	r2,0(r2)
 2806290:	103ee83a 	callr	r2
 2806294:	e0bfff15 	stw	r2,-4(fp)
 2806298:	00000306 	br	28062a8 <alt_get_errno+0x48>
 280629c:	0080a074 	movhi	r2,641
 28062a0:	10a8a504 	addi	r2,r2,-23916
 28062a4:	e0bfff15 	stw	r2,-4(fp)
 28062a8:	e0bfff17 	ldw	r2,-4(fp)
}
 28062ac:	e037883a 	mov	sp,fp
 28062b0:	dfc00117 	ldw	ra,4(sp)
 28062b4:	df000017 	ldw	fp,0(sp)
 28062b8:	dec00204 	addi	sp,sp,8
 28062bc:	f800283a 	ret

028062c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 28062c0:	defffa04 	addi	sp,sp,-24
 28062c4:	df000515 	stw	fp,20(sp)
 28062c8:	df000504 	addi	fp,sp,20
 28062cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 28062d0:	0005303a 	rdctl	r2,status
 28062d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 28062d8:	e0fffd17 	ldw	r3,-12(fp)
 28062dc:	00bfff84 	movi	r2,-2
 28062e0:	1884703a 	and	r2,r3,r2
 28062e4:	1001703a 	wrctl	status,r2
  
  return context;
 28062e8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 28062ec:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 28062f0:	e0bfff17 	ldw	r2,-4(fp)
 28062f4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 28062f8:	e0bffc17 	ldw	r2,-16(fp)
 28062fc:	10c00017 	ldw	r3,0(r2)
 2806300:	e0bffc17 	ldw	r2,-16(fp)
 2806304:	10800117 	ldw	r2,4(r2)
 2806308:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 280630c:	e0bffc17 	ldw	r2,-16(fp)
 2806310:	10c00117 	ldw	r3,4(r2)
 2806314:	e0bffc17 	ldw	r2,-16(fp)
 2806318:	10800017 	ldw	r2,0(r2)
 280631c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2806320:	e0fffc17 	ldw	r3,-16(fp)
 2806324:	e0bffc17 	ldw	r2,-16(fp)
 2806328:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 280632c:	e0fffc17 	ldw	r3,-16(fp)
 2806330:	e0bffc17 	ldw	r2,-16(fp)
 2806334:	18800015 	stw	r2,0(r3)
 2806338:	e0bffe17 	ldw	r2,-8(fp)
 280633c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2806340:	e0bffb17 	ldw	r2,-20(fp)
 2806344:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2806348:	e037883a 	mov	sp,fp
 280634c:	df000017 	ldw	fp,0(sp)
 2806350:	dec00104 	addi	sp,sp,4
 2806354:	f800283a 	ret

02806358 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2806358:	defffb04 	addi	sp,sp,-20
 280635c:	dfc00415 	stw	ra,16(sp)
 2806360:	df000315 	stw	fp,12(sp)
 2806364:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2806368:	d0a01017 	ldw	r2,-32704(gp)
 280636c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2806370:	d0a6ea17 	ldw	r2,-25688(gp)
 2806374:	10800044 	addi	r2,r2,1
 2806378:	d0a6ea15 	stw	r2,-25688(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 280637c:	00003106 	br	2806444 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2806380:	e0bffe17 	ldw	r2,-8(fp)
 2806384:	10800017 	ldw	r2,0(r2)
 2806388:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 280638c:	e0bffe17 	ldw	r2,-8(fp)
 2806390:	10800403 	ldbu	r2,16(r2)
 2806394:	10803fcc 	andi	r2,r2,255
 2806398:	1005003a 	cmpeq	r2,r2,zero
 280639c:	1000051e 	bne	r2,zero,28063b4 <alt_tick+0x5c>
 28063a0:	d0a6ea17 	ldw	r2,-25688(gp)
 28063a4:	1004c03a 	cmpne	r2,r2,zero
 28063a8:	1000021e 	bne	r2,zero,28063b4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 28063ac:	e0bffe17 	ldw	r2,-8(fp)
 28063b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 28063b4:	e0bffe17 	ldw	r2,-8(fp)
 28063b8:	10c00217 	ldw	r3,8(r2)
 28063bc:	d0a6ea17 	ldw	r2,-25688(gp)
 28063c0:	10c01e36 	bltu	r2,r3,280643c <alt_tick+0xe4>
 28063c4:	e0bffe17 	ldw	r2,-8(fp)
 28063c8:	10800403 	ldbu	r2,16(r2)
 28063cc:	10803fcc 	andi	r2,r2,255
 28063d0:	1004c03a 	cmpne	r2,r2,zero
 28063d4:	1000191e 	bne	r2,zero,280643c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 28063d8:	e0bffe17 	ldw	r2,-8(fp)
 28063dc:	10c00317 	ldw	r3,12(r2)
 28063e0:	e0bffe17 	ldw	r2,-8(fp)
 28063e4:	11000517 	ldw	r4,20(r2)
 28063e8:	183ee83a 	callr	r3
 28063ec:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 28063f0:	e0bffd17 	ldw	r2,-12(fp)
 28063f4:	1004c03a 	cmpne	r2,r2,zero
 28063f8:	1000031e 	bne	r2,zero,2806408 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 28063fc:	e13ffe17 	ldw	r4,-8(fp)
 2806400:	28062c00 	call	28062c0 <alt_alarm_stop>
 2806404:	00000d06 	br	280643c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2806408:	e0bffe17 	ldw	r2,-8(fp)
 280640c:	10c00217 	ldw	r3,8(r2)
 2806410:	e0bffd17 	ldw	r2,-12(fp)
 2806414:	1887883a 	add	r3,r3,r2
 2806418:	e0bffe17 	ldw	r2,-8(fp)
 280641c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2806420:	e0bffe17 	ldw	r2,-8(fp)
 2806424:	10c00217 	ldw	r3,8(r2)
 2806428:	d0a6ea17 	ldw	r2,-25688(gp)
 280642c:	1880032e 	bgeu	r3,r2,280643c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2806430:	e0fffe17 	ldw	r3,-8(fp)
 2806434:	00800044 	movi	r2,1
 2806438:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 280643c:	e0bfff17 	ldw	r2,-4(fp)
 2806440:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2806444:	d0e01004 	addi	r3,gp,-32704
 2806448:	e0bffe17 	ldw	r2,-8(fp)
 280644c:	10ffcc1e 	bne	r2,r3,2806380 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2806450:	e037883a 	mov	sp,fp
 2806454:	dfc00117 	ldw	ra,4(sp)
 2806458:	df000017 	ldw	fp,0(sp)
 280645c:	dec00204 	addi	sp,sp,8
 2806460:	f800283a 	ret

02806464 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2806464:	deffff04 	addi	sp,sp,-4
 2806468:	df000015 	stw	fp,0(sp)
 280646c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2806470:	000170fa 	wrctl	ienable,zero
}
 2806474:	e037883a 	mov	sp,fp
 2806478:	df000017 	ldw	fp,0(sp)
 280647c:	dec00104 	addi	sp,sp,4
 2806480:	f800283a 	ret

02806484 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2806484:	defffa04 	addi	sp,sp,-24
 2806488:	dfc00515 	stw	ra,20(sp)
 280648c:	df000415 	stw	fp,16(sp)
 2806490:	df000404 	addi	fp,sp,16
 2806494:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2806498:	0080a074 	movhi	r2,641
 280649c:	10a1c704 	addi	r2,r2,-30948
 28064a0:	10800017 	ldw	r2,0(r2)
 28064a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 28064a8:	00003306 	br	2806578 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 28064ac:	e0bffd17 	ldw	r2,-12(fp)
 28064b0:	11000217 	ldw	r4,8(r2)
 28064b4:	280089c0 	call	280089c <strlen>
 28064b8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 28064bc:	e0bffd17 	ldw	r2,-12(fp)
 28064c0:	10c00217 	ldw	r3,8(r2)
 28064c4:	e0bffc17 	ldw	r2,-16(fp)
 28064c8:	1885883a 	add	r2,r3,r2
 28064cc:	10bfffc4 	addi	r2,r2,-1
 28064d0:	10800003 	ldbu	r2,0(r2)
 28064d4:	10803fcc 	andi	r2,r2,255
 28064d8:	1080201c 	xori	r2,r2,128
 28064dc:	10bfe004 	addi	r2,r2,-128
 28064e0:	10800bd8 	cmpnei	r2,r2,47
 28064e4:	1000031e 	bne	r2,zero,28064f4 <alt_find_file+0x70>
    {
      len -= 1;
 28064e8:	e0bffc17 	ldw	r2,-16(fp)
 28064ec:	10bfffc4 	addi	r2,r2,-1
 28064f0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 28064f4:	e0bffc17 	ldw	r2,-16(fp)
 28064f8:	1007883a 	mov	r3,r2
 28064fc:	e0bffe17 	ldw	r2,-8(fp)
 2806500:	1885883a 	add	r2,r3,r2
 2806504:	10800003 	ldbu	r2,0(r2)
 2806508:	10803fcc 	andi	r2,r2,255
 280650c:	1080201c 	xori	r2,r2,128
 2806510:	10bfe004 	addi	r2,r2,-128
 2806514:	10800be0 	cmpeqi	r2,r2,47
 2806518:	10000a1e 	bne	r2,zero,2806544 <alt_find_file+0xc0>
 280651c:	e0bffc17 	ldw	r2,-16(fp)
 2806520:	1007883a 	mov	r3,r2
 2806524:	e0bffe17 	ldw	r2,-8(fp)
 2806528:	1885883a 	add	r2,r3,r2
 280652c:	10800003 	ldbu	r2,0(r2)
 2806530:	10803fcc 	andi	r2,r2,255
 2806534:	1080201c 	xori	r2,r2,128
 2806538:	10bfe004 	addi	r2,r2,-128
 280653c:	1004c03a 	cmpne	r2,r2,zero
 2806540:	10000a1e 	bne	r2,zero,280656c <alt_find_file+0xe8>
 2806544:	e0bffd17 	ldw	r2,-12(fp)
 2806548:	11000217 	ldw	r4,8(r2)
 280654c:	e1bffc17 	ldw	r6,-16(fp)
 2806550:	e17ffe17 	ldw	r5,-8(fp)
 2806554:	28066c00 	call	28066c0 <memcmp>
 2806558:	1004c03a 	cmpne	r2,r2,zero
 280655c:	1000031e 	bne	r2,zero,280656c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2806560:	e0bffd17 	ldw	r2,-12(fp)
 2806564:	e0bfff15 	stw	r2,-4(fp)
 2806568:	00000806 	br	280658c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 280656c:	e0bffd17 	ldw	r2,-12(fp)
 2806570:	10800017 	ldw	r2,0(r2)
 2806574:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2806578:	00c0a074 	movhi	r3,641
 280657c:	18e1c704 	addi	r3,r3,-30948
 2806580:	e0bffd17 	ldw	r2,-12(fp)
 2806584:	10ffc91e 	bne	r2,r3,28064ac <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2806588:	e03fff15 	stw	zero,-4(fp)
 280658c:	e0bfff17 	ldw	r2,-4(fp)
}
 2806590:	e037883a 	mov	sp,fp
 2806594:	dfc00117 	ldw	ra,4(sp)
 2806598:	df000017 	ldw	fp,0(sp)
 280659c:	dec00204 	addi	sp,sp,8
 28065a0:	f800283a 	ret

028065a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 28065a4:	defffa04 	addi	sp,sp,-24
 28065a8:	dfc00515 	stw	ra,20(sp)
 28065ac:	df000415 	stw	fp,16(sp)
 28065b0:	dc000315 	stw	r16,12(sp)
 28065b4:	df000304 	addi	fp,sp,12
 28065b8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 28065bc:	00bffa04 	movi	r2,-24
 28065c0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 28065c4:	e03ffe15 	stw	zero,-8(fp)
 28065c8:	00002006 	br	280664c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 28065cc:	e13ffe17 	ldw	r4,-8(fp)
 28065d0:	0400a034 	movhi	r16,640
 28065d4:	841d1404 	addi	r16,r16,29776
 28065d8:	01400304 	movi	r5,12
 28065dc:	280312c0 	call	280312c <__mulsi3>
 28065e0:	1405883a 	add	r2,r2,r16
 28065e4:	10800017 	ldw	r2,0(r2)
 28065e8:	1004c03a 	cmpne	r2,r2,zero
 28065ec:	1000141e 	bne	r2,zero,2806640 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 28065f0:	e13ffe17 	ldw	r4,-8(fp)
 28065f4:	0400a034 	movhi	r16,640
 28065f8:	841d1404 	addi	r16,r16,29776
 28065fc:	01400304 	movi	r5,12
 2806600:	280312c0 	call	280312c <__mulsi3>
 2806604:	1407883a 	add	r3,r2,r16
 2806608:	e0bfff17 	ldw	r2,-4(fp)
 280660c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 2806610:	0080a074 	movhi	r2,641
 2806614:	10a1cb04 	addi	r2,r2,-30932
 2806618:	10c00017 	ldw	r3,0(r2)
 280661c:	e0bffe17 	ldw	r2,-8(fp)
 2806620:	1880040e 	bge	r3,r2,2806634 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 2806624:	00c0a074 	movhi	r3,641
 2806628:	18e1cb04 	addi	r3,r3,-30932
 280662c:	e0bffe17 	ldw	r2,-8(fp)
 2806630:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 2806634:	e0bffe17 	ldw	r2,-8(fp)
 2806638:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 280663c:	00000606 	br	2806658 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2806640:	e0bffe17 	ldw	r2,-8(fp)
 2806644:	10800044 	addi	r2,r2,1
 2806648:	e0bffe15 	stw	r2,-8(fp)
 280664c:	e0bffe17 	ldw	r2,-8(fp)
 2806650:	10800810 	cmplti	r2,r2,32
 2806654:	103fdd1e 	bne	r2,zero,28065cc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2806658:	e0bffd17 	ldw	r2,-12(fp)
}
 280665c:	e037883a 	mov	sp,fp
 2806660:	dfc00217 	ldw	ra,8(sp)
 2806664:	df000117 	ldw	fp,4(sp)
 2806668:	dc000017 	ldw	r16,0(sp)
 280666c:	dec00304 	addi	sp,sp,12
 2806670:	f800283a 	ret

02806674 <atexit>:
 2806674:	200b883a 	mov	r5,r4
 2806678:	000d883a 	mov	r6,zero
 280667c:	0009883a 	mov	r4,zero
 2806680:	000f883a 	mov	r7,zero
 2806684:	28067341 	jmpi	2806734 <__register_exitproc>

02806688 <exit>:
 2806688:	defffe04 	addi	sp,sp,-8
 280668c:	000b883a 	mov	r5,zero
 2806690:	dc000015 	stw	r16,0(sp)
 2806694:	dfc00115 	stw	ra,4(sp)
 2806698:	2021883a 	mov	r16,r4
 280669c:	280686c0 	call	280686c <__call_exitprocs>
 28066a0:	0080a074 	movhi	r2,641
 28066a4:	10a1c404 	addi	r2,r2,-30960
 28066a8:	11000017 	ldw	r4,0(r2)
 28066ac:	20800f17 	ldw	r2,60(r4)
 28066b0:	10000126 	beq	r2,zero,28066b8 <exit+0x30>
 28066b4:	103ee83a 	callr	r2
 28066b8:	8009883a 	mov	r4,r16
 28066bc:	2806ba80 	call	2806ba8 <_exit>

028066c0 <memcmp>:
 28066c0:	00c000c4 	movi	r3,3
 28066c4:	1980032e 	bgeu	r3,r6,28066d4 <memcmp+0x14>
 28066c8:	2144b03a 	or	r2,r4,r5
 28066cc:	10c4703a 	and	r2,r2,r3
 28066d0:	10000f26 	beq	r2,zero,2806710 <memcmp+0x50>
 28066d4:	31ffffc4 	addi	r7,r6,-1
 28066d8:	3000061e 	bne	r6,zero,28066f4 <memcmp+0x34>
 28066dc:	00000a06 	br	2806708 <memcmp+0x48>
 28066e0:	39ffffc4 	addi	r7,r7,-1
 28066e4:	00bfffc4 	movi	r2,-1
 28066e8:	21000044 	addi	r4,r4,1
 28066ec:	29400044 	addi	r5,r5,1
 28066f0:	38800526 	beq	r7,r2,2806708 <memcmp+0x48>
 28066f4:	20c00003 	ldbu	r3,0(r4)
 28066f8:	28800003 	ldbu	r2,0(r5)
 28066fc:	18bff826 	beq	r3,r2,28066e0 <memcmp+0x20>
 2806700:	1885c83a 	sub	r2,r3,r2
 2806704:	f800283a 	ret
 2806708:	0005883a 	mov	r2,zero
 280670c:	f800283a 	ret
 2806710:	180f883a 	mov	r7,r3
 2806714:	20c00017 	ldw	r3,0(r4)
 2806718:	28800017 	ldw	r2,0(r5)
 280671c:	18bfed1e 	bne	r3,r2,28066d4 <memcmp+0x14>
 2806720:	31bfff04 	addi	r6,r6,-4
 2806724:	21000104 	addi	r4,r4,4
 2806728:	29400104 	addi	r5,r5,4
 280672c:	39bff936 	bltu	r7,r6,2806714 <memcmp+0x54>
 2806730:	003fe806 	br	28066d4 <memcmp+0x14>

02806734 <__register_exitproc>:
 2806734:	defffa04 	addi	sp,sp,-24
 2806738:	0080a074 	movhi	r2,641
 280673c:	10a1c404 	addi	r2,r2,-30960
 2806740:	dc000015 	stw	r16,0(sp)
 2806744:	14000017 	ldw	r16,0(r2)
 2806748:	dd000415 	stw	r20,16(sp)
 280674c:	2829883a 	mov	r20,r5
 2806750:	81405217 	ldw	r5,328(r16)
 2806754:	dcc00315 	stw	r19,12(sp)
 2806758:	dc800215 	stw	r18,8(sp)
 280675c:	dc400115 	stw	r17,4(sp)
 2806760:	dfc00515 	stw	ra,20(sp)
 2806764:	2023883a 	mov	r17,r4
 2806768:	3027883a 	mov	r19,r6
 280676c:	3825883a 	mov	r18,r7
 2806770:	28002526 	beq	r5,zero,2806808 <__register_exitproc+0xd4>
 2806774:	29000117 	ldw	r4,4(r5)
 2806778:	008007c4 	movi	r2,31
 280677c:	11002716 	blt	r2,r4,280681c <__register_exitproc+0xe8>
 2806780:	8800101e 	bne	r17,zero,28067c4 <__register_exitproc+0x90>
 2806784:	2105883a 	add	r2,r4,r4
 2806788:	1085883a 	add	r2,r2,r2
 280678c:	20c00044 	addi	r3,r4,1
 2806790:	1145883a 	add	r2,r2,r5
 2806794:	0009883a 	mov	r4,zero
 2806798:	15000215 	stw	r20,8(r2)
 280679c:	28c00115 	stw	r3,4(r5)
 28067a0:	2005883a 	mov	r2,r4
 28067a4:	dfc00517 	ldw	ra,20(sp)
 28067a8:	dd000417 	ldw	r20,16(sp)
 28067ac:	dcc00317 	ldw	r19,12(sp)
 28067b0:	dc800217 	ldw	r18,8(sp)
 28067b4:	dc400117 	ldw	r17,4(sp)
 28067b8:	dc000017 	ldw	r16,0(sp)
 28067bc:	dec00604 	addi	sp,sp,24
 28067c0:	f800283a 	ret
 28067c4:	29802204 	addi	r6,r5,136
 28067c8:	00800044 	movi	r2,1
 28067cc:	110e983a 	sll	r7,r2,r4
 28067d0:	30c04017 	ldw	r3,256(r6)
 28067d4:	2105883a 	add	r2,r4,r4
 28067d8:	1085883a 	add	r2,r2,r2
 28067dc:	1185883a 	add	r2,r2,r6
 28067e0:	19c6b03a 	or	r3,r3,r7
 28067e4:	14802015 	stw	r18,128(r2)
 28067e8:	14c00015 	stw	r19,0(r2)
 28067ec:	00800084 	movi	r2,2
 28067f0:	30c04015 	stw	r3,256(r6)
 28067f4:	88bfe31e 	bne	r17,r2,2806784 <__register_exitproc+0x50>
 28067f8:	30804117 	ldw	r2,260(r6)
 28067fc:	11c4b03a 	or	r2,r2,r7
 2806800:	30804115 	stw	r2,260(r6)
 2806804:	003fdf06 	br	2806784 <__register_exitproc+0x50>
 2806808:	0080a074 	movhi	r2,641
 280680c:	10a8f804 	addi	r2,r2,-23584
 2806810:	100b883a 	mov	r5,r2
 2806814:	80805215 	stw	r2,328(r16)
 2806818:	003fd606 	br	2806774 <__register_exitproc+0x40>
 280681c:	00800034 	movhi	r2,0
 2806820:	10800004 	addi	r2,r2,0
 2806824:	1000021e 	bne	r2,zero,2806830 <__register_exitproc+0xfc>
 2806828:	013fffc4 	movi	r4,-1
 280682c:	003fdc06 	br	28067a0 <__register_exitproc+0x6c>
 2806830:	01006404 	movi	r4,400
 2806834:	103ee83a 	callr	r2
 2806838:	1007883a 	mov	r3,r2
 280683c:	103ffa26 	beq	r2,zero,2806828 <__register_exitproc+0xf4>
 2806840:	80805217 	ldw	r2,328(r16)
 2806844:	180b883a 	mov	r5,r3
 2806848:	18000115 	stw	zero,4(r3)
 280684c:	18800015 	stw	r2,0(r3)
 2806850:	80c05215 	stw	r3,328(r16)
 2806854:	18006215 	stw	zero,392(r3)
 2806858:	18006315 	stw	zero,396(r3)
 280685c:	0009883a 	mov	r4,zero
 2806860:	883fc826 	beq	r17,zero,2806784 <__register_exitproc+0x50>
 2806864:	003fd706 	br	28067c4 <__register_exitproc+0x90>

02806868 <register_fini>:
 2806868:	f800283a 	ret

0280686c <__call_exitprocs>:
 280686c:	0080a074 	movhi	r2,641
 2806870:	10a1c404 	addi	r2,r2,-30960
 2806874:	10800017 	ldw	r2,0(r2)
 2806878:	defff304 	addi	sp,sp,-52
 280687c:	df000b15 	stw	fp,44(sp)
 2806880:	d8800115 	stw	r2,4(sp)
 2806884:	00800034 	movhi	r2,0
 2806888:	10800004 	addi	r2,r2,0
 280688c:	1005003a 	cmpeq	r2,r2,zero
 2806890:	d8800215 	stw	r2,8(sp)
 2806894:	d8800117 	ldw	r2,4(sp)
 2806898:	dd400815 	stw	r21,32(sp)
 280689c:	dd000715 	stw	r20,28(sp)
 28068a0:	10805204 	addi	r2,r2,328
 28068a4:	dfc00c15 	stw	ra,48(sp)
 28068a8:	ddc00a15 	stw	r23,40(sp)
 28068ac:	dd800915 	stw	r22,36(sp)
 28068b0:	dcc00615 	stw	r19,24(sp)
 28068b4:	dc800515 	stw	r18,20(sp)
 28068b8:	dc400415 	stw	r17,16(sp)
 28068bc:	dc000315 	stw	r16,12(sp)
 28068c0:	282b883a 	mov	r21,r5
 28068c4:	2039883a 	mov	fp,r4
 28068c8:	d8800015 	stw	r2,0(sp)
 28068cc:	2829003a 	cmpeq	r20,r5,zero
 28068d0:	d8800117 	ldw	r2,4(sp)
 28068d4:	14405217 	ldw	r17,328(r2)
 28068d8:	88001026 	beq	r17,zero,280691c <__call_exitprocs+0xb0>
 28068dc:	ddc00017 	ldw	r23,0(sp)
 28068e0:	88800117 	ldw	r2,4(r17)
 28068e4:	8c802204 	addi	r18,r17,136
 28068e8:	143fffc4 	addi	r16,r2,-1
 28068ec:	80000916 	blt	r16,zero,2806914 <__call_exitprocs+0xa8>
 28068f0:	05bfffc4 	movi	r22,-1
 28068f4:	a000151e 	bne	r20,zero,280694c <__call_exitprocs+0xe0>
 28068f8:	8409883a 	add	r4,r16,r16
 28068fc:	2105883a 	add	r2,r4,r4
 2806900:	1485883a 	add	r2,r2,r18
 2806904:	10c02017 	ldw	r3,128(r2)
 2806908:	a8c01126 	beq	r21,r3,2806950 <__call_exitprocs+0xe4>
 280690c:	843fffc4 	addi	r16,r16,-1
 2806910:	85bff81e 	bne	r16,r22,28068f4 <__call_exitprocs+0x88>
 2806914:	d8800217 	ldw	r2,8(sp)
 2806918:	10003126 	beq	r2,zero,28069e0 <__call_exitprocs+0x174>
 280691c:	dfc00c17 	ldw	ra,48(sp)
 2806920:	df000b17 	ldw	fp,44(sp)
 2806924:	ddc00a17 	ldw	r23,40(sp)
 2806928:	dd800917 	ldw	r22,36(sp)
 280692c:	dd400817 	ldw	r21,32(sp)
 2806930:	dd000717 	ldw	r20,28(sp)
 2806934:	dcc00617 	ldw	r19,24(sp)
 2806938:	dc800517 	ldw	r18,20(sp)
 280693c:	dc400417 	ldw	r17,16(sp)
 2806940:	dc000317 	ldw	r16,12(sp)
 2806944:	dec00d04 	addi	sp,sp,52
 2806948:	f800283a 	ret
 280694c:	8409883a 	add	r4,r16,r16
 2806950:	88c00117 	ldw	r3,4(r17)
 2806954:	2105883a 	add	r2,r4,r4
 2806958:	1445883a 	add	r2,r2,r17
 280695c:	18ffffc4 	addi	r3,r3,-1
 2806960:	11800217 	ldw	r6,8(r2)
 2806964:	1c001526 	beq	r3,r16,28069bc <__call_exitprocs+0x150>
 2806968:	10000215 	stw	zero,8(r2)
 280696c:	303fe726 	beq	r6,zero,280690c <__call_exitprocs+0xa0>
 2806970:	00c00044 	movi	r3,1
 2806974:	1c06983a 	sll	r3,r3,r16
 2806978:	90804017 	ldw	r2,256(r18)
 280697c:	8cc00117 	ldw	r19,4(r17)
 2806980:	1884703a 	and	r2,r3,r2
 2806984:	10001426 	beq	r2,zero,28069d8 <__call_exitprocs+0x16c>
 2806988:	90804117 	ldw	r2,260(r18)
 280698c:	1884703a 	and	r2,r3,r2
 2806990:	10000c1e 	bne	r2,zero,28069c4 <__call_exitprocs+0x158>
 2806994:	2105883a 	add	r2,r4,r4
 2806998:	1485883a 	add	r2,r2,r18
 280699c:	11400017 	ldw	r5,0(r2)
 28069a0:	e009883a 	mov	r4,fp
 28069a4:	303ee83a 	callr	r6
 28069a8:	88800117 	ldw	r2,4(r17)
 28069ac:	98bfc81e 	bne	r19,r2,28068d0 <__call_exitprocs+0x64>
 28069b0:	b8800017 	ldw	r2,0(r23)
 28069b4:	147fd526 	beq	r2,r17,280690c <__call_exitprocs+0xa0>
 28069b8:	003fc506 	br	28068d0 <__call_exitprocs+0x64>
 28069bc:	8c000115 	stw	r16,4(r17)
 28069c0:	003fea06 	br	280696c <__call_exitprocs+0x100>
 28069c4:	2105883a 	add	r2,r4,r4
 28069c8:	1485883a 	add	r2,r2,r18
 28069cc:	11000017 	ldw	r4,0(r2)
 28069d0:	303ee83a 	callr	r6
 28069d4:	003ff406 	br	28069a8 <__call_exitprocs+0x13c>
 28069d8:	303ee83a 	callr	r6
 28069dc:	003ff206 	br	28069a8 <__call_exitprocs+0x13c>
 28069e0:	88800117 	ldw	r2,4(r17)
 28069e4:	1000081e 	bne	r2,zero,2806a08 <__call_exitprocs+0x19c>
 28069e8:	89000017 	ldw	r4,0(r17)
 28069ec:	20000726 	beq	r4,zero,2806a0c <__call_exitprocs+0x1a0>
 28069f0:	b9000015 	stw	r4,0(r23)
 28069f4:	8809883a 	mov	r4,r17
 28069f8:	00000000 	call	0 <__alt_mem_sdram_ctrl-0x2800000>
 28069fc:	bc400017 	ldw	r17,0(r23)
 2806a00:	883fb71e 	bne	r17,zero,28068e0 <__call_exitprocs+0x74>
 2806a04:	003fc506 	br	280691c <__call_exitprocs+0xb0>
 2806a08:	89000017 	ldw	r4,0(r17)
 2806a0c:	882f883a 	mov	r23,r17
 2806a10:	2023883a 	mov	r17,r4
 2806a14:	883fb21e 	bne	r17,zero,28068e0 <__call_exitprocs+0x74>
 2806a18:	003fc006 	br	280691c <__call_exitprocs+0xb0>

02806a1c <udivmodsi4>:
 2806a1c:	29001b2e 	bgeu	r5,r4,2806a8c <udivmodsi4+0x70>
 2806a20:	28001a16 	blt	r5,zero,2806a8c <udivmodsi4+0x70>
 2806a24:	00800044 	movi	r2,1
 2806a28:	0007883a 	mov	r3,zero
 2806a2c:	01c007c4 	movi	r7,31
 2806a30:	00000306 	br	2806a40 <udivmodsi4+0x24>
 2806a34:	19c01326 	beq	r3,r7,2806a84 <udivmodsi4+0x68>
 2806a38:	18c00044 	addi	r3,r3,1
 2806a3c:	28000416 	blt	r5,zero,2806a50 <udivmodsi4+0x34>
 2806a40:	294b883a 	add	r5,r5,r5
 2806a44:	1085883a 	add	r2,r2,r2
 2806a48:	293ffa36 	bltu	r5,r4,2806a34 <udivmodsi4+0x18>
 2806a4c:	10000d26 	beq	r2,zero,2806a84 <udivmodsi4+0x68>
 2806a50:	0007883a 	mov	r3,zero
 2806a54:	21400236 	bltu	r4,r5,2806a60 <udivmodsi4+0x44>
 2806a58:	2149c83a 	sub	r4,r4,r5
 2806a5c:	1886b03a 	or	r3,r3,r2
 2806a60:	1004d07a 	srli	r2,r2,1
 2806a64:	280ad07a 	srli	r5,r5,1
 2806a68:	103ffa1e 	bne	r2,zero,2806a54 <udivmodsi4+0x38>
 2806a6c:	30000226 	beq	r6,zero,2806a78 <udivmodsi4+0x5c>
 2806a70:	2005883a 	mov	r2,r4
 2806a74:	f800283a 	ret
 2806a78:	1809883a 	mov	r4,r3
 2806a7c:	2005883a 	mov	r2,r4
 2806a80:	f800283a 	ret
 2806a84:	0007883a 	mov	r3,zero
 2806a88:	003ff806 	br	2806a6c <udivmodsi4+0x50>
 2806a8c:	00800044 	movi	r2,1
 2806a90:	0007883a 	mov	r3,zero
 2806a94:	003fef06 	br	2806a54 <udivmodsi4+0x38>

02806a98 <__divsi3>:
 2806a98:	defffe04 	addi	sp,sp,-8
 2806a9c:	dc000015 	stw	r16,0(sp)
 2806aa0:	dfc00115 	stw	ra,4(sp)
 2806aa4:	0021883a 	mov	r16,zero
 2806aa8:	20000c16 	blt	r4,zero,2806adc <__divsi3+0x44>
 2806aac:	000d883a 	mov	r6,zero
 2806ab0:	28000e16 	blt	r5,zero,2806aec <__divsi3+0x54>
 2806ab4:	2806a1c0 	call	2806a1c <udivmodsi4>
 2806ab8:	1007883a 	mov	r3,r2
 2806abc:	8005003a 	cmpeq	r2,r16,zero
 2806ac0:	1000011e 	bne	r2,zero,2806ac8 <__divsi3+0x30>
 2806ac4:	00c7c83a 	sub	r3,zero,r3
 2806ac8:	1805883a 	mov	r2,r3
 2806acc:	dfc00117 	ldw	ra,4(sp)
 2806ad0:	dc000017 	ldw	r16,0(sp)
 2806ad4:	dec00204 	addi	sp,sp,8
 2806ad8:	f800283a 	ret
 2806adc:	0109c83a 	sub	r4,zero,r4
 2806ae0:	04000044 	movi	r16,1
 2806ae4:	000d883a 	mov	r6,zero
 2806ae8:	283ff20e 	bge	r5,zero,2806ab4 <__divsi3+0x1c>
 2806aec:	014bc83a 	sub	r5,zero,r5
 2806af0:	8021003a 	cmpeq	r16,r16,zero
 2806af4:	003fef06 	br	2806ab4 <__divsi3+0x1c>

02806af8 <__modsi3>:
 2806af8:	deffff04 	addi	sp,sp,-4
 2806afc:	dfc00015 	stw	ra,0(sp)
 2806b00:	01800044 	movi	r6,1
 2806b04:	2807883a 	mov	r3,r5
 2806b08:	20000416 	blt	r4,zero,2806b1c <__modsi3+0x24>
 2806b0c:	28000c16 	blt	r5,zero,2806b40 <__modsi3+0x48>
 2806b10:	dfc00017 	ldw	ra,0(sp)
 2806b14:	dec00104 	addi	sp,sp,4
 2806b18:	2806a1c1 	jmpi	2806a1c <udivmodsi4>
 2806b1c:	0109c83a 	sub	r4,zero,r4
 2806b20:	28000b16 	blt	r5,zero,2806b50 <__modsi3+0x58>
 2806b24:	180b883a 	mov	r5,r3
 2806b28:	01800044 	movi	r6,1
 2806b2c:	2806a1c0 	call	2806a1c <udivmodsi4>
 2806b30:	0085c83a 	sub	r2,zero,r2
 2806b34:	dfc00017 	ldw	ra,0(sp)
 2806b38:	dec00104 	addi	sp,sp,4
 2806b3c:	f800283a 	ret
 2806b40:	014bc83a 	sub	r5,zero,r5
 2806b44:	dfc00017 	ldw	ra,0(sp)
 2806b48:	dec00104 	addi	sp,sp,4
 2806b4c:	2806a1c1 	jmpi	2806a1c <udivmodsi4>
 2806b50:	0147c83a 	sub	r3,zero,r5
 2806b54:	003ff306 	br	2806b24 <__modsi3+0x2c>

02806b58 <__udivsi3>:
 2806b58:	000d883a 	mov	r6,zero
 2806b5c:	2806a1c1 	jmpi	2806a1c <udivmodsi4>

02806b60 <__umodsi3>:
 2806b60:	01800044 	movi	r6,1
 2806b64:	2806a1c1 	jmpi	2806a1c <udivmodsi4>

02806b68 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 2806b68:	defffd04 	addi	sp,sp,-12
 2806b6c:	df000215 	stw	fp,8(sp)
 2806b70:	df000204 	addi	fp,sp,8
 2806b74:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 2806b78:	e0bfff17 	ldw	r2,-4(fp)
 2806b7c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2806b80:	e0bffe17 	ldw	r2,-8(fp)
 2806b84:	1005003a 	cmpeq	r2,r2,zero
 2806b88:	1000021e 	bne	r2,zero,2806b94 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 2806b8c:	002af070 	cmpltui	zero,zero,43969
 2806b90:	00000106 	br	2806b98 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 2806b94:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 2806b98:	e037883a 	mov	sp,fp
 2806b9c:	df000017 	ldw	fp,0(sp)
 2806ba0:	dec00104 	addi	sp,sp,4
 2806ba4:	f800283a 	ret

02806ba8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2806ba8:	defffd04 	addi	sp,sp,-12
 2806bac:	dfc00215 	stw	ra,8(sp)
 2806bb0:	df000115 	stw	fp,4(sp)
 2806bb4:	df000104 	addi	fp,sp,4
 2806bb8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 2806bbc:	e13fff17 	ldw	r4,-4(fp)
 2806bc0:	2806b680 	call	2806b68 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2806bc4:	003fff06 	br	2806bc4 <_exit+0x1c>
 2806bc8:	02806868 	cmpgeui	r10,zero,417
